{"version":3,"file":"index.development.js","sources":["../src/regions.ts","../src/types.ts","../src/providers.ts","../src/ConnectionConfig.tsx","../src/sql/types.ts","../src/sql/ResourceSelector.tsx","../src/sql/ConfigEditor/ConfigSelect.tsx","../src/sql/ConfigEditor/InlineInput.tsx","../src/sql/QueryEditor/QueryCodeEditor.tsx","../src/sql/QueryEditor/FormatSelect.tsx","../src/sql/QueryEditor/FillValueSelect.tsx","../src/sql/utils/utils.ts"],"sourcesContent":["export const standardRegions: string[] = [\n  'af-south-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ca-central-1',\n  'cn-north-1',\n  'cn-northwest-1',\n  'eu-central-1',\n  'eu-north-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'me-south-1',\n  'sa-east-1',\n  'us-east-1',\n  'us-east-2',\n  'us-gov-east-1',\n  'us-gov-west-1',\n  'us-iso-east-1',\n  'us-isob-east-1',\n  'us-west-1',\n  'us-west-2',\n];\n","import { DataSourceJsonData, DataSourceSettings } from '@grafana/data';\n\nexport enum AwsAuthType {\n  Keys = 'keys',\n  Credentials = 'credentials',\n  Default = 'default', // was 'arn',\n  EC2IAMRole = 'ec2_iam_role',\n  /**\n   * @deprecated use default\n   */\n  ARN = 'arn',\n}\n\nexport interface AwsAuthDataSourceJsonData extends DataSourceJsonData {\n  authType?: AwsAuthType;\n  assumeRoleArn?: string;\n  externalId?: string;\n  profile?: string; // Credentials profile name, as specified in ~/.aws/credentials\n  defaultRegion?: string; // region if it is not defined by your credentials file\n  endpoint?: string;\n}\n\nexport interface AwsAuthDataSourceSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n  sessionToken?: string;\n}\n\nexport type AwsAuthDataSourceSettings = DataSourceSettings<AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData>;\n","import { SelectableValue } from '@grafana/data';\nimport { AwsAuthType } from './types';\n\nexport const awsAuthProviderOptions = [\n  {\n    label: 'Workspace IAM Role',\n    value: AwsAuthType.EC2IAMRole,\n  },\n  {\n    label: 'AWS SDK Default',\n    value: AwsAuthType.Default,\n  },\n  {\n    label: 'Access & secret key',\n    value: AwsAuthType.Keys,\n  },\n  {\n    label: 'Credentials file',\n    value: AwsAuthType.Credentials,\n  },\n] as Array<SelectableValue<AwsAuthType>>;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Input, Select, InlineField, ButtonGroup, ToolbarButton, FieldSet } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\n\nimport { standardRegions } from './regions';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData, AwsAuthType } from './types';\nimport { awsAuthProviderOptions } from './providers';\n\nconst toOption = (value: string) => ({ value, label: value });\n\nexport interface ConnectionConfigProps<J = AwsAuthDataSourceJsonData, S = AwsAuthDataSourceSecureJsonData>\n  extends DataSourcePluginOptionsEditorProps<J, S> {\n  standardRegions?: string[];\n  loadRegions?: () => Promise<string[]>;\n  defaultEndpoint?: string;\n  skipHeader?: boolean;\n  skipEndpoint?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ConnectionConfig: FC<ConnectionConfigProps> = (props: ConnectionConfigProps) => {\n  const [regions, setRegions] = useState((props.standardRegions || standardRegions).map(toOption));\n  const { loadRegions, onOptionsChange, skipHeader = false, skipEndpoint = false } = props;\n  const options = props.options;\n  let profile = options.jsonData.profile;\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  const settings = (window as any).grafanaBootData.settings;\n  const awsAllowedAuthProviders = settings.awsAllowedAuthProviders ?? [\n    AwsAuthType.Default,\n    AwsAuthType.Keys,\n    AwsAuthType.Credentials,\n  ];\n  const awsAssumeRoleEnabled = settings.awsAssumeRoleEnabled ?? true;\n\n  const currentProvider = awsAuthProviderOptions.find((p) => p.value === options.jsonData.authType);\n\n  useEffect(() => {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          authType: awsAllowedAuthProviders[0],\n        },\n      });\n    }\n  }, [currentProvider, options, onOptionsChange]);\n\n  useEffect(() => {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then((regions) => setRegions(regions.map(toOption)));\n  }, [loadRegions]);\n\n  return (\n    <FieldSet label={skipHeader ? '' : 'Connection Details'} data-testid=\"connection-config\">\n      <InlineField\n        label=\"Authentication Provider\"\n        labelWidth={28}\n        tooltip=\"Specify which AWS credentials chain to use.\"\n      >\n        <Select\n          aria-label=\"Authentication Provider\"\n          className=\"width-30\"\n          value={currentProvider}\n          options={awsAuthProviderOptions.filter((opt) => awsAllowedAuthProviders.includes(opt.value!))}\n          defaultValue={options.jsonData.authType}\n          onChange={(option) => {\n            onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n          }}\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {options.jsonData.authType === 'credentials' && (\n        <InlineField\n          label=\"Credentials Profile Name\"\n          labelWidth={28}\n          tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n        >\n          <Input\n            aria-label=\"Credentials Profile Name\"\n            className=\"width-30\"\n            placeholder=\"default\"\n            value={profile}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'profile')}\n          />\n        </InlineField>\n      )}\n\n      {options.jsonData.authType === 'keys' && (\n        <>\n          <InlineField label=\"Access Key ID\" labelWidth={28}>\n            {props.options.secureJsonFields?.accessKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  tooltip=\"Edit Access Key ID\"\n                  type=\"button\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'accessKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                aria-label=\"Access Key ID\"\n                className=\"width-30\"\n                value={options.secureJsonData?.accessKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')}\n              />\n            )}\n          </InlineField>\n\n          <InlineField label=\"Secret Access Key\" labelWidth={28}>\n            {props.options.secureJsonFields?.secretKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  type=\"button\"\n                  tooltip=\"Edit Secret Access Key\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'secretKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                aria-label=\"Secret Access Key\"\n                className=\"width-30\"\n                value={options.secureJsonData?.secretKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')}\n              />\n            )}\n          </InlineField>\n        </>\n      )}\n\n      {awsAssumeRoleEnabled && (\n        <>\n          <InlineField\n            label=\"Assume Role ARN\"\n            labelWidth={28}\n            tooltip=\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n          >\n            <Input\n              aria-label=\"Assume Role ARN\"\n              className=\"width-30\"\n              placeholder=\"arn:aws:iam:*\"\n              value={options.jsonData.assumeRoleArn || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')}\n            />\n          </InlineField>\n          <InlineField\n            label=\"External ID\"\n            labelWidth={28}\n            tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n          >\n            <Input\n              aria-label=\"External ID\"\n              className=\"width-30\"\n              placeholder=\"External ID\"\n              value={options.jsonData.externalId || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'externalId')}\n            />\n          </InlineField>\n        </>\n      )}\n      {!skipEndpoint && (\n        <InlineField label=\"Endpoint\" labelWidth={28} tooltip=\"Optionally, specify a custom endpoint for the service\">\n          <Input\n            aria-label=\"Endpoint\"\n            className=\"width-30\"\n            placeholder={props.defaultEndpoint ?? 'https://{service}.{region}.amazonaws.com'}\n            value={options.jsonData.endpoint || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'endpoint')}\n          />\n        </InlineField>\n      )}\n      <InlineField\n        label=\"Default Region\"\n        labelWidth={28}\n        tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n      >\n        <Select\n          aria-label=\"Default Region\"\n          className=\"width-30\"\n          value={regions.find((region) => region.value === options.jsonData.defaultRegion)}\n          options={regions}\n          defaultValue={options.jsonData.defaultRegion}\n          allowCustomValue={true}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion')}\n          formatCreateLabel={(r) => `Use region: ${r}`}\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {props.children}\n    </FieldSet>\n  );\n};\n","import { DataQuery } from '@grafana/data';\nimport { FillValueOptions } from './QueryEditor/FillValueSelect';\n\nexport const defaultKey = '__default';\n\nexport interface SQLQuery extends DataQuery {\n  rawSQL: string;\n  format?: number;\n  fillMode?: { mode: FillValueOptions; value?: number };\n}\n","import { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\nimport { SelectCommonProps } from '@grafana/ui/components/Select/types';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { defaultKey } from './types';\n\nexport interface ResourceSelectorProps extends SelectCommonProps<string> {\n  value: string | null;\n  dependencies?: Array<string | null | undefined>;\n  tooltip?: string;\n  label?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  // Options only needed for QueryEditor\n  default?: string;\n  // Options only needed for the ConfigEditor\n  title?: string;\n  labelWidth?: number;\n  saveOptions?: () => Promise<void>;\n  // Either set a way of fetching resources or the resource list\n  fetch?: () => Promise<Array<string | SelectableValue<string>>>;\n  resources?: string[];\n}\n\nexport function ResourceSelector(props: ResourceSelectorProps) {\n  const [resource, setResource] = useState<string | null>(props.value || props.default || null);\n  const [resources, setResources] = useState<Array<string | SelectableValue>>(resource ? [resource] : []);\n  const [dependencies, setDependencies] = useState(props.dependencies);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetched, setFetched] = useState(false);\n  const defaultOpts = useMemo(() => {\n    const opts: Array<SelectableValue<string>> = [\n      {\n        label: `default (${props.default})`,\n        value: defaultKey,\n        description: `Default value set in the data source`,\n      },\n    ];\n    if (props.value && props.value !== defaultKey) {\n      opts.push({ label: props.value, value: props.value });\n    }\n    return opts;\n  }, [props.default, props.value]);\n  const [options, setOptions] = useState<Array<SelectableValue<string>>>(props.default ? defaultOpts : []);\n  useEffect(() => {\n    if (props.resources !== undefined) {\n      setResources(props.resources);\n    }\n  }, [props.resources]);\n  useEffect(() => {\n    const newOptions: Array<SelectableValue<string>> = props.default ? defaultOpts : [];\n    if (resources.length) {\n      resources.forEach((r) => {\n        const value = typeof r === 'string' ? r : r.value;\n        if (!newOptions.find((o) => o.value === value)) {\n          typeof r === 'string' ? newOptions.push({ label: r, value: r }) : newOptions.push(r);\n        }\n      });\n      setOptions(newOptions);\n    } else {\n      setOptions([]);\n    }\n  }, [resources, defaultOpts, props.default]);\n\n  useEffect(() => {\n    // A change in the dependencies cause a state clean-up\n    if (!isEqual(props.dependencies, dependencies)) {\n      setFetched(false);\n      setResource(null);\n      props.onChange(null);\n      setDependencies(props.dependencies);\n    }\n  }, [props, dependencies]);\n\n  const fetch = async () => {\n    if (fetched) {\n      return;\n    }\n    if (props.saveOptions) {\n      await props.saveOptions();\n    }\n    try {\n      const resources = await props.fetch();\n      setResources(resources);\n    } finally {\n      setFetched(true);\n    }\n  };\n\n  const onChange = (e: SelectableValue<string>) => {\n    props.onChange(e);\n    if (e.value) {\n      setResource(e.value);\n    }\n  };\n  const onClick = async () => {\n    setIsLoading(true);\n    try {\n      await fetch();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <InlineField label={props.label} labelWidth={props.labelWidth} tooltip={props.tooltip} hidden={props.hidden}>\n      <div data-testid={props['data-testid']} title={props.title}>\n        <Select\n          {...props}\n          aria-label={props.label}\n          options={options}\n          onChange={onChange}\n          isLoading={isLoading}\n          className={props.className || 'min-width-6'}\n          onOpenMenu={() => props.fetch && onClick()}\n          menuShouldPortal={true}\n        />\n      </div>\n    </InlineField>\n  );\n}\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { InputActionMeta } from '@grafana/ui/components/Select/types';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData } from '../../types';\nimport { ResourceSelector } from '../ResourceSelector';\n\nexport interface ConfigSelectProps\n  extends DataSourcePluginOptionsEditorProps<AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData> {\n  value: string;\n  fetch: () => Promise<Array<string | SelectableValue<string>>>;\n  onChange: (e: SelectableValue<string> | null) => void;\n  dependencies?: string[];\n  label?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  disabled?: boolean;\n  allowCustomValue?: boolean;\n  saveOptions: () => Promise<void>;\n  autoFocus?: boolean;\n  backspaceRemovesValue?: boolean;\n  className?: string;\n  invalid?: boolean;\n  isClearable?: boolean;\n  isMulti?: boolean;\n  inputId?: string;\n  showAllSelectedWhenOpen?: boolean;\n  maxMenuHeight?: number;\n  minMenuHeight?: number;\n  maxVisibleValues?: number;\n  menuPlacement?: 'auto' | 'bottom' | 'top';\n  menuPosition?: 'fixed' | 'absolute';\n  noOptionsMessage?: string;\n  onBlur?: () => void;\n  onCreateOption?: (value: string) => void;\n  onInputChange?: (value: string, actionMeta: InputActionMeta) => void;\n  placeholder?: string;\n  width?: number;\n  isOptionDisabled?: () => boolean;\n}\n\nexport function ConfigSelect(props: ConfigSelectProps) {\n  const { jsonData } = props.options;\n  const commonProps = {\n    title: jsonData.defaultRegion ? '' : 'select a default region',\n    labelWidth: 28,\n    className: 'width-30',\n  };\n  // Any change in the AWS connection details will affect selectors\n  const dependencies: string[] = [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n  ].concat(props.dependencies);\n  return (\n    <ResourceSelector\n      label={props.label}\n      data-testid={props['data-testid']}\n      onChange={props.onChange}\n      fetch={props.fetch}\n      value={props.value}\n      saveOptions={props.saveOptions}\n      dependencies={dependencies}\n      hidden={props.hidden}\n      disabled={props.disabled || !jsonData.defaultRegion}\n      allowCustomValue={props.allowCustomValue}\n      autoFocus={props.autoFocus}\n      backspaceRemovesValue={props.backspaceRemovesValue}\n      className={props.className}\n      invalid={props.invalid}\n      isClearable={props.isClearable}\n      isMulti={props.isMulti}\n      inputId={props.inputId}\n      showAllSelectedWhenOpen={props.showAllSelectedWhenOpen}\n      maxMenuHeight={props.maxMenuHeight}\n      minMenuHeight={props.minMenuHeight}\n      maxVisibleValues={props.maxVisibleValues}\n      menuPlacement={props.menuPlacement}\n      menuPosition={props.menuPosition}\n      noOptionsMessage={props.noOptionsMessage}\n      onBlur={props.onBlur}\n      onCreateOption={props.onCreateOption}\n      onInputChange={props.onInputChange}\n      placeholder={props.placeholder}\n      width={props.width}\n      isOptionDisabled={props.isOptionDisabled}\n      {...commonProps}\n    />\n  );\n}\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { AwsAuthDataSourceSecureJsonData } from '../../types';\nimport { InlineField, Input } from '@grafana/ui';\nimport { FormEvent } from 'react-dom/node_modules/@types/react';\n\nexport interface InlineInputProps extends DataSourcePluginOptionsEditorProps<{}, AwsAuthDataSourceSecureJsonData> {\n  value: string;\n  onChange: (e: FormEvent<HTMLInputElement>) => void;\n  label?: string;\n  tooltip?: string;\n  placeholder?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  disabled?: boolean;\n}\n\nexport function InlineInput(props: InlineInputProps) {\n  return (\n    <InlineField\n      label={props.label}\n      labelWidth={28}\n      tooltip={props.tooltip}\n      hidden={props.hidden}\n      disabled={props.disabled}\n    >\n      <Input\n        data-testid={props['data-testid']}\n        className=\"width-30\"\n        value={props.value}\n        onChange={props.onChange}\n        placeholder={props.placeholder}\n        disabled={props.disabled}\n      />\n    </InlineField>\n  );\n}\n","import { defaults } from 'lodash';\n\nimport React, { useRef, useEffect } from 'react';\nimport { CodeEditor, CodeEditorSuggestionItem } from '@grafana/ui';\nimport { DataQuery } from '@grafana/data';\nimport { MonacoOptions } from '@grafana/ui/components/Monaco/types';\n\ntype EditorProps = {\n  width?: number | string;\n  height?: number | string;\n  readOnly?: boolean;\n  showMiniMap?: boolean;\n  showLineNumbers?: boolean;\n  monacoOptions?: MonacoOptions;\n};\n\ntype Props<TQuery extends DataQuery> = {\n  query: TQuery;\n  language: string;\n  editorProps?: EditorProps;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n  getSuggestions: (query: TQuery) => CodeEditorSuggestionItem[];\n};\n\nexport function QueryCodeEditor<TQuery extends DataQuery>(props: Props<TQuery>) {\n  const { getSuggestions, query } = props;\n  const { rawSQL } = defaults(props.query, { rawSQL: '' });\n  const onRawSqlChange = (rawSQL: string) => {\n    const query = {\n      ...props.query,\n      rawSQL,\n    };\n    props.onChange(query);\n    props.onRunQuery();\n  };\n\n  // Use a reference for suggestions because a bug in CodeEditor getSuggestions\n  // https://github.com/grafana/grafana/issues/40121\n  // It was been fixed in 8.3 but keeping the workaround here to support older\n  // versions.\n  const suggestionsRef = useRef<CodeEditorSuggestionItem[]>([]);\n  useEffect(() => {\n    suggestionsRef.current = getSuggestions(query);\n  }, [getSuggestions, query]);\n\n  return (\n    <CodeEditor\n      language={props.language}\n      value={rawSQL}\n      onBlur={onRawSqlChange}\n      showMiniMap={false}\n      showLineNumbers={true}\n      getSuggestions={() => suggestionsRef.current}\n      height=\"240px\"\n      {...props.editorProps}\n    />\n  );\n}\n","import React from 'react';\nimport { DataQuery, SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nexport type FormatSelectProps<TQuery extends DataQuery, FormatOptions> = {\n  query: TQuery;\n  options: Array<SelectableValue<FormatOptions>>;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function FormatSelect<TQuery extends DataQuery & Record<string, any>, FormatOptions>(\n  props: FormatSelectProps<TQuery, FormatOptions>\n) {\n  const onChangeFormat = (e: SelectableValue<FormatOptions>) => {\n    props.onChange({\n      ...props.query,\n      format: e.value || 0,\n    });\n    props.onRunQuery();\n  };\n  return (\n    <InlineField label=\"Format as\" labelWidth={11}>\n      <Select\n        aria-label=\"Format as\"\n        options={props.options}\n        value={props.query.format}\n        onChange={onChangeFormat}\n        className=\"width-12\"\n        menuShouldPortal={true}\n      />\n    </InlineField>\n  );\n}\n","import React from 'react';\nimport { DataQuery, SelectableValue } from '@grafana/data';\nimport { InlineField, Input, Select } from '@grafana/ui';\n\nexport enum FillValueOptions {\n  Previous,\n  Null,\n  Value,\n}\n\nexport const SelectableFillValueOptions: Array<SelectableValue<FillValueOptions>> = [\n  {\n    label: 'Previous Value',\n    value: FillValueOptions.Previous,\n  },\n  {\n    label: 'NULL',\n    value: FillValueOptions.Null,\n  },\n  {\n    label: 'Value',\n    value: FillValueOptions.Value,\n  },\n];\n\nexport type FillValueSelectProps<TQuery extends DataQuery> = {\n  query: TQuery;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function FillValueSelect<TQuery extends DataQuery & Record<string, any>>(props: FillValueSelectProps<TQuery>) {\n  return (\n    <>\n      <InlineField label=\"Fill value\" tooltip=\"value to fill missing points\">\n        <Select\n          aria-label=\"Fill value\"\n          options={SelectableFillValueOptions}\n          value={props.query.fillMode?.mode ?? FillValueOptions.Previous}\n          onChange={({ value }) => {\n            props.onChange({\n              ...props.query,\n              // Keep the fillMode.value in case FillValueOptions.Value mode is selected back\n              fillMode: { ...props.query.fillMode, mode: value },\n            });\n            props.onRunQuery();\n          }}\n          className=\"width-12\"\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {props.query.fillMode?.mode === FillValueOptions.Value && (\n        <InlineField label=\"Value\" labelWidth={11}>\n          <Input\n            type=\"number\"\n            aria-label=\"Value\"\n            value={props.query.fillMode.value}\n            onChange={({ currentTarget }: React.FormEvent<HTMLInputElement>) =>\n              props.onChange({\n                ...props.query,\n                fillMode: {\n                  mode: FillValueOptions.Value,\n                  value: currentTarget.valueAsNumber,\n                },\n              })\n            }\n            onBlur={() => props.onRunQuery()}\n          />\n        </InlineField>\n      )}\n    </>\n  );\n}\n","import { ScopedVars, VariableModel } from '@grafana/data';\nimport { SQLQuery } from '../types';\nimport { CodeEditorSuggestionItem, CodeEditorSuggestionItemKind } from '@grafana/ui';\n\n/**\n * Do not execute queries that do not exist yet\n */\nexport function filterSQLQuery(query: SQLQuery): boolean {\n  return !!query.rawSQL;\n}\n\nexport function applySQLTemplateVariables(\n  query: SQLQuery,\n  scopedVars: ScopedVars,\n  getTemplateSrv: () => any\n): SQLQuery {\n  const templateSrv = getTemplateSrv();\n  return {\n    ...query,\n    rawSQL: templateSrv.replace(query.rawSQL, scopedVars, interpolateVariable),\n  };\n}\n\nfunction interpolateVariable(value: string | string[]) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  const quotedValues = value.map((v) => {\n    return quoteLiteral(v);\n  });\n  return quotedValues.join(',');\n}\n\nfunction quoteLiteral(value: any) {\n  return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n}\n\nexport const appendTemplateVariablesAsSuggestions = (getTemplateSrv: () => any, sugs: CodeEditorSuggestionItem[]) => {\n  const templateSrv = getTemplateSrv();\n  const templateSugs: CodeEditorSuggestionItem[] = [];\n  templateSrv.getVariables().forEach((variable: VariableModel) => {\n    const label = '$' + variable.name;\n    let val = templateSrv.replace(label);\n    if (val === label) {\n      val = '';\n    }\n    templateSugs.push({\n      label,\n      kind: CodeEditorSuggestionItemKind.Text,\n      detail: `(Template Variable) ${val}`,\n    });\n  });\n\n  return sugs.concat(templateSugs);\n};\n"],"names":["AwsAuthType","useState","useEffect","React","FieldSet","InlineField","Select","onUpdateDatasourceJsonDataOptionSelect","Input","onUpdateDatasourceJsonDataOption","ButtonGroup","ToolbarButton","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption","useMemo","isEqual","defaults","useRef","CodeEditor","FillValueOptions","CodeEditorSuggestionItemKind"],"mappings":"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"}