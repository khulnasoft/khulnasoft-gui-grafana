{"version":3,"file":"index.production.js","sources":["../src/types.ts","../src/regions.ts","../src/sql/QueryEditor/FillValueSelect.tsx","../src/providers.ts","../src/ConnectionConfig.tsx","../src/sql/ResourceSelector.tsx","../src/sql/types.ts","../src/sql/utils/utils.ts","../src/sql/ConfigEditor/ConfigSelect.tsx","../src/sql/QueryEditor/FormatSelect.tsx","../src/sql/ConfigEditor/InlineInput.tsx","../src/sql/QueryEditor/QueryCodeEditor.tsx"],"sourcesContent":["import { DataSourceJsonData, DataSourceSettings } from '@grafana/data';\n\nexport enum AwsAuthType {\n  Keys = 'keys',\n  Credentials = 'credentials',\n  Default = 'default', // was 'arn',\n  EC2IAMRole = 'ec2_iam_role',\n  /**\n   * @deprecated use default\n   */\n  ARN = 'arn',\n}\n\nexport interface AwsAuthDataSourceJsonData extends DataSourceJsonData {\n  authType?: AwsAuthType;\n  assumeRoleArn?: string;\n  externalId?: string;\n  profile?: string; // Credentials profile name, as specified in ~/.aws/credentials\n  defaultRegion?: string; // region if it is not defined by your credentials file\n  endpoint?: string;\n}\n\nexport interface AwsAuthDataSourceSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n  sessionToken?: string;\n}\n\nexport type AwsAuthDataSourceSettings = DataSourceSettings<AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData>;\n","export const standardRegions: string[] = [\n  'af-south-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ca-central-1',\n  'cn-north-1',\n  'cn-northwest-1',\n  'eu-central-1',\n  'eu-north-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'me-south-1',\n  'sa-east-1',\n  'us-east-1',\n  'us-east-2',\n  'us-gov-east-1',\n  'us-gov-west-1',\n  'us-iso-east-1',\n  'us-isob-east-1',\n  'us-west-1',\n  'us-west-2',\n];\n","import React from 'react';\nimport { DataQuery, SelectableValue } from '@grafana/data';\nimport { InlineField, Input, Select } from '@grafana/ui';\n\nexport enum FillValueOptions {\n  Previous,\n  Null,\n  Value,\n}\n\nexport const SelectableFillValueOptions: Array<SelectableValue<FillValueOptions>> = [\n  {\n    label: 'Previous Value',\n    value: FillValueOptions.Previous,\n  },\n  {\n    label: 'NULL',\n    value: FillValueOptions.Null,\n  },\n  {\n    label: 'Value',\n    value: FillValueOptions.Value,\n  },\n];\n\nexport type FillValueSelectProps<TQuery extends DataQuery> = {\n  query: TQuery;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function FillValueSelect<TQuery extends DataQuery & Record<string, any>>(props: FillValueSelectProps<TQuery>) {\n  return (\n    <>\n      <InlineField label=\"Fill value\" tooltip=\"value to fill missing points\">\n        <Select\n          aria-label=\"Fill value\"\n          options={SelectableFillValueOptions}\n          value={props.query.fillMode?.mode ?? FillValueOptions.Previous}\n          onChange={({ value }) => {\n            props.onChange({\n              ...props.query,\n              // Keep the fillMode.value in case FillValueOptions.Value mode is selected back\n              fillMode: { ...props.query.fillMode, mode: value },\n            });\n            props.onRunQuery();\n          }}\n          className=\"width-12\"\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {props.query.fillMode?.mode === FillValueOptions.Value && (\n        <InlineField label=\"Value\" labelWidth={11}>\n          <Input\n            type=\"number\"\n            aria-label=\"Value\"\n            value={props.query.fillMode.value}\n            onChange={({ currentTarget }: React.FormEvent<HTMLInputElement>) =>\n              props.onChange({\n                ...props.query,\n                fillMode: {\n                  mode: FillValueOptions.Value,\n                  value: currentTarget.valueAsNumber,\n                },\n              })\n            }\n            onBlur={() => props.onRunQuery()}\n          />\n        </InlineField>\n      )}\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { AwsAuthType } from './types';\n\nexport const awsAuthProviderOptions = [\n  {\n    label: 'Workspace IAM Role',\n    value: AwsAuthType.EC2IAMRole,\n  },\n  {\n    label: 'AWS SDK Default',\n    value: AwsAuthType.Default,\n  },\n  {\n    label: 'Access & secret key',\n    value: AwsAuthType.Keys,\n  },\n  {\n    label: 'Credentials file',\n    value: AwsAuthType.Credentials,\n  },\n] as Array<SelectableValue<AwsAuthType>>;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Input, Select, InlineField, ButtonGroup, ToolbarButton, FieldSet } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\n\nimport { standardRegions } from './regions';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData, AwsAuthType } from './types';\nimport { awsAuthProviderOptions } from './providers';\n\nconst toOption = (value: string) => ({ value, label: value });\n\nexport interface ConnectionConfigProps<J = AwsAuthDataSourceJsonData, S = AwsAuthDataSourceSecureJsonData>\n  extends DataSourcePluginOptionsEditorProps<J, S> {\n  standardRegions?: string[];\n  loadRegions?: () => Promise<string[]>;\n  defaultEndpoint?: string;\n  skipHeader?: boolean;\n  skipEndpoint?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ConnectionConfig: FC<ConnectionConfigProps> = (props: ConnectionConfigProps) => {\n  const [regions, setRegions] = useState((props.standardRegions || standardRegions).map(toOption));\n  const { loadRegions, onOptionsChange, skipHeader = false, skipEndpoint = false } = props;\n  const options = props.options;\n  let profile = options.jsonData.profile;\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  const settings = (window as any).grafanaBootData.settings;\n  const awsAllowedAuthProviders = settings.awsAllowedAuthProviders ?? [\n    AwsAuthType.Default,\n    AwsAuthType.Keys,\n    AwsAuthType.Credentials,\n  ];\n  const awsAssumeRoleEnabled = settings.awsAssumeRoleEnabled ?? true;\n\n  const currentProvider = awsAuthProviderOptions.find((p) => p.value === options.jsonData.authType);\n\n  useEffect(() => {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          authType: awsAllowedAuthProviders[0],\n        },\n      });\n    }\n  }, [currentProvider, options, onOptionsChange]);\n\n  useEffect(() => {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then((regions) => setRegions(regions.map(toOption)));\n  }, [loadRegions]);\n\n  return (\n    <FieldSet label={skipHeader ? '' : 'Connection Details'} data-testid=\"connection-config\">\n      <InlineField\n        label=\"Authentication Provider\"\n        labelWidth={28}\n        tooltip=\"Specify which AWS credentials chain to use.\"\n      >\n        <Select\n          aria-label=\"Authentication Provider\"\n          className=\"width-30\"\n          value={currentProvider}\n          options={awsAuthProviderOptions.filter((opt) => awsAllowedAuthProviders.includes(opt.value!))}\n          defaultValue={options.jsonData.authType}\n          onChange={(option) => {\n            onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n          }}\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {options.jsonData.authType === 'credentials' && (\n        <InlineField\n          label=\"Credentials Profile Name\"\n          labelWidth={28}\n          tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n        >\n          <Input\n            aria-label=\"Credentials Profile Name\"\n            className=\"width-30\"\n            placeholder=\"default\"\n            value={profile}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'profile')}\n          />\n        </InlineField>\n      )}\n\n      {options.jsonData.authType === 'keys' && (\n        <>\n          <InlineField label=\"Access Key ID\" labelWidth={28}>\n            {props.options.secureJsonFields?.accessKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  tooltip=\"Edit Access Key ID\"\n                  type=\"button\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'accessKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                aria-label=\"Access Key ID\"\n                className=\"width-30\"\n                value={options.secureJsonData?.accessKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')}\n              />\n            )}\n          </InlineField>\n\n          <InlineField label=\"Secret Access Key\" labelWidth={28}>\n            {props.options.secureJsonFields?.secretKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  type=\"button\"\n                  tooltip=\"Edit Secret Access Key\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'secretKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                aria-label=\"Secret Access Key\"\n                className=\"width-30\"\n                value={options.secureJsonData?.secretKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')}\n              />\n            )}\n          </InlineField>\n        </>\n      )}\n\n      {awsAssumeRoleEnabled && (\n        <>\n          <InlineField\n            label=\"Assume Role ARN\"\n            labelWidth={28}\n            tooltip=\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n          >\n            <Input\n              aria-label=\"Assume Role ARN\"\n              className=\"width-30\"\n              placeholder=\"arn:aws:iam:*\"\n              value={options.jsonData.assumeRoleArn || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')}\n            />\n          </InlineField>\n          <InlineField\n            label=\"External ID\"\n            labelWidth={28}\n            tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n          >\n            <Input\n              aria-label=\"External ID\"\n              className=\"width-30\"\n              placeholder=\"External ID\"\n              value={options.jsonData.externalId || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'externalId')}\n            />\n          </InlineField>\n        </>\n      )}\n      {!skipEndpoint && (\n        <InlineField label=\"Endpoint\" labelWidth={28} tooltip=\"Optionally, specify a custom endpoint for the service\">\n          <Input\n            aria-label=\"Endpoint\"\n            className=\"width-30\"\n            placeholder={props.defaultEndpoint ?? 'https://{service}.{region}.amazonaws.com'}\n            value={options.jsonData.endpoint || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'endpoint')}\n          />\n        </InlineField>\n      )}\n      <InlineField\n        label=\"Default Region\"\n        labelWidth={28}\n        tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n      >\n        <Select\n          aria-label=\"Default Region\"\n          className=\"width-30\"\n          value={regions.find((region) => region.value === options.jsonData.defaultRegion)}\n          options={regions}\n          defaultValue={options.jsonData.defaultRegion}\n          allowCustomValue={true}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion')}\n          formatCreateLabel={(r) => `Use region: ${r}`}\n          menuShouldPortal={true}\n        />\n      </InlineField>\n      {props.children}\n    </FieldSet>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\nimport { SelectCommonProps } from '@grafana/ui/components/Select/types';\nimport { isEqual } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { defaultKey } from './types';\n\nexport interface ResourceSelectorProps extends SelectCommonProps<string> {\n  value: string | null;\n  dependencies?: Array<string | null | undefined>;\n  tooltip?: string;\n  label?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  // Options only needed for QueryEditor\n  default?: string;\n  // Options only needed for the ConfigEditor\n  title?: string;\n  labelWidth?: number;\n  saveOptions?: () => Promise<void>;\n  // Either set a way of fetching resources or the resource list\n  fetch?: () => Promise<Array<string | SelectableValue<string>>>;\n  resources?: string[];\n}\n\nexport function ResourceSelector(props: ResourceSelectorProps) {\n  const [resource, setResource] = useState<string | null>(props.value || props.default || null);\n  const [resources, setResources] = useState<Array<string | SelectableValue>>(resource ? [resource] : []);\n  const [dependencies, setDependencies] = useState(props.dependencies);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetched, setFetched] = useState(false);\n  const defaultOpts = useMemo(() => {\n    const opts: Array<SelectableValue<string>> = [\n      {\n        label: `default (${props.default})`,\n        value: defaultKey,\n        description: `Default value set in the data source`,\n      },\n    ];\n    if (props.value && props.value !== defaultKey) {\n      opts.push({ label: props.value, value: props.value });\n    }\n    return opts;\n  }, [props.default, props.value]);\n  const [options, setOptions] = useState<Array<SelectableValue<string>>>(props.default ? defaultOpts : []);\n  useEffect(() => {\n    if (props.resources !== undefined) {\n      setResources(props.resources);\n    }\n  }, [props.resources]);\n  useEffect(() => {\n    const newOptions: Array<SelectableValue<string>> = props.default ? defaultOpts : [];\n    if (resources.length) {\n      resources.forEach((r) => {\n        const value = typeof r === 'string' ? r : r.value;\n        if (!newOptions.find((o) => o.value === value)) {\n          typeof r === 'string' ? newOptions.push({ label: r, value: r }) : newOptions.push(r);\n        }\n      });\n      setOptions(newOptions);\n    } else {\n      setOptions([]);\n    }\n  }, [resources, defaultOpts, props.default]);\n\n  useEffect(() => {\n    // A change in the dependencies cause a state clean-up\n    if (!isEqual(props.dependencies, dependencies)) {\n      setFetched(false);\n      setResource(null);\n      props.onChange(null);\n      setDependencies(props.dependencies);\n    }\n  }, [props, dependencies]);\n\n  const fetch = async () => {\n    if (fetched) {\n      return;\n    }\n    if (props.saveOptions) {\n      await props.saveOptions();\n    }\n    try {\n      const resources = await props.fetch();\n      setResources(resources);\n    } finally {\n      setFetched(true);\n    }\n  };\n\n  const onChange = (e: SelectableValue<string>) => {\n    props.onChange(e);\n    if (e.value) {\n      setResource(e.value);\n    }\n  };\n  const onClick = async () => {\n    setIsLoading(true);\n    try {\n      await fetch();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <InlineField label={props.label} labelWidth={props.labelWidth} tooltip={props.tooltip} hidden={props.hidden}>\n      <div data-testid={props['data-testid']} title={props.title}>\n        <Select\n          {...props}\n          aria-label={props.label}\n          options={options}\n          onChange={onChange}\n          isLoading={isLoading}\n          className={props.className || 'min-width-6'}\n          onOpenMenu={() => props.fetch && onClick()}\n          menuShouldPortal={true}\n        />\n      </div>\n    </InlineField>\n  );\n}\n","import { DataQuery } from '@grafana/data';\nimport { FillValueOptions } from './QueryEditor/FillValueSelect';\n\nexport const defaultKey = '__default';\n\nexport interface SQLQuery extends DataQuery {\n  rawSQL: string;\n  format?: number;\n  fillMode?: { mode: FillValueOptions; value?: number };\n}\n","import { ScopedVars, VariableModel } from '@grafana/data';\nimport { SQLQuery } from '../types';\nimport { CodeEditorSuggestionItem, CodeEditorSuggestionItemKind } from '@grafana/ui';\n\n/**\n * Do not execute queries that do not exist yet\n */\nexport function filterSQLQuery(query: SQLQuery): boolean {\n  return !!query.rawSQL;\n}\n\nexport function applySQLTemplateVariables(\n  query: SQLQuery,\n  scopedVars: ScopedVars,\n  getTemplateSrv: () => any\n): SQLQuery {\n  const templateSrv = getTemplateSrv();\n  return {\n    ...query,\n    rawSQL: templateSrv.replace(query.rawSQL, scopedVars, interpolateVariable),\n  };\n}\n\nfunction interpolateVariable(value: string | string[]) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  const quotedValues = value.map((v) => {\n    return quoteLiteral(v);\n  });\n  return quotedValues.join(',');\n}\n\nfunction quoteLiteral(value: any) {\n  return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n}\n\nexport const appendTemplateVariablesAsSuggestions = (getTemplateSrv: () => any, sugs: CodeEditorSuggestionItem[]) => {\n  const templateSrv = getTemplateSrv();\n  const templateSugs: CodeEditorSuggestionItem[] = [];\n  templateSrv.getVariables().forEach((variable: VariableModel) => {\n    const label = '$' + variable.name;\n    let val = templateSrv.replace(label);\n    if (val === label) {\n      val = '';\n    }\n    templateSugs.push({\n      label,\n      kind: CodeEditorSuggestionItemKind.Text,\n      detail: `(Template Variable) ${val}`,\n    });\n  });\n\n  return sugs.concat(templateSugs);\n};\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { InputActionMeta } from '@grafana/ui/components/Select/types';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData } from '../../types';\nimport { ResourceSelector } from '../ResourceSelector';\n\nexport interface ConfigSelectProps\n  extends DataSourcePluginOptionsEditorProps<AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData> {\n  value: string;\n  fetch: () => Promise<Array<string | SelectableValue<string>>>;\n  onChange: (e: SelectableValue<string> | null) => void;\n  dependencies?: string[];\n  label?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  disabled?: boolean;\n  allowCustomValue?: boolean;\n  saveOptions: () => Promise<void>;\n  autoFocus?: boolean;\n  backspaceRemovesValue?: boolean;\n  className?: string;\n  invalid?: boolean;\n  isClearable?: boolean;\n  isMulti?: boolean;\n  inputId?: string;\n  showAllSelectedWhenOpen?: boolean;\n  maxMenuHeight?: number;\n  minMenuHeight?: number;\n  maxVisibleValues?: number;\n  menuPlacement?: 'auto' | 'bottom' | 'top';\n  menuPosition?: 'fixed' | 'absolute';\n  noOptionsMessage?: string;\n  onBlur?: () => void;\n  onCreateOption?: (value: string) => void;\n  onInputChange?: (value: string, actionMeta: InputActionMeta) => void;\n  placeholder?: string;\n  width?: number;\n  isOptionDisabled?: () => boolean;\n}\n\nexport function ConfigSelect(props: ConfigSelectProps) {\n  const { jsonData } = props.options;\n  const commonProps = {\n    title: jsonData.defaultRegion ? '' : 'select a default region',\n    labelWidth: 28,\n    className: 'width-30',\n  };\n  // Any change in the AWS connection details will affect selectors\n  const dependencies: string[] = [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n  ].concat(props.dependencies);\n  return (\n    <ResourceSelector\n      label={props.label}\n      data-testid={props['data-testid']}\n      onChange={props.onChange}\n      fetch={props.fetch}\n      value={props.value}\n      saveOptions={props.saveOptions}\n      dependencies={dependencies}\n      hidden={props.hidden}\n      disabled={props.disabled || !jsonData.defaultRegion}\n      allowCustomValue={props.allowCustomValue}\n      autoFocus={props.autoFocus}\n      backspaceRemovesValue={props.backspaceRemovesValue}\n      className={props.className}\n      invalid={props.invalid}\n      isClearable={props.isClearable}\n      isMulti={props.isMulti}\n      inputId={props.inputId}\n      showAllSelectedWhenOpen={props.showAllSelectedWhenOpen}\n      maxMenuHeight={props.maxMenuHeight}\n      minMenuHeight={props.minMenuHeight}\n      maxVisibleValues={props.maxVisibleValues}\n      menuPlacement={props.menuPlacement}\n      menuPosition={props.menuPosition}\n      noOptionsMessage={props.noOptionsMessage}\n      onBlur={props.onBlur}\n      onCreateOption={props.onCreateOption}\n      onInputChange={props.onInputChange}\n      placeholder={props.placeholder}\n      width={props.width}\n      isOptionDisabled={props.isOptionDisabled}\n      {...commonProps}\n    />\n  );\n}\n","import React from 'react';\nimport { DataQuery, SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nexport type FormatSelectProps<TQuery extends DataQuery, FormatOptions> = {\n  query: TQuery;\n  options: Array<SelectableValue<FormatOptions>>;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function FormatSelect<TQuery extends DataQuery & Record<string, any>, FormatOptions>(\n  props: FormatSelectProps<TQuery, FormatOptions>\n) {\n  const onChangeFormat = (e: SelectableValue<FormatOptions>) => {\n    props.onChange({\n      ...props.query,\n      format: e.value || 0,\n    });\n    props.onRunQuery();\n  };\n  return (\n    <InlineField label=\"Format as\" labelWidth={11}>\n      <Select\n        aria-label=\"Format as\"\n        options={props.options}\n        value={props.query.format}\n        onChange={onChangeFormat}\n        className=\"width-12\"\n        menuShouldPortal={true}\n      />\n    </InlineField>\n  );\n}\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { AwsAuthDataSourceSecureJsonData } from '../../types';\nimport { InlineField, Input } from '@grafana/ui';\nimport { FormEvent } from 'react-dom/node_modules/@types/react';\n\nexport interface InlineInputProps extends DataSourcePluginOptionsEditorProps<{}, AwsAuthDataSourceSecureJsonData> {\n  value: string;\n  onChange: (e: FormEvent<HTMLInputElement>) => void;\n  label?: string;\n  tooltip?: string;\n  placeholder?: string;\n  'data-testid'?: string;\n  hidden?: boolean;\n  disabled?: boolean;\n}\n\nexport function InlineInput(props: InlineInputProps) {\n  return (\n    <InlineField\n      label={props.label}\n      labelWidth={28}\n      tooltip={props.tooltip}\n      hidden={props.hidden}\n      disabled={props.disabled}\n    >\n      <Input\n        data-testid={props['data-testid']}\n        className=\"width-30\"\n        value={props.value}\n        onChange={props.onChange}\n        placeholder={props.placeholder}\n        disabled={props.disabled}\n      />\n    </InlineField>\n  );\n}\n","import { defaults } from 'lodash';\n\nimport React, { useRef, useEffect } from 'react';\nimport { CodeEditor, CodeEditorSuggestionItem } from '@grafana/ui';\nimport { DataQuery } from '@grafana/data';\nimport { MonacoOptions } from '@grafana/ui/components/Monaco/types';\n\ntype EditorProps = {\n  width?: number | string;\n  height?: number | string;\n  readOnly?: boolean;\n  showMiniMap?: boolean;\n  showLineNumbers?: boolean;\n  monacoOptions?: MonacoOptions;\n};\n\ntype Props<TQuery extends DataQuery> = {\n  query: TQuery;\n  language: string;\n  editorProps?: EditorProps;\n  onChange: (value: TQuery) => void;\n  onRunQuery: () => void;\n  getSuggestions: (query: TQuery) => CodeEditorSuggestionItem[];\n};\n\nexport function QueryCodeEditor<TQuery extends DataQuery>(props: Props<TQuery>) {\n  const { getSuggestions, query } = props;\n  const { rawSQL } = defaults(props.query, { rawSQL: '' });\n  const onRawSqlChange = (rawSQL: string) => {\n    const query = {\n      ...props.query,\n      rawSQL,\n    };\n    props.onChange(query);\n    props.onRunQuery();\n  };\n\n  // Use a reference for suggestions because a bug in CodeEditor getSuggestions\n  // https://github.com/grafana/grafana/issues/40121\n  // It was been fixed in 8.3 but keeping the workaround here to support older\n  // versions.\n  const suggestionsRef = useRef<CodeEditorSuggestionItem[]>([]);\n  useEffect(() => {\n    suggestionsRef.current = getSuggestions(query);\n  }, [getSuggestions, query]);\n\n  return (\n    <CodeEditor\n      language={props.language}\n      value={rawSQL}\n      onBlur={onRawSqlChange}\n      showMiniMap={false}\n      showLineNumbers={true}\n      getSuggestions={() => suggestionsRef.current}\n      height=\"240px\"\n      {...props.editorProps}\n    />\n  );\n}\n"],"names":["AwsAuthType","standardRegions","FillValueOptions","awsAuthProviderOptions","label","value","EC2IAMRole","Default","Keys","Credentials","toOption","ResourceSelector","props","_a","__read","useState","default","resource","setResource","_b","resources","setResources","_c","dependencies","setDependencies","_d","isLoading","setIsLoading","_e","fetched","setFetched","defaultOpts","useMemo","opts","description","push","_f","options","setOptions","useEffect","undefined","newOptions","length","forEach","r","find","o","isEqual","onChange","React","InlineField","labelWidth","tooltip","hidden","title","Select","e","className","onOpenMenu","fetch","saveOptions","resources_1","menuShouldPortal","SelectableFillValueOptions","Previous","Null","Value","interpolateVariable","map","v","String","replace","quoteLiteral","join","jsonData","commonProps","defaultRegion","assumeRoleArn","authType","endpoint","externalId","profile","concat","disabled","allowCustomValue","autoFocus","backspaceRemovesValue","invalid","isClearable","isMulti","inputId","showAllSelectedWhenOpen","maxMenuHeight","minMenuHeight","maxVisibleValues","menuPlacement","menuPosition","noOptionsMessage","onBlur","onCreateOption","onInputChange","placeholder","width","isOptionDisabled","_k","regions","setRegions","loadRegions","onOptionsChange","_l","skipHeader","_m","skipEndpoint","database","settings","window","grafanaBootData","awsAllowedAuthProviders","awsAssumeRoleEnabled","currentProvider","p","then","FieldSet","filter","opt","includes","defaultValue","option","onUpdateDatasourceJsonDataOptionSelect","Input","onUpdateDatasourceJsonDataOption","secureJsonFields","accessKey","ButtonGroup","ToolbarButton","icon","type","onClick","onUpdateDatasourceResetOption","secureJsonData","onUpdateDatasourceSecureJsonDataOption","secretKey","defaultEndpoint","region","formatCreateLabel","children","query","fillMode","mode","onRunQuery","currentTarget","valueAsNumber","format","getSuggestions","rawSQL","defaults","suggestionsRef","useRef","current","CodeEditor","language","showMiniMap","showLineNumbers","height","editorProps","getTemplateSrv","sugs","templateSrv","templateSugs","getVariables","variable","name","val","kind","CodeEditorSuggestionItemKind","Text","detail","scopedVars"],"mappings":"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"}