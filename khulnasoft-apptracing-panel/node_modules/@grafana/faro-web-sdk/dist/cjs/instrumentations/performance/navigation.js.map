{"version":3,"file":"navigation.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/navigation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,gDAAgD;AAGhD,qCAA+D;AAC/D,wEAAwE;AAExE,+DAA0D;AAC1D,uDAAmH;AAKnH,SAAgB,oBAAoB,CAClC,SAAiC,EACjC,WAAmC;IAEnC,IAAI,0BAA+D,CAAC;IACpE,IAAM,0BAA0B,GAAG,IAAI,OAAO,CAAqB,UAAC,OAAO;QACzE,0BAA0B,GAAG,OAAO,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,IAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,UAAC,eAAe;;QAChD,IAAA,kBAAkB,GAAI,eAAe,CAAC,UAAU,EAAE,GAAhC,CAAiC;QAE1D,IAAI,kBAAkB,IAAI,IAAI,IAAI,IAAA,oCAAiB,EAAC,WAAW,EAAE,kBAAkB,CAAC,IAAI,CAAC,EAAE;YACzF,OAAO;SACR;QAED,IAAM,YAAY,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC;QAEjD,IAAI,WAAW,GAAgB,IAAA,iDAA8B,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,CAAC,CAAC;QAE1F,IAAM,wBAAwB,GAAG,MAAA,IAAA,eAAO,EAAC,oDAAyB,EAAE,sBAAc,CAAC,OAAO,CAAC,mCAAI,SAAS,CAAC;QAEzG,IAAM,mBAAmB,yBACpB,IAAA,6CAA0B,EAAC,YAAY,CAAC,KAC3C,gBAAgB,EAAE,IAAA,sBAAU,GAAE,EAC9B,wBAAwB,0BAAA,GACzB,CAAC;QAEF,IAAA,eAAO,EAAC,oDAAyB,EAAE,mBAAmB,CAAC,gBAAgB,EAAE,sBAAc,CAAC,OAAO,CAAC,CAAC;QAEjG,SAAS,CAAC,6BAA6B,EAAE,mBAAmB,EAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;QAE1F,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC;QACf,IAAI,EAAE,uCAAgB;QACtB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IAEH,OAAO,0BAA0B,CAAC;AACpC,CAAC;AAzCD,oDAyCC","sourcesContent":["import { genShortID } from '@grafana/faro-core';\nimport type { EventsAPI, PushEventOptions } from '@grafana/faro-core';\n\nimport { getItem, setItem, webStorageType } from '../../utils';\nimport { NAVIGATION_ID_STORAGE_KEY } from '../instrumentationConstants';\n\nimport { NAVIGATION_ENTRY } from './performanceConstants';\nimport { createFaroNavigationTiming, entryUrlIsIgnored, getSpanContextFromServerTiming } from './performanceUtils';\nimport type { FaroNavigationItem } from './types';\n\ntype SpanContext = PushEventOptions['spanContext'];\n\nexport function getNavigationTimings(\n  pushEvent: EventsAPI['pushEvent'],\n  ignoredUrls: Array<string | RegExp>\n): Promise<FaroNavigationItem> {\n  let faroNavigationEntryResolve: (value: FaroNavigationItem) => void;\n  const faroNavigationEntryPromise = new Promise<FaroNavigationItem>((resolve) => {\n    faroNavigationEntryResolve = resolve;\n  });\n\n  const observer = new PerformanceObserver((observedEntries) => {\n    const [navigationEntryRaw] = observedEntries.getEntries();\n\n    if (navigationEntryRaw == null || entryUrlIsIgnored(ignoredUrls, navigationEntryRaw.name)) {\n      return;\n    }\n\n    const navEntryJson = navigationEntryRaw.toJSON();\n\n    let spanContext: SpanContext = getSpanContextFromServerTiming(navEntryJson?.serverTiming);\n\n    const faroPreviousNavigationId = getItem(NAVIGATION_ID_STORAGE_KEY, webStorageType.session) ?? 'unknown';\n\n    const faroNavigationEntry: FaroNavigationItem = {\n      ...createFaroNavigationTiming(navEntryJson),\n      faroNavigationId: genShortID(),\n      faroPreviousNavigationId,\n    };\n\n    setItem(NAVIGATION_ID_STORAGE_KEY, faroNavigationEntry.faroNavigationId, webStorageType.session);\n\n    pushEvent('faro.performance.navigation', faroNavigationEntry, undefined, { spanContext });\n\n    faroNavigationEntryResolve(faroNavigationEntry);\n  });\n\n  observer.observe({\n    type: NAVIGATION_ENTRY,\n    buffered: true,\n  });\n\n  return faroNavigationEntryPromise;\n}\n"]}