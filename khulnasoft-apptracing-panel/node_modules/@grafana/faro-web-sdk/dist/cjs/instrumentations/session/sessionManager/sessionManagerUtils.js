"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSessionManagerByConfig = exports.addSessionMetadataToNextSession = exports.getUserSessionUpdater = exports.isUserSessionValid = exports.createUserSessionObject = void 0;
var faro_core_1 = require("@grafana/faro-core");
var utils_1 = require("../../../utils");
var _1 = require(".");
var sampling_1 = require("./sampling");
var sessionConstants_1 = require("./sessionConstants");
function createUserSessionObject(_a) {
    var _b, _c;
    var _d = _a === void 0 ? {} : _a, sessionId = _d.sessionId, started = _d.started, lastActivity = _d.lastActivity, _e = _d.isSampled, isSampled = _e === void 0 ? true : _e;
    var now = (0, faro_core_1.dateNow)();
    var generateSessionId = (_c = (_b = faro_core_1.faro.config) === null || _b === void 0 ? void 0 : _b.sessionTracking) === null || _c === void 0 ? void 0 : _c.generateSessionId;
    if (sessionId == null) {
        sessionId = typeof generateSessionId === 'function' ? generateSessionId() : (0, faro_core_1.genShortID)();
    }
    return {
        sessionId: sessionId,
        lastActivity: lastActivity !== null && lastActivity !== void 0 ? lastActivity : now,
        started: started !== null && started !== void 0 ? started : now,
        isSampled: isSampled,
    };
}
exports.createUserSessionObject = createUserSessionObject;
function isUserSessionValid(session) {
    if (session == null) {
        return false;
    }
    var now = (0, faro_core_1.dateNow)();
    var lifetimeValid = now - session.started < sessionConstants_1.SESSION_EXPIRATION_TIME;
    if (!lifetimeValid) {
        return false;
    }
    var inactivityPeriodValid = now - session.lastActivity < sessionConstants_1.SESSION_INACTIVITY_TIME;
    return inactivityPeriodValid;
}
exports.isUserSessionValid = isUserSessionValid;
function getUserSessionUpdater(_a) {
    var fetchUserSession = _a.fetchUserSession, storeUserSession = _a.storeUserSession;
    return function updateSession(_a) {
        var _b, _c, _d;
        var _e = _a === void 0 ? { forceSessionExtend: false } : _a, forceSessionExtend = _e.forceSessionExtend;
        if (!fetchUserSession || !storeUserSession) {
            return;
        }
        var sessionTrackingConfig = faro_core_1.faro.config.sessionTracking;
        var isPersistentSessions = sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.persistent;
        if ((isPersistentSessions && !utils_1.isLocalStorageAvailable) || (!isPersistentSessions && !utils_1.isSessionStorageAvailable)) {
            return;
        }
        var sessionFromStorage = fetchUserSession();
        if (forceSessionExtend === false && isUserSessionValid(sessionFromStorage)) {
            storeUserSession(__assign(__assign({}, sessionFromStorage), { lastActivity: (0, faro_core_1.dateNow)() }));
        }
        else {
            var newSession = addSessionMetadataToNextSession(createUserSessionObject({ isSampled: (0, sampling_1.isSampled)() }), sessionFromStorage);
            storeUserSession(newSession);
            (_b = faro_core_1.faro.api) === null || _b === void 0 ? void 0 : _b.setSession(newSession.sessionMeta);
            (_c = sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.onSessionChange) === null || _c === void 0 ? void 0 : _c.call(sessionTrackingConfig, (_d = sessionFromStorage === null || sessionFromStorage === void 0 ? void 0 : sessionFromStorage.sessionMeta) !== null && _d !== void 0 ? _d : null, newSession.sessionMeta);
        }
    };
}
exports.getUserSessionUpdater = getUserSessionUpdater;
function addSessionMetadataToNextSession(newSession, previousSession) {
    var _a, _b, _c, _d;
    var sessionWithMeta = __assign(__assign({}, newSession), { sessionMeta: {
            id: newSession.sessionId,
            attributes: __assign(__assign(__assign(__assign({}, (_b = (_a = faro_core_1.faro.config.sessionTracking) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.attributes), ((_d = (_c = faro_core_1.faro.metas.value.session) === null || _c === void 0 ? void 0 : _c.attributes) !== null && _d !== void 0 ? _d : {})), (previousSession != null ? { previousSession: previousSession.sessionId } : {})), { isSampled: newSession.isSampled.toString() }),
        } });
    return sessionWithMeta;
}
exports.addSessionMetadataToNextSession = addSessionMetadataToNextSession;
function getSessionManagerByConfig(sessionTrackingConfig) {
    return (sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.persistent) ? _1.PersistentSessionsManager : _1.VolatileSessionsManager;
}
exports.getSessionManagerByConfig = getSessionManagerByConfig;
//# sourceMappingURL=sessionManagerUtils.js.map