{"version":3,"file":"performanceUtils.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/performanceUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray, type PushEventOptions } from '@grafana/faro-core';\n\nimport type { CacheType, FaroNavigationTiming, FaroResourceTiming } from './types';\n\nconst w3cTraceparentFormat = /^00-[a-f0-9]{32}-[a-f0-9]{16}-[0-9]{1,2}$/;\n\ntype SpanContext = PushEventOptions['spanContext'];\n\n// Extract traceparent from serverTiming, if present\nexport function getSpanContextFromServerTiming(serverTimings: PerformanceServerTiming[] = []): SpanContext | undefined {\n  for (const serverEntry of serverTimings) {\n    if (serverEntry.name === 'traceparent') {\n      if (!w3cTraceparentFormat.test(serverEntry.description)) {\n        continue;\n      }\n\n      const [, traceId, spanId] = serverEntry.description.split('-');\n      if (traceId != null && spanId != null) {\n        return { traceId, spanId };\n      }\n\n      break;\n    }\n  }\n\n  return undefined;\n}\n\nexport function performanceObserverSupported(): boolean {\n  return 'PerformanceObserver' in window;\n}\n\nexport function entryUrlIsIgnored(ignoredUrls: Array<string | RegExp> = [], entryName: string): boolean {\n  return ignoredUrls.some((url) => url && entryName.match(url) != null);\n}\n\nexport function onDocumentReady(handleReady: () => void) {\n  if (document.readyState === 'complete') {\n    handleReady();\n  } else {\n    const readyStateCompleteHandler = () => {\n      if (document.readyState === 'complete') {\n        handleReady();\n        document.removeEventListener('readystatechange', readyStateCompleteHandler);\n      }\n    };\n\n    document.addEventListener('readystatechange', readyStateCompleteHandler);\n  }\n}\n\ntype PerformanceEntryAllowProperties = Record<string, Array<string | number> | string | number>;\n\nexport function includePerformanceEntry(\n  performanceEntryJSON: Record<string, any>,\n  allowProps: PerformanceEntryAllowProperties = {}\n): boolean {\n  for (const [allowPropKey, allowPropValue] of Object.entries(allowProps)) {\n    const perfEntryPropVal = performanceEntryJSON[allowPropKey];\n\n    if (perfEntryPropVal == null) {\n      return false;\n    }\n\n    if (isArray(allowPropValue)) {\n      return allowPropValue.includes(perfEntryPropVal);\n    }\n\n    return perfEntryPropVal === allowPropValue;\n  }\n\n  // empty object allows all\n  return true;\n}\n\nexport function createFaroResourceTiming(resourceEntryRaw: PerformanceResourceTiming): FaroResourceTiming {\n  const {\n    connectEnd,\n    connectStart,\n    decodedBodySize,\n    domainLookupEnd,\n    domainLookupStart,\n    duration,\n    encodedBodySize,\n    fetchStart,\n    initiatorType,\n    name,\n    nextHopProtocol,\n    redirectEnd,\n    redirectStart,\n    // @ts-expect-error the renderBlockingStatus property is not available in all browsers\n    renderBlockingStatus: rbs,\n    requestStart,\n    responseEnd,\n    responseStart,\n    // @ts-expect-error the renderBlockingStatus property is not available in all browsers\n    responseStatus,\n    secureConnectionStart,\n    transferSize,\n    workerStart,\n  } = resourceEntryRaw;\n\n  return {\n    name: name,\n    duration: toFaroPerformanceTimingString(duration),\n    tcpHandshakeTime: toFaroPerformanceTimingString(connectEnd - connectStart),\n    dnsLookupTime: toFaroPerformanceTimingString(domainLookupEnd - domainLookupStart),\n    tlsNegotiationTime: toFaroPerformanceTimingString(requestStart - secureConnectionStart),\n    responseStatus: toFaroPerformanceTimingString(responseStatus),\n    redirectTime: toFaroPerformanceTimingString(redirectEnd - redirectStart),\n    requestTime: toFaroPerformanceTimingString(responseStart - requestStart),\n    responseTime: toFaroPerformanceTimingString(responseEnd - responseStart),\n    fetchTime: toFaroPerformanceTimingString(responseEnd - fetchStart),\n    serviceWorkerTime: toFaroPerformanceTimingString(fetchStart - workerStart),\n    decodedBodySize: toFaroPerformanceTimingString(decodedBodySize),\n    encodedBodySize: toFaroPerformanceTimingString(encodedBodySize),\n    cacheHitStatus: getCacheType(),\n    renderBlockingStatus: toFaroPerformanceTimingString(rbs) as FaroResourceTiming['renderBlockingStatus'],\n    protocol: nextHopProtocol,\n    initiatorType: initiatorType,\n\n    // TODO: add in future iteration, ideally after nested objects are supported by the collector.\n    // serverTiming: resourceEntryRaw.serverTiming,\n  };\n\n  function getCacheType(): CacheType {\n    let cacheType: CacheType = 'fullLoad';\n    if (transferSize === 0) {\n      if (decodedBodySize > 0) {\n        cacheType = 'cache';\n      }\n    } else {\n      if (responseStatus != null) {\n        if (responseStatus === 304) {\n          cacheType = 'conditionalFetch';\n        }\n      } else if (encodedBodySize > 0 && transferSize < encodedBodySize) {\n        cacheType = 'conditionalFetch';\n      }\n    }\n    return cacheType;\n  }\n}\n\nexport function createFaroNavigationTiming(navigationEntryRaw: PerformanceNavigationTiming): FaroNavigationTiming {\n  const {\n    activationStart,\n    domComplete,\n    domContentLoadedEventEnd,\n    domContentLoadedEventStart,\n    domInteractive,\n    fetchStart,\n    loadEventEnd,\n    loadEventStart,\n    responseStart,\n    type,\n  } = navigationEntryRaw;\n\n  const parserStart = getDocumentParsingTime();\n\n  return {\n    visibilityState: document.visibilityState,\n    pageLoadTime: toFaroPerformanceTimingString(domComplete - fetchStart),\n    documentParsingTime: toFaroPerformanceTimingString(parserStart ? domInteractive - parserStart : null),\n    domProcessingTime: toFaroPerformanceTimingString(domComplete - domInteractive),\n    domContentLoadHandlerTime: toFaroPerformanceTimingString(domContentLoadedEventEnd - domContentLoadedEventStart),\n    onLoadTime: toFaroPerformanceTimingString(loadEventEnd - loadEventStart),\n\n    // For more accuracy on prerendered pages page we calculate relative top the activationStart instead of the start of the navigation.\n    // clamp to 0 if activationStart occurs after first byte is received.\n    ttfb: toFaroPerformanceTimingString(Math.max(responseStart - (activationStart ?? 0), 0)),\n\n    type: type,\n\n    ...createFaroResourceTiming(navigationEntryRaw),\n  };\n}\n\nfunction getDocumentParsingTime(): number | null {\n  if (performance.timing?.domLoading != null) {\n    // the browser is about to start parsing the first received bytes of the HTML document.\n    // This property is deprecated but there isn't a really good alternative atm.\n    // For now we stick with domLoading and keep researching a better alternative.\n    return performance.timing.domLoading - performance.timeOrigin;\n  }\n\n  return null;\n}\n\nfunction toFaroPerformanceTimingString(v: unknown): string {\n  if (v == null) {\n    return 'unknown';\n  }\n\n  if (typeof v === 'number') {\n    return Math.round(v).toString();\n  }\n\n  return v.toString();\n}\n"]}