import { faro } from '@grafana/faro-core';
import { throttle } from '../../../utils';
import { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';
import { isSampled } from './sampling';
import { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';
import { addSessionMetadataToNextSession, createUserSessionObject, getUserSessionUpdater } from './sessionManagerUtils';
export class PersistentSessionsManager {
    constructor() {
        this.updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);
        this.updateUserSession = getUserSessionUpdater({
            fetchUserSession: PersistentSessionsManager.fetchUserSession,
            storeUserSession: PersistentSessionsManager.storeUserSession,
        });
        this.init();
    }
    static removeUserSession() {
        removeItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);
    }
    static storeUserSession(session) {
        setItem(STORAGE_KEY, JSON.stringify(session), PersistentSessionsManager.storageTypeLocal);
    }
    static fetchUserSession() {
        const storedSession = getItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);
        if (storedSession) {
            return JSON.parse(storedSession);
        }
        return null;
    }
    init() {
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                this.updateSession();
            }
        });
        // Users can call the setSession() method, so we need to sync this with the local storage session
        faro.metas.addListener(function syncSessionIfChangedExternally(meta) {
            const session = meta.session;
            const sessionFromLocalStorage = PersistentSessionsManager.fetchUserSession();
            if (session && session.id !== (sessionFromLocalStorage === null || sessionFromLocalStorage === void 0 ? void 0 : sessionFromLocalStorage.sessionId)) {
                const userSession = addSessionMetadataToNextSession(createUserSessionObject({ sessionId: session.id, isSampled: isSampled() }), sessionFromLocalStorage);
                PersistentSessionsManager.storeUserSession(userSession);
                faro.api.setSession(userSession.sessionMeta);
            }
        });
    }
}
PersistentSessionsManager.storageTypeLocal = webStorageType.local;
//# sourceMappingURL=PersistentSessionsManager.js.map