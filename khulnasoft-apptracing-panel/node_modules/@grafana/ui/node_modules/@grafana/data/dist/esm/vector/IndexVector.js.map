{"version":3,"file":"IndexVector.js","sources":["../../../src/vector/IndexVector.ts"],"sourcesContent":["import { Field, FieldType } from '../types';\n\n/**\n * IndexVector is a simple vector implementation that returns the index value\n * for each element in the vector.  It is functionally equivolant a vector backed\n * by an array with values: `[0,1,2,...,length-1]`\n *\n * @deprecated use a simple Arrays.  NOTE: not used in grafana core\n */\nexport class IndexVector extends Array<number> {\n  constructor(len: number) {\n    super();\n    const arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n\n  /**\n   * Returns a field representing the range [0 ... length-1]\n   *\n   * @deprecated\n   */\n  static newField(len: number): Field<number> {\n    return {\n      name: '',\n      values: new IndexVector(len),\n      type: FieldType.number,\n      config: {\n        min: 0,\n        max: len - 1,\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AASO,MAAM,oBAAoB,KAAc,CAAA;AAAA,EAC7C,YAAY,GAAa,EAAA;AACvB,IAAM,KAAA,EAAA,CAAA;AACN,IAAM,MAAA,GAAA,GAAM,IAAI,KAAA,CAAM,GAAG,CAAA,CAAA;AACzB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC5B,MAAA,GAAA,CAAI,CAAC,CAAI,GAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS,GAA4B,EAAA;AAC1C,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,EAAA;AAAA,MACN,MAAA,EAAQ,IAAI,WAAA,CAAY,GAAG,CAAA;AAAA,MAC3B,MAAM,SAAU,CAAA,MAAA;AAAA,MAChB,MAAQ,EAAA;AAAA,QACN,GAAK,EAAA,CAAA;AAAA,QACL,KAAK,GAAM,GAAA,CAAA;AAAA,OACb;AAAA,KACF,CAAA;AAAA,GACF;AACF;;;;"}