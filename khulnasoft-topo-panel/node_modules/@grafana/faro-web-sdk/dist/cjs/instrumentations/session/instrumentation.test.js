"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var faro_core_1 = require("@grafana/faro-core");
var testUtils_1 = require("@grafana/faro-core/src/testUtils");
var session_1 = require("../../session");
var instrumentation_1 = require("./instrumentation");
describe('SessionInstrumentation', function () {
    it('will send session start event on initialize', function () {
        var _a, _b;
        var transport = new testUtils_1.MockTransport();
        var session = (0, session_1.createSession)({ foo: 'bar' });
        var config = (0, testUtils_1.mockConfig)({
            transports: [transport],
            instrumentations: [new instrumentation_1.SessionInstrumentation()],
            session: session,
        });
        (0, faro_core_1.initializeFaro)(config);
        expect(transport.items).toHaveLength(1);
        var event = transport.items[0];
        expect(event.payload.name).toEqual(faro_core_1.Conventions.EventNames.SESSION_START);
        expect((_a = event.meta.session) === null || _a === void 0 ? void 0 : _a.attributes).toEqual({ foo: 'bar' });
        expect((_b = event.meta.session) === null || _b === void 0 ? void 0 : _b.id).toEqual(session.id);
    });
    it('will send session new start event if setSession is called.', function () {
        var _a, _b;
        var transport = new testUtils_1.MockTransport();
        var session = (0, session_1.createSession)({ foo: 'bar' });
        var config = (0, testUtils_1.mockConfig)({
            transports: [transport],
            instrumentations: [new instrumentation_1.SessionInstrumentation()],
            session: session,
        });
        var faro = (0, faro_core_1.initializeFaro)(config);
        expect(transport.items).toHaveLength(1);
        var event = transport.items[0];
        expect(event.payload.name).toEqual(faro_core_1.Conventions.EventNames.SESSION_START);
        expect((_a = event.meta.session) === null || _a === void 0 ? void 0 : _a.id).toEqual(session.id);
        faro.metas.add({ user: { id: 'foo' } });
        expect(transport.items).toHaveLength(1);
        var newSession = (0, session_1.createSession)();
        faro.api.setSession(newSession);
        expect(transport.items).toHaveLength(2);
        event = transport.items[0];
        expect((_b = event.meta.session) === null || _b === void 0 ? void 0 : _b.id).toEqual(session.id);
    });
});
//# sourceMappingURL=instrumentation.test.js.map