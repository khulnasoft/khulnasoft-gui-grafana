"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var faro_core_1 = require("@grafana/faro-core");
var transport_1 = require("./transport");
var fetch = jest.fn(function () { return Promise.resolve({ status: 202 }); });
global.fetch = fetch;
var item = {
    type: faro_core_1.TransportItemType.LOG,
    payload: {
        context: {},
        level: faro_core_1.LogLevel.INFO,
        message: 'hi',
        timestamp: new Date().toISOString(),
    },
    meta: {},
};
describe('FetchTransport', function () {
    beforeEach(function () {
        fetch.mockClear();
    });
    it('will send event over fetch', function () {
        var transport = new transport_1.FetchTransport({
            url: 'http://example.com/collect',
        });
        transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        expect(fetch).toHaveBeenCalledWith('http://example.com/collect', {
            body: JSON.stringify((0, faro_core_1.getTransportBody)(item)),
            headers: {
                'Content-Type': 'application/json',
            },
            keepalive: true,
            method: 'POST',
        });
    });
    it('will not sending events if buffer size is exhausted', function () {
        var transport = new transport_1.FetchTransport({
            url: 'http://example.com/collect',
            bufferSize: 3,
        });
        for (var idx = 0; idx < 6; idx++) {
            transport.send(item);
        }
        expect(fetch).toHaveBeenCalledTimes(3);
    });
    it('will back off on 429 for default interval if no retry-after header present', function () { return __awaiter(void 0, void 0, void 0, function () {
        var now, transport;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    now = Date.now();
                    transport = new transport_1.FetchTransport({
                        url: 'http://example.com/collect',
                        defaultRateLimitBackoffMs: 1000,
                        getNow: function () { return now; },
                    });
                    fetch.mockImplementationOnce(function () {
                        return Promise.resolve({
                            status: 429,
                            headers: {
                                get: function () { return ''; },
                            },
                        });
                    });
                    return [4 /*yield*/, transport.send(item)];
                case 1:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    return [4 /*yield*/, transport.send(item)];
                case 2:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    now += 1001;
                    return [4 /*yield*/, transport.send(item)];
                case 3:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(2);
                    return [2 /*return*/];
            }
        });
    }); });
    it('will back off on 429 for default interval if retry-after header present, with delay', function () { return __awaiter(void 0, void 0, void 0, function () {
        var now, transport;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    now = Date.now();
                    transport = new transport_1.FetchTransport({
                        url: 'http://example.com/collect',
                        defaultRateLimitBackoffMs: 1000,
                        getNow: function () { return now; },
                    });
                    fetch.mockImplementationOnce(function () {
                        return Promise.resolve({
                            status: 429,
                            headers: {
                                get: function () { return '2'; },
                            },
                        });
                    });
                    return [4 /*yield*/, transport.send(item)];
                case 1:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    now += 1001;
                    return [4 /*yield*/, transport.send(item)];
                case 2:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    now += 1001;
                    return [4 /*yield*/, transport.send(item)];
                case 3:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(2);
                    return [2 /*return*/];
            }
        });
    }); });
    it('will back off on 429 for default interval if retry-after header present, with delay', function () { return __awaiter(void 0, void 0, void 0, function () {
        var now, transport;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    now = Date.now();
                    transport = new transport_1.FetchTransport({
                        url: 'http://example.com/collect',
                        defaultRateLimitBackoffMs: 1000,
                        getNow: function () { return now; },
                    });
                    fetch.mockImplementationOnce(function () {
                        return Promise.resolve({
                            status: 429,
                            headers: {
                                get: function () { return new Date(now + 3000).toISOString(); },
                            },
                        });
                    });
                    return [4 /*yield*/, transport.send(item)];
                case 1:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    now += 1001;
                    return [4 /*yield*/, transport.send(item)];
                case 2:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(1);
                    now += 2001;
                    return [4 /*yield*/, transport.send(item)];
                case 3:
                    _a.sent();
                    expect(fetch).toHaveBeenCalledTimes(2);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=transport.test.js.map