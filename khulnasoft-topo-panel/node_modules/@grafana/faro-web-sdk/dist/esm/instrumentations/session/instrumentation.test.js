import { Conventions, initializeFaro } from '@grafana/faro-core';
import { mockConfig, MockTransport } from '@grafana/faro-core/src/testUtils';
import { createSession } from '../../session';
import { SessionInstrumentation } from './instrumentation';
describe('SessionInstrumentation', () => {
    it('will send session start event on initialize', () => {
        var _a, _b;
        const transport = new MockTransport();
        const session = createSession({ foo: 'bar' });
        const config = mockConfig({
            transports: [transport],
            instrumentations: [new SessionInstrumentation()],
            session,
        });
        initializeFaro(config);
        expect(transport.items).toHaveLength(1);
        const event = transport.items[0];
        expect(event.payload.name).toEqual(Conventions.EventNames.SESSION_START);
        expect((_a = event.meta.session) === null || _a === void 0 ? void 0 : _a.attributes).toEqual({ foo: 'bar' });
        expect((_b = event.meta.session) === null || _b === void 0 ? void 0 : _b.id).toEqual(session.id);
    });
    it('will send session new start event if setSession is called.', () => {
        var _a, _b;
        const transport = new MockTransport();
        const session = createSession({ foo: 'bar' });
        const config = mockConfig({
            transports: [transport],
            instrumentations: [new SessionInstrumentation()],
            session,
        });
        const faro = initializeFaro(config);
        expect(transport.items).toHaveLength(1);
        let event = transport.items[0];
        expect(event.payload.name).toEqual(Conventions.EventNames.SESSION_START);
        expect((_a = event.meta.session) === null || _a === void 0 ? void 0 : _a.id).toEqual(session.id);
        faro.metas.add({ user: { id: 'foo' } });
        expect(transport.items).toHaveLength(1);
        const newSession = createSession();
        faro.api.setSession(newSession);
        expect(transport.items).toHaveLength(2);
        event = transport.items[0];
        expect((_b = event.meta.session) === null || _b === void 0 ? void 0 : _b.id).toEqual(session.id);
    });
});
//# sourceMappingURL=instrumentation.test.js.map