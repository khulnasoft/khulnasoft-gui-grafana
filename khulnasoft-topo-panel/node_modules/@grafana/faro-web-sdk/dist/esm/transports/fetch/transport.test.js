var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getTransportBody, LogLevel, TransportItemType } from '@grafana/faro-core';
import { FetchTransport } from './transport';
const fetch = jest.fn(() => Promise.resolve({ status: 202 }));
global.fetch = fetch;
const item = {
    type: TransportItemType.LOG,
    payload: {
        context: {},
        level: LogLevel.INFO,
        message: 'hi',
        timestamp: new Date().toISOString(),
    },
    meta: {},
};
describe('FetchTransport', () => {
    beforeEach(() => {
        fetch.mockClear();
    });
    it('will send event over fetch', () => {
        const transport = new FetchTransport({
            url: 'http://example.com/collect',
        });
        transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        expect(fetch).toHaveBeenCalledWith('http://example.com/collect', {
            body: JSON.stringify(getTransportBody(item)),
            headers: {
                'Content-Type': 'application/json',
            },
            keepalive: true,
            method: 'POST',
        });
    });
    it('will not sending events if buffer size is exhausted', () => {
        const transport = new FetchTransport({
            url: 'http://example.com/collect',
            bufferSize: 3,
        });
        for (let idx = 0; idx < 6; idx++) {
            transport.send(item);
        }
        expect(fetch).toHaveBeenCalledTimes(3);
    });
    it('will back off on 429 for default interval if no retry-after header present', () => __awaiter(void 0, void 0, void 0, function* () {
        let now = Date.now();
        const transport = new FetchTransport({
            url: 'http://example.com/collect',
            defaultRateLimitBackoffMs: 1000,
            getNow: () => now,
        });
        fetch.mockImplementationOnce(() => Promise.resolve({
            status: 429,
            headers: {
                get: () => '',
            },
        }));
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        now += 1001;
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(2);
    }));
    it('will back off on 429 for default interval if retry-after header present, with delay', () => __awaiter(void 0, void 0, void 0, function* () {
        let now = Date.now();
        const transport = new FetchTransport({
            url: 'http://example.com/collect',
            defaultRateLimitBackoffMs: 1000,
            getNow: () => now,
        });
        fetch.mockImplementationOnce(() => Promise.resolve({
            status: 429,
            headers: {
                get: () => '2',
            },
        }));
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        now += 1001;
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        now += 1001;
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(2);
    }));
    it('will back off on 429 for default interval if retry-after header present, with delay', () => __awaiter(void 0, void 0, void 0, function* () {
        let now = Date.now();
        const transport = new FetchTransport({
            url: 'http://example.com/collect',
            defaultRateLimitBackoffMs: 1000,
            getNow: () => now,
        });
        fetch.mockImplementationOnce(() => Promise.resolve({
            status: 429,
            headers: {
                get: () => new Date(now + 3000).toISOString(),
            },
        }));
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        now += 1001;
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(1);
        now += 2001;
        yield transport.send(item);
        expect(fetch).toHaveBeenCalledTimes(2);
    }));
});
//# sourceMappingURL=transport.test.js.map