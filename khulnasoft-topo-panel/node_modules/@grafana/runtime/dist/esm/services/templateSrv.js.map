{"version":3,"file":"templateSrv.js","sources":["../../../src/services/templateSrv.ts"],"sourcesContent":["import { ScopedVars, TimeRange, TypedVariableModel } from '@grafana/data';\n\n/**\n * Via the TemplateSrv consumers get access to all the available template variables\n * that can be used within the current active dashboard.\n *\n * For a more in-depth description visit: https://grafana.com/docs/grafana/latest/reference/templating\n * @public\n */\nexport interface TemplateSrv {\n  /**\n   * List the dashboard variables\n   */\n  getVariables(): TypedVariableModel[];\n\n  /**\n   * Replace the values within the target string.  See also {@link InterpolateFunction}\n   */\n  replace(target?: string, scopedVars?: ScopedVars, format?: string | Function): string;\n\n  /**\n   * Checks if a target contains template variables.\n   */\n  containsTemplate(target?: string): boolean;\n\n  /**\n   * Update the current time range to be used when interpolating __from / __to variables.\n   */\n  updateTimeRange(timeRange: TimeRange): void;\n}\n\nlet singletonInstance: TemplateSrv;\n\n/**\n * Used during startup by Grafana to set the TemplateSrv so it is available\n * via the {@link getTemplateSrv} to the rest of the application.\n *\n * @internal\n */\nexport const setTemplateSrv = (instance: TemplateSrv) => {\n  singletonInstance = instance;\n};\n\n/**\n * Used to retrieve the {@link TemplateSrv} that can be used to fetch available\n * template variables.\n *\n * @public\n */\nexport const getTemplateSrv = (): TemplateSrv => singletonInstance;\n"],"names":[],"mappings":"AA+BA,IAAI,iBAAA,CAAA;AAQS,MAAA,cAAA,GAAiB,CAAC,QAA0B,KAAA;AACvD,EAAoB,iBAAA,GAAA,QAAA,CAAA;AACtB,EAAA;AAQO,MAAM,iBAAiB,MAAmB;;;;"}