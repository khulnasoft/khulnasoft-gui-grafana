import { set } from 'lodash';
import '../datetime/moment_wrapper.js';
import '../datetime/rangeutil.js';
import '../datetime/timezones.js';
import '../datetime/formats.js';
import 'moment-timezone';
import 'date-fns/add';
import 'date-fns/intervalToDuration';
import { GrafanaPlugin } from '../types/plugin.js';
import '../types/datasource.js';
import '../types/legacyEvents.js';
import '../transformations/matchers.js';
import '../transformations/transformers/calculateField.js';
import '../transformations/transformers/concat.js';
import '../transformations/transformers/convertFieldType.js';
import '../transformations/transformers/ensureColumns.js';
import '../transformations/transformers/filter.js';
import '../transformations/transformers/filterByName.js';
import '../transformations/transformers/filterByRefId.js';
import '../transformations/transformers/filterByValue.js';
import '../transformations/transformers/groupBy.js';
import '../transformations/transformers/groupingToMatrix.js';
import '../transformations/transformers/histogram.js';
import '../transformations/transformers/joinByField.js';
import '../transformations/transformers/labelsToFields.js';
import '../transformations/transformers/limit.js';
import '../transformations/transformers/merge.js';
import '../transformations/transformers/noop.js';
import '../transformations/transformers/order.js';
import '../transformations/transformers/organize.js';
import '../transformations/transformers/reduce.js';
import '../transformations/transformers/rename.js';
import '../transformations/transformers/renameByRegex.js';
import '../transformations/transformers/seriesToRows.js';
import '../transformations/transformers/sortBy.js';
import '../transformations/fieldReducer.js';
import 'rxjs';
import 'rxjs/operators';
import '../transformations/standardTransformersRegistry.js';
import '../transformations/matchers/nameMatcher.js';
import 'fast_array_intersect';
import '../field/fieldColor.js';
import '../field/standardFieldConfigEditorRegistry.js';
import { FieldConfigOptionsRegistry } from '../field/FieldConfigOptionsRegistry.js';
import 'tinycolor2';
import '@grafana/schema';
import { deprecationWarning } from '../utils/deprecationWarning.js';
import 'papaparse';
import '../utils/binaryOperators.js';
import { PanelOptionsEditorBuilder } from '../utils/OptionsUIBuilders.js';
import 'marked';
import '../text/sanitize.js';
import { createFieldConfigRegistry } from './registryFactories.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
class PanelPlugin extends GrafanaPlugin {
  constructor(panel) {
    super();
    this._fieldConfigDefaults = {
      defaults: {},
      overrides: []
    };
    this._initConfigRegistry = () => {
      return new FieldConfigOptionsRegistry();
    };
    this.dataSupport = {
      annotations: false,
      alertStates: false
    };
    this.panel = panel;
  }
  get defaults() {
    let result = this._defaults || {};
    if (!this._defaults && this.optionsSupplier) {
      const builder = new PanelOptionsEditorBuilder();
      this.optionsSupplier(builder, { data: [] });
      for (const item of builder.getItems()) {
        if (item.defaultValue != null) {
          set(result, item.path, item.defaultValue);
        }
      }
    }
    return result;
  }
  get fieldConfigDefaults() {
    const configDefaults = this._fieldConfigDefaults.defaults;
    configDefaults.custom = {};
    for (const option of this.fieldConfigRegistry.list()) {
      if (option.defaultValue === void 0) {
        continue;
      }
      set(configDefaults, option.id, option.defaultValue);
    }
    return {
      defaults: __spreadValues({}, configDefaults),
      overrides: this._fieldConfigDefaults.overrides
    };
  }
  setDefaults(defaults) {
    deprecationWarning("PanelPlugin", "setDefaults", "setPanelOptions");
    this._defaults = defaults;
    return this;
  }
  get fieldConfigRegistry() {
    if (!this._fieldConfigRegistry) {
      this._fieldConfigRegistry = this._initConfigRegistry();
    }
    return this._fieldConfigRegistry;
  }
  setEditor(editor) {
    deprecationWarning("PanelPlugin", "setEditor", "setPanelOptions");
    this.editor = editor;
    return this;
  }
  setNoPadding() {
    this.noPadding = true;
    return this;
  }
  setMigrationHandler(handler) {
    this.onPanelMigration = handler;
    return this;
  }
  setPanelChangeHandler(handler) {
    this.onPanelTypeChanged = handler;
    return this;
  }
  setPanelOptions(builder) {
    this.optionsSupplier = builder;
    return this;
  }
  getPanelOptionsSupplier() {
    var _a;
    return (_a = this.optionsSupplier) != null ? _a : () => {
    };
  }
  setDataSupport(support) {
    this.dataSupport = __spreadValues(__spreadValues({}, this.dataSupport), support);
    return this;
  }
  useFieldConfig(config = {}) {
    this._initConfigRegistry = () => createFieldConfigRegistry(config, this.meta.name);
    return this;
  }
  setSuggestionsSupplier(supplier) {
    this.suggestionsSupplier = supplier;
    return this;
  }
  getSuggestionsSupplier() {
    return this.suggestionsSupplier;
  }
  hasPluginId(pluginId) {
    return this.meta.id === pluginId;
  }
}

export { PanelPlugin };
//# sourceMappingURL=PanelPlugin.js.map
