{"version":3,"file":"sanitize.js","sources":["../../../src/text/sanitize.ts"],"sourcesContent":["import { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\nimport * as xss from 'xss';\n\nconst XSSWL = Object.keys(xss.whiteList).reduce((acc, element) => {\n  acc[element] = xss.whiteList[element]?.concat(['class', 'style']);\n  return acc;\n}, {} as xss.IWhiteList);\n\nconst sanitizeXSS = new xss.FilterXSS({\n  whiteList: XSSWL,\n});\n\nconst sanitizeTextPanelWhitelist = new xss.FilterXSS({\n  whiteList: XSSWL,\n  css: {\n    whiteList: {\n      ...xss.getDefaultCSSWhiteList(),\n      'flex-direction': true,\n      'flex-wrap': true,\n      'flex-basis': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'flex-flow': true,\n      gap: true,\n      order: true,\n      'justify-content': true,\n      'justify-items': true,\n      'justify-self': true,\n      'align-items': true,\n      'align-content': true,\n      'align-self': true,\n    },\n  },\n});\n\n/**\n * Returns string safe from XSS attacks.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\nexport function sanitize(unsanitizedString: string): string {\n  try {\n    return sanitizeXSS.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return unsanitizedString;\n  }\n}\n\nexport function sanitizeTextPanelContent(unsanitizedString: string): string {\n  try {\n    return sanitizeTextPanelWhitelist.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return 'Text string could not be sanitized';\n  }\n}\n\nexport function sanitizeUrl(url: string): string {\n  return braintreeSanitizeUrl(url);\n}\n\nexport function hasAnsiCodes(input: string): boolean {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\n\nexport function escapeHtml(str: string): string {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n"],"names":["braintreeSanitizeUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,KAAA,GAAQ,OAAO,IAAK,CAAA,GAAA,CAAI,SAAS,CAAE,CAAA,MAAA,CAAO,CAAC,GAAA,EAAK,OAAY,KAAA;AAHlE,EAAA,IAAA,EAAA,CAAA;AAIE,EAAI,GAAA,CAAA,OAAA,CAAA,GAAA,CAAW,SAAI,SAAU,CAAA,OAAA,CAAA,KAAd,mBAAwB,MAAO,CAAA,CAAC,SAAS,OAAO,CAAA,CAAA,CAAA;AAC/D,EAAO,OAAA,GAAA,CAAA;AACT,CAAA,EAAG,EAAoB,CAAA,CAAA;AAEvB,MAAM,WAAA,GAAc,IAAI,GAAA,CAAI,SAAU,CAAA;AAAA,EACpC,SAAW,EAAA,KAAA;AACb,CAAC,CAAA,CAAA;AAED,MAAM,0BAAA,GAA6B,IAAI,GAAA,CAAI,SAAU,CAAA;AAAA,EACnD,SAAW,EAAA,KAAA;AAAA,EACX,GAAK,EAAA;AAAA,IACH,SAAW,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACN,GAAI,CAAA,sBAAA,EADE,CAAA,EAAA;AAAA,MAET,gBAAkB,EAAA,IAAA;AAAA,MAClB,WAAa,EAAA,IAAA;AAAA,MACb,YAAc,EAAA,IAAA;AAAA,MACd,WAAa,EAAA,IAAA;AAAA,MACb,aAAe,EAAA,IAAA;AAAA,MACf,WAAa,EAAA,IAAA;AAAA,MACb,GAAK,EAAA,IAAA;AAAA,MACL,KAAO,EAAA,IAAA;AAAA,MACP,iBAAmB,EAAA,IAAA;AAAA,MACnB,eAAiB,EAAA,IAAA;AAAA,MACjB,cAAgB,EAAA,IAAA;AAAA,MAChB,aAAe,EAAA,IAAA;AAAA,MACf,eAAiB,EAAA,IAAA;AAAA,MACjB,YAAc,EAAA,IAAA;AAAA,KAChB,CAAA;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AASM,SAAS,SAAS,iBAAmC,EAAA;AAC1D,EAAI,IAAA;AACF,IAAO,OAAA,WAAA,CAAY,QAAQ,iBAAiB,CAAA,CAAA;AAAA,WACrC,KAAP,EAAA;AACA,IAAQ,OAAA,CAAA,KAAA,CAAM,iCAAiC,iBAAiB,CAAA,CAAA;AAChE,IAAO,OAAA,iBAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEO,SAAS,yBAAyB,iBAAmC,EAAA;AAC1E,EAAI,IAAA;AACF,IAAO,OAAA,0BAAA,CAA2B,QAAQ,iBAAiB,CAAA,CAAA;AAAA,WACpD,KAAP,EAAA;AACA,IAAQ,OAAA,CAAA,KAAA,CAAM,iCAAiC,iBAAiB,CAAA,CAAA;AAChE,IAAO,OAAA,oCAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEO,SAAS,YAAY,GAAqB,EAAA;AAC/C,EAAA,OAAOA,cAAqB,GAAG,CAAA,CAAA;AACjC,CAAA;AAEO,SAAS,aAAa,KAAwB,EAAA;AACnD,EAAO,OAAA,kBAAA,CAAmB,KAAK,KAAK,CAAA,CAAA;AACtC,CAAA;AAEO,SAAS,WAAW,GAAqB,EAAA;AAC9C,EAAA,OAAO,OAAO,GAAG,CAAA,CAAE,OAAQ,CAAA,IAAA,EAAM,OAAO,CAAE,CAAA,OAAA,CAAQ,IAAM,EAAA,MAAM,EAAE,OAAQ,CAAA,IAAA,EAAM,MAAM,CAAE,CAAA,OAAA,CAAQ,MAAM,QAAQ,CAAA,CAAA;AAC9G;;;;"}