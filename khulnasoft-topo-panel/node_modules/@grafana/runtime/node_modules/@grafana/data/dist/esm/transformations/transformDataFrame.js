import { of } from 'rxjs';
import { mergeMap, map } from 'rxjs/operators';
import { standardTransformersRegistry } from './standardTransformersRegistry.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const getOperator = (config) => (source) => {
  var _a;
  const info = standardTransformersRegistry.get(config.id);
  if (!info) {
    return source;
  }
  const defaultOptions = (_a = info.transformation.defaultOptions) != null ? _a : {};
  const options = __spreadValues(__spreadValues({}, defaultOptions), config.options);
  return source.pipe(
    mergeMap(
      (before) => of(before).pipe(info.transformation.operator(options, config.replace), postProcessTransform(before, info))
    )
  );
};
const postProcessTransform = (before, info) => (source) => source.pipe(
  map((after) => {
    if (after === before) {
      return after;
    }
    for (const series of after) {
      if (!series.meta) {
        series.meta = {};
      }
      if (!series.meta.transformations) {
        series.meta.transformations = [info.id];
      } else {
        series.meta.transformations = [...series.meta.transformations, info.id];
      }
    }
    return after;
  })
);
function transformDataFrame(options, data) {
  const stream = of(data);
  if (!options.length) {
    return stream;
  }
  const operators = [];
  for (let index = 0; index < options.length; index++) {
    const config = options[index];
    if (config.disabled) {
      continue;
    }
    operators.push(getOperator(config));
  }
  return stream.pipe.apply(stream, operators);
}

export { transformDataFrame };
//# sourceMappingURL=transformDataFrame.js.map
