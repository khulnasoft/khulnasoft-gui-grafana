{"version":3,"file":"transformDataFrame.js","sources":["../../../src/transformations/transformDataFrame.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { DataFrame, DataTransformerConfig } from '../types';\n\nimport { standardTransformersRegistry, TransformerRegistryItem } from './standardTransformersRegistry';\n\nconst getOperator =\n  (config: DataTransformerConfig): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) => {\n    const info = standardTransformersRegistry.get(config.id);\n\n    if (!info) {\n      return source;\n    }\n\n    const defaultOptions = info.transformation.defaultOptions ?? {};\n    const options = { ...defaultOptions, ...config.options };\n\n    return source.pipe(\n      mergeMap((before) =>\n        of(before).pipe(info.transformation.operator(options, config.replace), postProcessTransform(before, info))\n      )\n    );\n  };\n\nconst postProcessTransform =\n  (before: DataFrame[], info: TransformerRegistryItem<any>): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) =>\n    source.pipe(\n      map((after) => {\n        if (after === before) {\n          return after;\n        }\n\n        // Add a key to the metadata if the data changed\n        for (const series of after) {\n          if (!series.meta) {\n            series.meta = {};\n          }\n\n          if (!series.meta.transformations) {\n            series.meta.transformations = [info.id];\n          } else {\n            series.meta.transformations = [...series.meta.transformations, info.id];\n          }\n        }\n\n        return after;\n      })\n    );\n\n/**\n * Apply configured transformations to the input data\n */\nexport function transformDataFrame(options: DataTransformerConfig[], data: DataFrame[]): Observable<DataFrame[]> {\n  const stream = of<DataFrame[]>(data);\n\n  if (!options.length) {\n    return stream;\n  }\n\n  const operators: Array<MonoTypeOperatorFunction<DataFrame[]>> = [];\n\n  for (let index = 0; index < options.length; index++) {\n    const config = options[index];\n\n    if (config.disabled) {\n      continue;\n    }\n\n    operators.push(getOperator(config));\n  }\n\n  // @ts-ignore TypeScript has a hard time understanding this construct\n  return stream.pipe.apply(stream, operators);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAOA,MAAM,WACJ,GAAA,CAAC,MACD,KAAA,CAAC,MAAW,KAAA;AATd,EAAA,IAAA,EAAA,CAAA;AAUI,EAAA,MAAM,IAAO,GAAA,4BAAA,CAA6B,GAAI,CAAA,MAAA,CAAO,EAAE,CAAA,CAAA;AAEvD,EAAA,IAAI,CAAC,IAAM,EAAA;AACT,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,cAAiB,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,cAAe,CAAA,cAAA,KAApB,YAAsC,EAAC,CAAA;AAC9D,EAAM,MAAA,OAAA,GAAU,cAAK,CAAA,cAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAAmB,MAAO,CAAA,OAAA,CAAA,CAAA;AAE/C,EAAA,OAAO,MAAO,CAAA,IAAA;AAAA,IACZ,QAAA;AAAA,MAAS,CAAC,MACR,KAAA,EAAA,CAAG,MAAM,CAAA,CAAE,KAAK,IAAK,CAAA,cAAA,CAAe,QAAS,CAAA,OAAA,EAAS,OAAO,OAAO,CAAA,EAAG,oBAAqB,CAAA,MAAA,EAAQ,IAAI,CAAC,CAAA;AAAA,KAC3G;AAAA,GACF,CAAA;AACF,CAAA,CAAA;AAEF,MAAM,uBACJ,CAAC,MAAA,EAAqB,IACtB,KAAA,CAAC,WACC,MAAO,CAAA,IAAA;AAAA,EACL,GAAA,CAAI,CAAC,KAAU,KAAA;AACb,IAAA,IAAI,UAAU,MAAQ,EAAA;AACpB,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAGA,IAAA,KAAA,MAAW,UAAU,KAAO,EAAA;AAC1B,MAAI,IAAA,CAAC,OAAO,IAAM,EAAA;AAChB,QAAA,MAAA,CAAO,OAAO,EAAC,CAAA;AAAA,OACjB;AAEA,MAAI,IAAA,CAAC,MAAO,CAAA,IAAA,CAAK,eAAiB,EAAA;AAChC,QAAA,MAAA,CAAO,IAAK,CAAA,eAAA,GAAkB,CAAC,IAAA,CAAK,EAAE,CAAA,CAAA;AAAA,OACjC,MAAA;AACL,QAAO,MAAA,CAAA,IAAA,CAAK,kBAAkB,CAAC,GAAG,OAAO,IAAK,CAAA,eAAA,EAAiB,KAAK,EAAE,CAAA,CAAA;AAAA,OACxE;AAAA,KACF;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACR,CAAA;AACH,CAAA,CAAA;AAKY,SAAA,kBAAA,CAAmB,SAAkC,IAA4C,EAAA;AAC/G,EAAM,MAAA,MAAA,GAAS,GAAgB,IAAI,CAAA,CAAA;AAEnC,EAAI,IAAA,CAAC,QAAQ,MAAQ,EAAA;AACnB,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,YAA0D,EAAC,CAAA;AAEjE,EAAA,KAAA,IAAS,KAAQ,GAAA,CAAA,EAAG,KAAQ,GAAA,OAAA,CAAQ,QAAQ,KAAS,EAAA,EAAA;AACnD,IAAA,MAAM,SAAS,OAAQ,CAAA,KAAA,CAAA,CAAA;AAEvB,IAAA,IAAI,OAAO,QAAU,EAAA;AACnB,MAAA,SAAA;AAAA,KACF;AAEA,IAAU,SAAA,CAAA,IAAA,CAAK,WAAY,CAAA,MAAM,CAAC,CAAA,CAAA;AAAA,GACpC;AAGA,EAAA,OAAO,MAAO,CAAA,IAAA,CAAK,KAAM,CAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;AAC5C;;;;"}