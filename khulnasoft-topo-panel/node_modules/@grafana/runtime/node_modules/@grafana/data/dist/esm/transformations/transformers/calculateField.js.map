{"version":3,"file":"calculateField.js","sources":["../../../../src/transformations/transformers/calculateField.ts"],"sourcesContent":["import { defaults } from 'lodash';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { getFieldDisplayName } from '../../field';\nimport { DataFrame, DataTransformerInfo, Field, FieldType, NullValueMode, Vector } from '../../types';\nimport { BinaryOperationID, binaryOperators } from '../../utils/binaryOperators';\nimport { ArrayVector, BinaryOperationVector, ConstantVector } from '../../vector';\nimport { AsNumberVector } from '../../vector/AsNumberVector';\nimport { RowVector } from '../../vector/RowVector';\nimport { doStandardCalcs, fieldReducers, ReducerID } from '../fieldReducer';\nimport { getFieldMatcher } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { ensureColumnsTransformer } from './ensureColumns';\nimport { DataTransformerID } from './ids';\nimport { noopTransformer } from './noop';\n\nexport enum CalculateFieldMode {\n  ReduceRow = 'reduceRow',\n  BinaryOperation = 'binary',\n}\n\nexport interface ReduceOptions {\n  include?: string[]; // Assume all fields\n  reducer: ReducerID;\n  nullValueMode?: NullValueMode;\n}\n\nexport interface BinaryOptions {\n  left: string;\n  operator: BinaryOperationID;\n  right: string;\n}\n\nconst defaultReduceOptions: ReduceOptions = {\n  reducer: ReducerID.sum,\n};\n\nconst defaultBinaryOptions: BinaryOptions = {\n  left: '',\n  operator: BinaryOperationID.Add,\n  right: '',\n};\n\nexport interface CalculateFieldTransformerOptions {\n  // True/False or auto\n  timeSeries?: boolean;\n  mode: CalculateFieldMode; // defaults to 'reduce'\n\n  // Only one should be filled\n  reduce?: ReduceOptions;\n  binary?: BinaryOptions;\n\n  // Remove other fields\n  replaceFields?: boolean;\n\n  // Output field properties\n  alias?: string; // The output field name\n  // TODO: config?: FieldConfig; or maybe field overrides? since the UI exists\n}\n\ntype ValuesCreator = (data: DataFrame) => Vector;\n\nexport const calculateFieldTransformer: DataTransformerInfo<CalculateFieldTransformerOptions> = {\n  id: DataTransformerID.calculateField,\n  name: 'Add field from calculation',\n  description: 'Use the row values to calculate a new field',\n  defaultOptions: {\n    mode: CalculateFieldMode.ReduceRow,\n    reduce: {\n      reducer: ReducerID.sum,\n    },\n  },\n  operator: (options, replace) => (outerSource) => {\n    const operator =\n      options && options.timeSeries !== false ? ensureColumnsTransformer.operator(null) : noopTransformer.operator({});\n\n    options.alias = replace ? replace(options.alias) : options.alias;\n\n    return outerSource.pipe(\n      operator,\n      map((data) => {\n        const mode = options.mode ?? CalculateFieldMode.ReduceRow;\n        let creator: ValuesCreator | undefined = undefined;\n\n        if (mode === CalculateFieldMode.ReduceRow) {\n          creator = getReduceRowCreator(defaults(options.reduce, defaultReduceOptions), data);\n        } else if (mode === CalculateFieldMode.BinaryOperation) {\n          const binaryOptions = replace\n            ? {\n                ...options.binary,\n                left: replace ? replace(options.binary?.left) : options.binary?.left,\n                right: replace ? replace(options.binary?.right) : options.binary?.right,\n              }\n            : options.binary;\n          creator = getBinaryCreator(defaults(binaryOptions, defaultBinaryOptions), data);\n        }\n\n        // Nothing configured\n        if (!creator) {\n          return data;\n        }\n\n        return data.map((frame) => {\n          // delegate field creation to the specific function\n          const values = creator!(frame);\n          if (!values) {\n            return frame;\n          }\n\n          const field = {\n            name: getNameFromOptions(options),\n            type: FieldType.number,\n            config: {},\n            values,\n          };\n          let fields: Field[] = [];\n\n          // Replace all fields with the single field\n          if (options.replaceFields) {\n            const { timeField } = getTimeField(frame);\n            if (timeField && options.timeSeries !== false) {\n              fields = [timeField, field];\n            } else {\n              fields = [field];\n            }\n          } else {\n            fields = [...frame.fields, field];\n          }\n          return {\n            ...frame,\n            fields,\n          };\n        });\n      })\n    );\n  },\n};\n\nfunction getReduceRowCreator(options: ReduceOptions, allFrames: DataFrame[]): ValuesCreator {\n  let matcher = getFieldMatcher({\n    id: FieldMatcherID.numeric,\n  });\n\n  if (options.include && options.include.length) {\n    matcher = getFieldMatcher({\n      id: FieldMatcherID.byNames,\n      options: {\n        names: options.include,\n      },\n    });\n  }\n\n  const info = fieldReducers.get(options.reducer);\n\n  if (!info) {\n    throw new Error(`Unknown reducer: ${options.reducer}`);\n  }\n\n  const reducer = info.reduce ?? doStandardCalcs;\n  const ignoreNulls = options.nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = options.nullValueMode === NullValueMode.AsZero;\n\n  return (frame: DataFrame) => {\n    // Find the columns that should be examined\n    const columns: Vector[] = [];\n    for (const field of frame.fields) {\n      if (matcher(field, frame, allFrames)) {\n        columns.push(field.values);\n      }\n    }\n\n    // Prepare a \"fake\" field for the row\n    const iter = new RowVector(columns);\n    const row: Field = {\n      name: 'temp',\n      values: iter,\n      type: FieldType.number,\n      config: {},\n    };\n    const vals: number[] = [];\n\n    for (let i = 0; i < frame.length; i++) {\n      iter.rowIndex = i;\n      const val = reducer(row, ignoreNulls, nullAsZero)[options.reducer];\n      vals.push(val);\n    }\n\n    return new ArrayVector(vals);\n  };\n}\n\nfunction findFieldValuesWithNameOrConstant(frame: DataFrame, name: string, allFrames: DataFrame[]): Vector | undefined {\n  if (!name) {\n    return undefined;\n  }\n\n  for (const f of frame.fields) {\n    if (name === getFieldDisplayName(f, frame, allFrames)) {\n      if (f.type === FieldType.boolean) {\n        return new AsNumberVector(f.values);\n      }\n      return f.values;\n    }\n  }\n\n  const v = parseFloat(name);\n  if (!isNaN(v)) {\n    return new ConstantVector(v, frame.length);\n  }\n\n  return undefined;\n}\n\nfunction getBinaryCreator(options: BinaryOptions, allFrames: DataFrame[]): ValuesCreator {\n  const operator = binaryOperators.getIfExists(options.operator);\n\n  return (frame: DataFrame) => {\n    const left = findFieldValuesWithNameOrConstant(frame, options.left, allFrames);\n    const right = findFieldValuesWithNameOrConstant(frame, options.right, allFrames);\n    if (!left || !right || !operator) {\n      return undefined as unknown as Vector;\n    }\n\n    return new BinaryOperationVector(left, right, operator.operation);\n  };\n}\n\nexport function getNameFromOptions(options: CalculateFieldTransformerOptions) {\n  if (options.alias?.length) {\n    return options.alias;\n  }\n\n  if (options.mode === CalculateFieldMode.BinaryOperation) {\n    const { binary } = options;\n    return `${binary?.left ?? ''} ${binary?.operator ?? ''} ${binary?.right ?? ''}`;\n  }\n\n  if (options.mode === CalculateFieldMode.ReduceRow) {\n    const r = fieldReducers.getIfExists(options.reduce?.reducer);\n    if (r) {\n      return r.name;\n    }\n  }\n\n  return 'math';\n}\n"],"names":[],"mappings":"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"}