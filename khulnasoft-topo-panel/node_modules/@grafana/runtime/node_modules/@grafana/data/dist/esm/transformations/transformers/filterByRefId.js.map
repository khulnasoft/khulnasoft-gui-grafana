{"version":3,"file":"filterByRefId.js","sources":["../../../../src/transformations/transformers/filterByRefId.ts"],"sourcesContent":["import { DataTransformerInfo } from '../../types/transformations';\nimport { FrameMatcherID } from '../matchers/ids';\n\nimport { filterFramesTransformer, FilterOptions } from './filter';\nimport { DataTransformerID } from './ids';\n\nexport interface FilterFramesByRefIdTransformerOptions {\n  include?: string;\n  exclude?: string;\n}\n\nexport const filterFramesByRefIdTransformer: DataTransformerInfo<FilterFramesByRefIdTransformerOptions> = {\n  id: DataTransformerID.filterByRefId,\n  name: 'Filter data by query refId',\n  description: 'select a subset of results',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) => {\n    const filterOptions: FilterOptions = {};\n    if (options.include) {\n      filterOptions.include = {\n        id: FrameMatcherID.byRefId,\n        options: options.include,\n      };\n    }\n    if (options.exclude) {\n      filterOptions.exclude = {\n        id: FrameMatcherID.byRefId,\n        options: options.exclude,\n      };\n    }\n\n    return source.pipe(filterFramesTransformer.operator(filterOptions));\n  },\n};\n"],"names":[],"mappings":";;;;AAWO,MAAM,8BAA6F,GAAA;AAAA,EACxG,IAAI,iBAAkB,CAAA,aAAA;AAAA,EACtB,IAAM,EAAA,4BAAA;AAAA,EACN,WAAa,EAAA,4BAAA;AAAA,EACb,gBAAgB,EAAC;AAAA,EAMjB,QAAU,EAAA,CAAC,OAAY,KAAA,CAAC,MAAW,KAAA;AACjC,IAAA,MAAM,gBAA+B,EAAC,CAAA;AACtC,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,aAAA,CAAc,OAAU,GAAA;AAAA,QACtB,IAAI,cAAe,CAAA,OAAA;AAAA,QACnB,SAAS,OAAQ,CAAA,OAAA;AAAA,OACnB,CAAA;AAAA,KACF;AACA,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,aAAA,CAAc,OAAU,GAAA;AAAA,QACtB,IAAI,cAAe,CAAA,OAAA;AAAA,QACnB,SAAS,OAAQ,CAAA,OAAA;AAAA,OACnB,CAAA;AAAA,KACF;AAEA,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,uBAAwB,CAAA,QAAA,CAAS,aAAa,CAAC,CAAA,CAAA;AAAA,GACpE;AACF;;;;"}