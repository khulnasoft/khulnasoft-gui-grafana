import { locationUtil } from './location.js';
import { serializeStateToUrlParam } from './url.js';

const DataLinkBuiltInVars = {
  keepTime: "__url_time_range",
  timeRangeFrom: "__from",
  timeRangeTo: "__to",
  includeVars: "__all_variables",
  seriesName: "__series.name",
  fieldName: "__field.name",
  valueTime: "__value.time",
  valueNumeric: "__value.numeric",
  valueText: "__value.text",
  valueRaw: "__value.raw",
  valueCalc: "__value.calc"
};
function mapInternalLinkToExplore(options) {
  var _a, _b;
  const { onClickFn, replaceVariables, link, scopedVars, range, field, internalLink } = options;
  const interpolatedQuery = interpolateObject((_a = link.internal) == null ? void 0 : _a.query, scopedVars, replaceVariables);
  const interpolatedPanelsState = interpolateObject((_b = link.internal) == null ? void 0 : _b.panelsState, scopedVars, replaceVariables);
  const title = link.title ? link.title : internalLink.datasourceName;
  return {
    title: replaceVariables(title, scopedVars),
    href: generateInternalHref(internalLink.datasourceUid, interpolatedQuery, range, interpolatedPanelsState),
    onClick: onClickFn ? () => {
      onClickFn({
        datasourceUid: internalLink.datasourceUid,
        query: interpolatedQuery,
        panelsState: interpolatedPanelsState,
        range
      });
    } : void 0,
    target: "_self",
    origin: field
  };
}
function generateInternalHref(datasourceUid, query, range, panelsState) {
  return locationUtil.assureBaseUrl(
    `/explore?left=${encodeURIComponent(
      serializeStateToUrlParam({
        range: range.raw,
        datasource: datasourceUid,
        queries: [query],
        panelsState
      })
    )}`
  );
}
function interpolateObject(object, scopedVars, replaceVariables) {
  let stringifiedQuery = "";
  try {
    stringifiedQuery = JSON.stringify(object || {});
  } catch (err) {
    console.error(err);
  }
  stringifiedQuery = replaceVariables(stringifiedQuery, scopedVars);
  let replacedQuery = {};
  try {
    replacedQuery = JSON.parse(stringifiedQuery);
  } catch (err) {
    console.error(stringifiedQuery, err);
  }
  return replacedQuery;
}

export { DataLinkBuiltInVars, mapInternalLinkToExplore };
//# sourceMappingURL=dataLinks.js.map
