{"version":3,"file":"dataLinks.js","sources":["../../../src/utils/dataLinks.ts"],"sourcesContent":["import {\n  DataLink,\n  DataQuery,\n  ExplorePanelsState,\n  Field,\n  InternalDataLink,\n  InterpolateFunction,\n  LinkModel,\n  ScopedVars,\n  SplitOpen,\n  TimeRange,\n} from '../types';\n\nimport { locationUtil } from './location';\nimport { serializeStateToUrlParam } from './url';\n\nexport const DataLinkBuiltInVars = {\n  keepTime: '__url_time_range',\n  timeRangeFrom: '__from',\n  timeRangeTo: '__to',\n  includeVars: '__all_variables',\n  seriesName: '__series.name',\n  fieldName: '__field.name',\n  valueTime: '__value.time',\n  valueNumeric: '__value.numeric',\n  valueText: '__value.text',\n  valueRaw: '__value.raw',\n  // name of the calculation represented by the value\n  valueCalc: '__value.calc',\n};\n\n// We inject these because we cannot import them directly as they reside inside grafana main package.\nexport type LinkToExploreOptions = {\n  link: DataLink;\n  scopedVars: ScopedVars;\n  range: TimeRange;\n  field: Field;\n  internalLink: InternalDataLink;\n  onClickFn?: SplitOpen;\n  replaceVariables: InterpolateFunction;\n};\n\nexport function mapInternalLinkToExplore(options: LinkToExploreOptions): LinkModel<Field> {\n  const { onClickFn, replaceVariables, link, scopedVars, range, field, internalLink } = options;\n\n  const interpolatedQuery = interpolateObject(link.internal?.query, scopedVars, replaceVariables);\n  const interpolatedPanelsState = interpolateObject(link.internal?.panelsState, scopedVars, replaceVariables);\n  const title = link.title ? link.title : internalLink.datasourceName;\n\n  return {\n    title: replaceVariables(title, scopedVars),\n    // In this case this is meant to be internal link (opens split view by default) the href will also points\n    // to explore but this way you can open it in new tab.\n    href: generateInternalHref(internalLink.datasourceUid, interpolatedQuery, range, interpolatedPanelsState),\n    onClick: onClickFn\n      ? () => {\n          onClickFn({\n            datasourceUid: internalLink.datasourceUid,\n            query: interpolatedQuery,\n            panelsState: interpolatedPanelsState,\n            range,\n          });\n        }\n      : undefined,\n    target: '_self',\n    origin: field,\n  };\n}\n\n/**\n * Generates href for internal derived field link.\n */\nfunction generateInternalHref<T extends DataQuery = any>(\n  datasourceUid: string,\n  query: T,\n  range: TimeRange,\n  panelsState?: ExplorePanelsState\n): string {\n  return locationUtil.assureBaseUrl(\n    `/explore?left=${encodeURIComponent(\n      serializeStateToUrlParam({\n        range: range.raw,\n        datasource: datasourceUid,\n        queries: [query],\n        panelsState: panelsState,\n      })\n    )}`\n  );\n}\n\nfunction interpolateObject<T extends object>(\n  object: T | undefined,\n  scopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction\n): T {\n  let stringifiedQuery = '';\n  try {\n    stringifiedQuery = JSON.stringify(object || {});\n  } catch (err) {\n    // should not happen and not much to do about this, possibly something non stringifiable in the query\n    console.error(err);\n  }\n\n  // Replace any variables inside the query. This may not be the safest as it can also replace keys etc so may not\n  // actually work with every datasource query right now.\n  stringifiedQuery = replaceVariables(stringifiedQuery, scopedVars);\n\n  let replacedQuery = {} as T;\n  try {\n    replacedQuery = JSON.parse(stringifiedQuery);\n  } catch (err) {\n    // again should not happen and not much to do about this, probably some issue with how we replaced the variables.\n    console.error(stringifiedQuery, err);\n  }\n\n  return replacedQuery;\n}\n"],"names":[],"mappings":";;;AAgBO,MAAM,mBAAsB,GAAA;AAAA,EACjC,QAAU,EAAA,kBAAA;AAAA,EACV,aAAe,EAAA,QAAA;AAAA,EACf,WAAa,EAAA,MAAA;AAAA,EACb,WAAa,EAAA,iBAAA;AAAA,EACb,UAAY,EAAA,eAAA;AAAA,EACZ,SAAW,EAAA,cAAA;AAAA,EACX,SAAW,EAAA,cAAA;AAAA,EACX,YAAc,EAAA,iBAAA;AAAA,EACd,SAAW,EAAA,cAAA;AAAA,EACX,QAAU,EAAA,aAAA;AAAA,EAEV,SAAW,EAAA,cAAA;AACb,EAAA;AAaO,SAAS,yBAAyB,OAAiD,EAAA;AA1C1F,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA2CE,EAAM,MAAA,EAAE,WAAW,gBAAkB,EAAA,IAAA,EAAM,YAAY,KAAO,EAAA,KAAA,EAAO,cAAiB,GAAA,OAAA,CAAA;AAEtF,EAAA,MAAM,oBAAoB,iBAAkB,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,EAAO,YAAY,gBAAgB,CAAA,CAAA;AAC9F,EAAA,MAAM,0BAA0B,iBAAkB,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAA,EAAa,YAAY,gBAAgB,CAAA,CAAA;AAC1G,EAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,QAAQ,YAAa,CAAA,cAAA,CAAA;AAErD,EAAO,OAAA;AAAA,IACL,KAAA,EAAO,gBAAiB,CAAA,KAAA,EAAO,UAAU,CAAA;AAAA,IAGzC,MAAM,oBAAqB,CAAA,YAAA,CAAa,aAAe,EAAA,iBAAA,EAAmB,OAAO,uBAAuB,CAAA;AAAA,IACxG,OAAA,EAAS,YACL,MAAM;AACJ,MAAU,SAAA,CAAA;AAAA,QACR,eAAe,YAAa,CAAA,aAAA;AAAA,QAC5B,KAAO,EAAA,iBAAA;AAAA,QACP,WAAa,EAAA,uBAAA;AAAA,QACb,KAAA;AAAA,OACD,CAAA,CAAA;AAAA,KAEH,GAAA,KAAA,CAAA;AAAA,IACJ,MAAQ,EAAA,OAAA;AAAA,IACR,MAAQ,EAAA,KAAA;AAAA,GACV,CAAA;AACF,CAAA;AAKA,SAAS,oBACP,CAAA,aAAA,EACA,KACA,EAAA,KAAA,EACA,WACQ,EAAA;AACR,EAAA,OAAO,YAAa,CAAA,aAAA;AAAA,IAClB,CAAiB,cAAA,EAAA,kBAAA;AAAA,MACf,wBAAyB,CAAA;AAAA,QACvB,OAAO,KAAM,CAAA,GAAA;AAAA,QACb,UAAY,EAAA,aAAA;AAAA,QACZ,OAAA,EAAS,CAAC,KAAK,CAAA;AAAA,QACf,WAAA;AAAA,OACD,CAAA;AAAA,KACH,CAAA,CAAA;AAAA,GACF,CAAA;AACF,CAAA;AAEA,SAAS,iBAAA,CACP,MACA,EAAA,UAAA,EACA,gBACG,EAAA;AACH,EAAA,IAAI,gBAAmB,GAAA,EAAA,CAAA;AACvB,EAAI,IAAA;AACF,IAAA,gBAAA,GAAmB,IAAK,CAAA,SAAA,CAAU,MAAU,IAAA,EAAE,CAAA,CAAA;AAAA,WACvC,GAAP,EAAA;AAEA,IAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAAA,GACnB;AAIA,EAAmB,gBAAA,GAAA,gBAAA,CAAiB,kBAAkB,UAAU,CAAA,CAAA;AAEhE,EAAA,IAAI,gBAAgB,EAAC,CAAA;AACrB,EAAI,IAAA;AACF,IAAgB,aAAA,GAAA,IAAA,CAAK,MAAM,gBAAgB,CAAA,CAAA;AAAA,WACpC,GAAP,EAAA;AAEA,IAAQ,OAAA,CAAA,KAAA,CAAM,kBAAkB,GAAG,CAAA,CAAA;AAAA,GACrC;AAEA,EAAO,OAAA,aAAA,CAAA;AACT;;;;"}