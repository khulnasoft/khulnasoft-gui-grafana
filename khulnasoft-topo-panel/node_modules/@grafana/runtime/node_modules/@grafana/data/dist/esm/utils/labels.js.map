{"version":3,"file":"labels.js","sources":["../../../src/utils/labels.ts"],"sourcesContent":["import { Labels } from '../types/data';\n\n/**\n * Regexp to extract Prometheus-style labels\n */\nconst labelRegexp = /\\b(\\w+)(!?=~?)\"([^\"\\n]*?)\"/g;\n\n/**\n * Returns a map of label keys to value from an input selector string.\n *\n * Example: `parseLabels('{job=\"foo\", instance=\"bar\"}) // {job: \"foo\", instance: \"bar\"}`\n */\nexport function parseLabels(labels: string): Labels {\n  const labelsByKey: Labels = {};\n  labels.replace(labelRegexp, (_, key, operator, value) => {\n    labelsByKey[key] = value;\n    return '';\n  });\n  return labelsByKey;\n}\n\n/**\n * Returns a map labels that are common to the given label sets.\n */\nexport function findCommonLabels(labelsSets: Labels[]): Labels {\n  return labelsSets.reduce((acc, labels) => {\n    if (!labels) {\n      throw new Error('Need parsed labels to find common labels.');\n    }\n    if (!acc) {\n      // Initial set\n      acc = { ...labels };\n    } else {\n      // Remove incoming labels that are missing or not matching in value\n      Object.keys(labels).forEach((key) => {\n        if (acc[key] === undefined || acc[key] !== labels[key]) {\n          delete acc[key];\n        }\n      });\n      // Remove common labels that are missing from incoming label set\n      Object.keys(acc).forEach((key) => {\n        if (labels[key] === undefined) {\n          delete acc[key];\n        }\n      });\n    }\n    return acc;\n  }, undefined as unknown as Labels);\n}\n\n/**\n * Returns a map of labels that are in `labels`, but not in `commonLabels`.\n */\nexport function findUniqueLabels(labels: Labels | undefined, commonLabels: Labels): Labels {\n  const uncommonLabels: Labels = { ...labels };\n  Object.keys(commonLabels).forEach((key) => {\n    delete uncommonLabels[key];\n  });\n  return uncommonLabels;\n}\n\n/**\n * Check that all labels exist in another set of labels\n */\nexport function matchAllLabels(expect: Labels, against?: Labels): boolean {\n  if (!expect) {\n    return true; // nothing to match\n  }\n  for (const [key, value] of Object.entries(expect)) {\n    if (!against || against[key] !== value) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Serializes the given labels to a string.\n */\nexport function formatLabels(labels: Labels, defaultValue = '', withoutBraces?: boolean): string {\n  if (!labels || Object.keys(labels).length === 0) {\n    return defaultValue;\n  }\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}=\"${labels[key]}\"`).join(', ');\n  if (withoutBraces) {\n    return cleanSelector;\n  }\n  return ['{', cleanSelector, '}'].join('');\n}\n"],"names":[],"mappings":"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"}