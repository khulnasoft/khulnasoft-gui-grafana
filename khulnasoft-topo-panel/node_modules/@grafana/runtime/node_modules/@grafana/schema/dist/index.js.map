{"version":3,"file":"index.js","sources":["../src/schema/mudball.gen.ts","../src/raw/dashboard/x/dashboard_types.gen.ts","../src/veneer/dashboard.types.ts","../src/raw/playlist/x/playlist_types.gen.ts"],"sourcesContent":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~\n// This file is autogenerated. DO NOT EDIT.\n//\n// To regenerate, run \"make gen-cue\" from the repository root.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n/**\n * TODO docs\n */\nexport enum AxisPlacement {\n  Auto = 'auto',\n  Bottom = 'bottom',\n  Hidden = 'hidden',\n  Left = 'left',\n  Right = 'right',\n  Top = 'top',\n}\n\n/**\n * TODO docs\n */\nexport enum AxisColorMode {\n  Series = 'series',\n  Text = 'text',\n}\n\n/**\n * TODO docs\n */\nexport enum VisibilityMode {\n  Always = 'always',\n  Auto = 'auto',\n  Never = 'never',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphDrawStyle {\n  Bars = 'bars',\n  Line = 'line',\n  Points = 'points',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphTransform {\n  Constant = 'constant',\n  NegativeY = 'negative-Y',\n}\n\n/**\n * TODO docs\n */\nexport enum LineInterpolation {\n  Linear = 'linear',\n  Smooth = 'smooth',\n  StepAfter = 'stepAfter',\n  StepBefore = 'stepBefore',\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleDistribution {\n  Linear = 'linear',\n  Log = 'log',\n  Ordinal = 'ordinal',\n  Symlog = 'symlog',\n}\n\n/**\n * TODO docs\n */\nexport enum GraphGradientMode {\n  Hue = 'hue',\n  None = 'none',\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\n/**\n * TODO docs\n */\nexport enum StackingMode {\n  None = 'none',\n  Normal = 'normal',\n  Percent = 'percent',\n}\n\n/**\n * TODO docs\n */\nexport enum BarAlignment {\n  After = 1,\n  Before = -1,\n  Center = 0,\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleOrientation {\n  Horizontal = 0,\n  Vertical = 1,\n}\n\n/**\n * TODO docs\n */\nexport enum ScaleDirection {\n  Down = -1,\n  Left = -1,\n  Right = 1,\n  Up = 1,\n}\n\n/**\n * TODO docs\n */\nexport interface LineStyle {\n  dash?: Array<number>;\n  fill?: ('solid' | 'dash' | 'dot' | 'square');\n}\n\nexport const defaultLineStyle: Partial<LineStyle> = {\n  dash: [],\n};\n\n/**\n * TODO docs\n */\nexport interface LineConfig {\n  lineColor?: string;\n  lineInterpolation?: LineInterpolation;\n  lineStyle?: LineStyle;\n  lineWidth?: number;\n  /**\n   * Indicate if null values should be treated as gaps or connected.\n   * When the value is a number, it represents the maximum delta in the\n   * X axis that should be considered connected.  For timeseries, this is milliseconds\n   */\n  spanNulls?: (boolean | number);\n}\n\n/**\n * TODO docs\n */\nexport interface BarConfig {\n  barAlignment?: BarAlignment;\n  barMaxWidth?: number;\n  barWidthFactor?: number;\n}\n\n/**\n * TODO docs\n */\nexport interface FillConfig {\n  fillBelowTo?: string;\n  fillColor?: string;\n  fillOpacity?: number;\n}\n\n/**\n * TODO docs\n */\nexport interface PointsConfig {\n  pointColor?: string;\n  pointSize?: number;\n  pointSymbol?: string;\n  showPoints?: VisibilityMode;\n}\n\n/**\n * TODO docs\n */\nexport interface ScaleDistributionConfig {\n  linearThreshold?: number;\n  log?: number;\n  type: ScaleDistribution;\n}\n\n/**\n * TODO docs\n */\nexport interface AxisConfig {\n  axisCenteredZero?: boolean;\n  axisColorMode?: AxisColorMode;\n  axisGridShow?: boolean;\n  axisLabel?: string;\n  axisPlacement?: AxisPlacement;\n  axisSoftMax?: number;\n  axisSoftMin?: number;\n  axisWidth?: number;\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\n/**\n * TODO docs\n */\nexport interface HideSeriesConfig {\n  legend: boolean;\n  tooltip: boolean;\n  viz: boolean;\n}\n\n/**\n * TODO docs\n */\nexport interface StackingConfig {\n  group?: string;\n  mode?: StackingMode;\n}\n\n/**\n * TODO docs\n */\nexport interface StackableFieldConfig {\n  stacking?: StackingConfig;\n}\n\n/**\n * TODO docs\n */\nexport interface HideableFieldConfig {\n  hideFrom?: HideSeriesConfig;\n}\n\n/**\n * TODO docs\n */\nexport enum GraphTresholdsStyleMode {\n  Area = 'area',\n  Dashed = 'dashed',\n  DashedAndArea = 'dashed+area',\n  Line = 'line',\n  LineAndArea = 'line+area',\n  Off = 'off',\n  Series = 'series',\n}\n\n/**\n * TODO docs\n */\nexport interface GraphThresholdsStyleConfig {\n  mode: GraphTresholdsStyleMode;\n}\n\n/**\n * TODO docs\n */\nexport type LegendPlacement = ('bottom' | 'right');\n\n/**\n * TODO docs\n * Note: \"hidden\" needs to remain as an option for plugins compatibility\n */\nexport enum LegendDisplayMode {\n  Hidden = 'hidden',\n  List = 'list',\n  Table = 'table',\n}\n\n/**\n * TODO docs\n */\nexport interface TableSortByFieldState {\n  desc?: boolean;\n  displayName: string;\n}\n\n/**\n * TODO docs\n */\nexport interface SingleStatBaseOptions extends OptionsWithTextFormatting {\n  orientation: VizOrientation;\n  reduceOptions: ReduceDataOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface ReduceDataOptions {\n  /**\n   * When !values, pick one value for the whole field\n   */\n  calcs: Array<string>;\n  /**\n   * Which fields to show.  By default this is only numeric fields\n   */\n  fields?: string;\n  /**\n   * if showing all values limit\n   */\n  limit?: number;\n  /**\n   * If true show each row value\n   */\n  values?: boolean;\n}\n\nexport const defaultReduceDataOptions: Partial<ReduceDataOptions> = {\n  calcs: [],\n};\n\n/**\n * TODO docs\n */\nexport enum VizOrientation {\n  Auto = 'auto',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTooltip {\n  tooltip: VizTooltipOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithLegend {\n  legend: VizLegendOptions;\n}\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTimezones {\n  timezone?: Array<string>;\n}\n\nexport const defaultOptionsWithTimezones: Partial<OptionsWithTimezones> = {\n  timezone: [],\n};\n\n/**\n * TODO docs\n */\nexport interface OptionsWithTextFormatting {\n  text?: VizTextDisplayOptions;\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueColorMode {\n  Background = 'background',\n  None = 'none',\n  Value = 'value',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueGraphMode {\n  Area = 'area',\n  Line = 'line',\n  None = 'none',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueJustifyMode {\n  Auto = 'auto',\n  Center = 'center',\n}\n\n/**\n * TODO docs\n */\nexport enum BigValueTextMode {\n  Auto = 'auto',\n  Name = 'name',\n  None = 'none',\n  Value = 'value',\n  ValueAndName = 'value_and_name',\n}\n\n/**\n * TODO -- should not be table specific!\n * TODO docs\n */\nexport type FieldTextAlignment = ('auto' | 'left' | 'right' | 'center');\n\n/**\n * TODO docs\n */\nexport enum TableCellDisplayMode {\n  Auto = 'auto',\n  BasicGauge = 'basic',\n  ColorBackground = 'color-background',\n  ColorBackgroundSolid = 'color-background-solid',\n  ColorText = 'color-text',\n  GradientGauge = 'gradient-gauge',\n  Image = 'image',\n  JSONView = 'json-view',\n  LcdGauge = 'lcd-gauge',\n}\n\n/**\n * TODO docs\n */\nexport interface VizTextDisplayOptions {\n  /**\n   * Explicit title text size\n   */\n  titleSize?: number;\n  /**\n   * Explicit value text size\n   */\n  valueSize?: number;\n}\n\n/**\n * TODO docs\n */\nexport enum TooltipDisplayMode {\n  Multi = 'multi',\n  None = 'none',\n  Single = 'single',\n}\n\n/**\n * TODO docs\n */\nexport enum SortOrder {\n  Ascending = 'asc',\n  Descending = 'desc',\n  None = 'none',\n}\n\n/**\n * TODO docs\n */\nexport interface GraphFieldConfig extends LineConfig, FillConfig, PointsConfig, AxisConfig, BarConfig, StackableFieldConfig, HideableFieldConfig {\n  drawStyle?: GraphDrawStyle;\n  gradientMode?: GraphGradientMode;\n  thresholdsStyle?: GraphThresholdsStyleConfig;\n  transform?: GraphTransform;\n}\n\n/**\n * TODO docs\n */\nexport interface VizLegendOptions {\n  asTable?: boolean;\n  calcs: Array<string>;\n  displayMode: LegendDisplayMode;\n  isVisible?: boolean;\n  placement: LegendPlacement;\n  showLegend: boolean;\n  sortBy?: string;\n  sortDesc?: boolean;\n  width?: number;\n}\n\nexport const defaultVizLegendOptions: Partial<VizLegendOptions> = {\n  calcs: [],\n};\n\n/**\n * TODO docs\n */\nexport enum BarGaugeDisplayMode {\n  Basic = 'basic',\n  Gradient = 'gradient',\n  Lcd = 'lcd',\n}\n\n/**\n * TODO docs\n */\nexport interface TableFieldOptions {\n  align: FieldTextAlignment;\n  displayMode: TableCellDisplayMode;\n  filterable?: boolean;\n  hidden?: boolean;\n  inspect: boolean;\n  minWidth?: number;\n  width?: number;\n}\n\nexport const defaultTableFieldOptions: Partial<TableFieldOptions> = {\n  align: 'auto',\n  displayMode: TableCellDisplayMode.Auto,\n  inspect: false,\n};\n\n/**\n * TODO docs\n */\nexport interface VizTooltipOptions {\n  mode: TooltipDisplayMode;\n  sort: SortOrder;\n}\n","// THIS FILE IS GENERATED. EDITING IS FUTILE.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     TSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\n/**\n * TODO docs\n */\nexport interface AnnotationTarget {\n  limit: number;\n  matchAny: boolean;\n  tags: Array<string>;\n  type: string;\n}\n\nexport const defaultAnnotationTarget: Partial<AnnotationTarget> = {\n  tags: [],\n};\n\n/**\n * TODO docs\n * FROM: AnnotationQuery in grafana-data/src/types/annotations.ts\n */\nexport interface AnnotationQuery {\n  builtIn: number;\n  /**\n   * Datasource to use for annotation.\n   */\n  datasource: {\n    type?: string;\n    uid?: string;\n  };\n  /**\n   * Whether annotation is enabled.\n   */\n  enable: boolean;\n  /**\n   * Whether to hide annotation.\n   */\n  hide?: boolean;\n  /**\n   * Annotation icon color.\n   */\n  iconColor?: string;\n  /**\n   * Name of annotation.\n   */\n  name?: string;\n  /**\n   * Query for annotation data.\n   */\n  rawQuery?: string;\n  showIn: number;\n  target?: AnnotationTarget;\n  type: string;\n}\n\nexport const defaultAnnotationQuery: Partial<AnnotationQuery> = {\n  builtIn: 0,\n  enable: true,\n  hide: false,\n  showIn: 0,\n  type: 'dashboard',\n};\n\n/**\n * FROM: packages/grafana-data/src/types/templateVars.ts\n * TODO docs\n * TODO what about what's in public/app/features/types.ts?\n * TODO there appear to be a lot of different kinds of [template] vars here? if so need a disjunction\n */\nexport interface VariableModel {\n  label?: string;\n  name: string;\n  type: VariableType;\n}\n\n/**\n * FROM public/app/features/dashboard/state/DashboardModels.ts - ish\n * TODO docs\n */\nexport interface DashboardLink {\n  asDropdown: boolean;\n  icon?: string;\n  includeVars: boolean;\n  keepTime: boolean;\n  tags: Array<string>;\n  targetBlank: boolean;\n  title: string;\n  tooltip?: string;\n  type: DashboardLinkType;\n  url?: string;\n}\n\nexport const defaultDashboardLink: Partial<DashboardLink> = {\n  asDropdown: false,\n  includeVars: false,\n  keepTime: false,\n  tags: [],\n  targetBlank: false,\n};\n\n/**\n * TODO docs\n */\nexport type DashboardLinkType = ('link' | 'dashboards');\n\n/**\n * FROM: packages/grafana-data/src/types/templateVars.ts\n * TODO docs\n * TODO this implies some wider pattern/discriminated union, probably?\n */\nexport type VariableType = ('query' | 'adhoc' | 'constant' | 'datasource' | 'interval' | 'textbox' | 'custom' | 'system');\n\n/**\n * TODO docs\n */\nexport enum FieldColorModeId {\n  ContinuousGrYlRd = 'continuous-GrYlRd',\n  Fixed = 'fixed',\n  PaletteClassic = 'palette-classic',\n  PaletteSaturated = 'palette-saturated',\n  Thresholds = 'thresholds',\n}\n\n/**\n * TODO docs\n */\nexport type FieldColorSeriesByMode = ('min' | 'max' | 'last');\n\n/**\n * TODO docs\n */\nexport interface FieldColor {\n  /**\n   * Stores the fixed color value if mode is fixed\n   */\n  fixedColor?: string;\n  /**\n   * The main color scheme mode\n   */\n  mode: FieldColorModeId;\n  /**\n   * Some visualizations need to know how to assign a series color from by value color schemes\n   */\n  seriesBy?: FieldColorSeriesByMode;\n}\n\nexport interface GridPos {\n  /**\n   * Panel\n   */\n  h: number;\n  /**\n   * true if fixed\n   */\n  static?: boolean;\n  /**\n   * Panel\n   */\n  w: number;\n  /**\n   * Panel x\n   */\n  x: number;\n  /**\n   * Panel y\n   */\n  y: number;\n}\n\nexport const defaultGridPos: Partial<GridPos> = {\n  h: 9,\n  w: 12,\n  x: 0,\n  y: 0,\n};\n\n/**\n * TODO docs\n */\nexport interface Threshold {\n  /**\n   * TODO docs\n   */\n  color: string;\n  /**\n   * TODO docs\n   * TODO are the values here enumerable into a disjunction?\n   * Some seem to be listed in typescript comment\n   */\n  state?: string;\n  /**\n   * TODO docs\n   * FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON\n   */\n  value?: number;\n}\n\nexport enum ThresholdsMode {\n  Absolute = 'absolute',\n  Percentage = 'percentage',\n}\n\nexport interface ThresholdsConfig {\n  mode: ThresholdsMode;\n  /**\n   * Must be sorted by 'value', first value is always -Infinity\n   */\n  steps: Array<Threshold>;\n}\n\nexport const defaultThresholdsConfig: Partial<ThresholdsConfig> = {\n  steps: [],\n};\n\n/**\n * TODO docs\n */\nexport type ValueMapping = (ValueMap | RangeMap | RegexMap | SpecialValueMap);\n\n/**\n * TODO docs\n */\nexport enum MappingType {\n  RangeToText = 'range',\n  RegexToText = 'regex',\n  SpecialValue = 'special',\n  ValueToText = 'value',\n}\n\n/**\n * TODO docs\n */\nexport interface ValueMap {\n  options: Record<string, unknown>;\n  type: MappingType.ValueToText;\n}\n\n/**\n * TODO docs\n */\nexport interface RangeMap {\n  options: {\n    /**\n     * to and from are `number | null` in current ts, really not sure what to do\n     */\n    from: number;\n    to: number;\n    result: ValueMappingResult;\n  };\n  type: MappingType.RangeToText;\n}\n\n/**\n * TODO docs\n */\nexport interface RegexMap {\n  options: {\n    pattern: string;\n    result: ValueMappingResult;\n  };\n  type: MappingType.RegexToText;\n}\n\n/**\n * TODO docs\n */\nexport interface SpecialValueMap {\n  options: {\n    match: ('true' | 'false');\n    pattern: string;\n    result: ValueMappingResult;\n  };\n  type: MappingType.SpecialValue;\n}\n\n/**\n * TODO docs\n */\nexport enum SpecialValueMatch {\n  Empty = 'empty',\n  False = 'false',\n  NaN = 'nan',\n  Null = 'null',\n  NullAndNan = 'null+nan',\n  True = 'true',\n}\n\n/**\n * TODO docs\n */\nexport interface ValueMappingResult {\n  color?: string;\n  icon?: string;\n  index?: number;\n  text?: string;\n}\n\n/**\n * TODO docs\n * FIXME this is extremely underspecfied; wasn't obvious which typescript types corresponded to it\n */\nexport interface Transformation {\n  id: string;\n  options: Record<string, unknown>;\n}\n\n/**\n * 0 for no shared crosshair or tooltip (default).\n * 1 for shared crosshair.\n * 2 for shared crosshair AND shared tooltip.\n */\nexport enum DashboardCursorSync {\n  Crosshair = 1,\n  Off = 0,\n  Tooltip = 2,\n}\n\nexport const defaultDashboardCursorSync: DashboardCursorSync = DashboardCursorSync.Off;\n\n/**\n * Dashboard panels. Panels are canonically defined inline\n * because they share a version timeline with the dashboard\n * schema; they do not evolve independently.\n */\nexport interface Panel {\n  /**\n   * The datasource used in all targets.\n   */\n  datasource?: {\n    type?: string;\n    uid?: string;\n  };\n  /**\n   * Description.\n   */\n  description?: string;\n  fieldConfig: FieldConfigSource;\n  /**\n   * Grid position.\n   */\n  gridPos?: GridPos;\n  /**\n   * TODO docs\n   */\n  id?: number;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  interval?: string;\n  /**\n   * Panel links.\n   * TODO fill this out - seems there are a couple variants?\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * TODO docs\n   */\n  maxDataPoints?: number;\n  /**\n   * options is specified by the PanelOptions field in panel\n   * plugin schemas.\n   */\n  options: Record<string, unknown>;\n  /**\n   * FIXME this almost certainly has to be changed in favor of scuemata versions\n   */\n  pluginVersion?: string;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  /**\n   * Direction to repeat in if 'repeat' is set.\n   * \"h\" for horizontal, \"v\" for vertical.\n   */\n  repeatDirection: ('h' | 'v');\n  /**\n   * TODO docs\n   */\n  tags?: Array<string>;\n  /**\n   * TODO docs\n   */\n  targets?: Array<Record<string, unknown>>;\n  /**\n   * TODO docs - seems to be an old field from old dashboard alerts?\n   */\n  thresholds?: Array<any>;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  timeFrom?: string;\n  /**\n   * TODO docs\n   */\n  timeRegions?: Array<any>;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  timeShift?: string;\n  /**\n   * Panel title.\n   */\n  title?: string;\n  transformations: Array<Transformation>;\n  /**\n   * Whether to display the panel without a background.\n   */\n  transparent: boolean;\n  /**\n   * The panel plugin type id. May not be empty.\n   */\n  type: string;\n}\n\nexport const defaultPanel: Partial<Panel> = {\n  links: [],\n  repeatDirection: 'h',\n  tags: [],\n  targets: [],\n  thresholds: [],\n  timeRegions: [],\n  transformations: [],\n  transparent: false,\n};\n\nexport interface FieldConfigSource {\n  defaults: FieldConfig;\n  overrides: Array<{\n    matcher: MatcherConfig;\n    properties: Array<{\n      id: string;\n      value?: any;\n    }>;\n  }>;\n}\n\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = {\n  overrides: [],\n};\n\nexport interface MatcherConfig {\n  id: string;\n  options?: any;\n}\n\nexport const defaultMatcherConfig: Partial<MatcherConfig> = {\n  id: '',\n};\n\nexport interface FieldConfig {\n  /**\n   * Map values to a display color\n   */\n  color?: FieldColor;\n  /**\n   * custom is specified by the PanelFieldConfig field\n   * in panel plugin schemas.\n   */\n  custom?: Record<string, unknown>;\n  /**\n   * Significant digits (for display)\n   */\n  decimals?: number;\n  /**\n   * Human readable field metadata\n   */\n  description?: string;\n  /**\n   * The display value for this field.  This supports template variables blank is auto\n   */\n  displayName?: string;\n  /**\n   * This can be used by data sources that return and explicit naming structure for values and labels\n   * When this property is configured, this value is used rather than the default naming strategy.\n   */\n  displayNameFromDS?: string;\n  /**\n   * True if data source field supports ad-hoc filters\n   */\n  filterable?: boolean;\n  /**\n   * The behavior when clicking on a result\n   */\n  links?: Array<any>;\n  /**\n   * Convert input values into a display string\n   */\n  mappings?: Array<ValueMapping>;\n  max?: number;\n  min?: number;\n  /**\n   * Alternative to empty string\n   */\n  noValue?: string;\n  /**\n   * An explicit path to the field in the datasource.  When the frame meta includes a path,\n   * This will default to `${frame.meta.path}/${field.name}\n   * \n   * When defined, this value can be used as an identifier within the datasource scope, and\n   * may be used to update the results\n   */\n  path?: string;\n  /**\n   * Map numeric values to states\n   */\n  thresholds?: ThresholdsConfig;\n  /**\n   * Numeric Options\n   */\n  unit?: string;\n  /**\n   * True if data source can write a value to the path.  Auth/authz are supported separately\n   */\n  writeable?: boolean;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  links: [],\n  mappings: [],\n};\n\n/**\n * Row panel\n */\nexport interface RowPanel {\n  collapsed: boolean;\n  /**\n   * Name of default datasource.\n   */\n  datasource?: {\n    type?: string;\n    uid?: string;\n  };\n  gridPos?: GridPos;\n  id: number;\n  panels: Array<(Panel | {\n      type: 'graph';\n    } | {\n      type: 'heatmap';\n    })>;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  title?: string;\n  type: 'row';\n}\n\nexport const defaultRowPanel: Partial<RowPanel> = {\n  collapsed: false,\n  panels: [],\n};\n\nexport interface Dashboard {\n  /**\n   * TODO docs\n   */\n  annotations?: {\n    list: Array<AnnotationQuery>;\n  };\n  /**\n   * Description of dashboard.\n   */\n  description?: string;\n  /**\n   * Whether a dashboard is editable or not.\n   */\n  editable: boolean;\n  /**\n   * TODO docs\n   */\n  fiscalYearStartMonth?: number;\n  gnetId?: string;\n  graphTooltip: DashboardCursorSync;\n  /**\n   * Unique numeric identifier for the dashboard.\n   * TODO must isolate or remove identifiers local to a Grafana instance...?\n   */\n  id?: number;\n  /**\n   * TODO docs\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * TODO docs\n   */\n  liveNow?: boolean;\n  panels?: Array<(Panel | RowPanel | {\n      type: 'graph';\n    } | {\n      type: 'heatmap';\n    })>;\n  /**\n   * TODO docs\n   */\n  refresh?: (string | false);\n  /**\n   * Version of the JSON schema, incremented each time a Grafana update brings\n   * changes to said schema.\n   * TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion\n   */\n  schemaVersion: number;\n  /**\n   * Theme of dashboard.\n   */\n  style: ('light' | 'dark');\n  /**\n   * Tags associated with dashboard.\n   */\n  tags?: Array<string>;\n  /**\n   * TODO docs\n   */\n  templating?: {\n    list: Array<VariableModel>;\n  };\n  /**\n   * Time range for dashboard, e.g. last 6 hours, last 7 days, etc\n   */\n  time?: {\n    from: string;\n    to: string;\n  };\n  /**\n   * TODO docs\n   * TODO this appears to be spread all over in the frontend. Concepts will likely need tidying in tandem with schema changes\n   */\n  timepicker?: {\n    /**\n     * Whether timepicker is collapsed or not.\n     */\n    collapse: boolean;\n    /**\n     * Whether timepicker is enabled or not.\n     */\n    enable: boolean;\n    /**\n     * Whether timepicker is visible or not.\n     */\n    hidden: boolean;\n    /**\n     * Selectable intervals for auto-refresh.\n     */\n    refresh_intervals: Array<string>;\n    /**\n     * TODO docs\n     */\n    time_options: Array<string>;\n  };\n  /**\n   * Timezone of dashboard,\n   */\n  timezone?: ('browser' | 'utc' | '');\n  /**\n   * Title of dashboard.\n   */\n  title?: string;\n  /**\n   * Unique dashboard identifier that can be generated by anyone. string (8-40)\n   */\n  uid?: string;\n  /**\n   * Version of the dashboard, incremented each time the dashboard is updated.\n   */\n  version?: number;\n  /**\n   * TODO docs\n   */\n  weekStart?: string;\n}\n\nexport const defaultDashboard: Partial<Dashboard> = {\n  editable: true,\n  graphTooltip: DashboardCursorSync.Off,\n  links: [],\n  panels: [],\n  schemaVersion: 36,\n  style: 'dark',\n  tags: [],\n  timezone: 'browser',\n};\n","import * as raw from '../raw/dashboard/x/dashboard_types.gen';\n\nexport interface Dashboard extends raw.Dashboard {\n  panels?: Array<\n    | Panel\n    | raw.RowPanel\n    | {\n        type: 'graph';\n      }\n    | {\n        type: 'heatmap';\n      }\n  >;\n}\n\nexport interface Panel<TOptions = Record<string, unknown>, TCustomFieldConfig = Record<string, unknown>>\n  extends raw.Panel {\n  fieldConfig: FieldConfigSource<TCustomFieldConfig>;\n}\n\nexport interface FieldConfig<TOptions = Record<string, unknown>> extends raw.FieldConfig {\n  custom?: TOptions & Record<string, unknown>;\n}\n\nexport interface FieldConfigSource<TOptions = Record<string, unknown>> extends raw.FieldConfigSource {\n  defaults: FieldConfig<TOptions>;\n}\n\nexport const defaultDashboard: Partial<Dashboard> = raw.defaultDashboard;\nexport const defaultPanel: Partial<Panel> = raw.defaultPanel;\nexport const defaultFieldConfig: Partial<FieldConfig> = raw.defaultFieldConfig;\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = raw.defaultFieldConfigSource;\n","// THIS FILE IS GENERATED. EDITING IS FUTILE.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     TSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport interface PlaylistItem {\n  /**\n   * Title is an unused property -- it will be removed in the future\n   */\n  title?: string;\n  /**\n   * Type of the item.\n   */\n  type: ('dashboard_by_uid' | 'dashboard_by_id' | 'dashboard_by_tag');\n  /**\n   * Value depends on type and describes the playlist item.\n   * \n   *  - dashboard_by_id: The value is an internal numerical identifier set by Grafana. This\n   *  is not portable as the numerical identifier is non-deterministic between different instances.\n   *  Will be replaced by dashboard_by_uid in the future. (deprecated)\n   *  - dashboard_by_tag: The value is a tag which is set on any number of dashboards. All\n   *  dashboards behind the tag will be added to the playlist.\n   *  - dashboard_by_uid: The value is the dashboard UID\n   */\n  value: string;\n}\n\nexport interface Playlist {\n  /**\n   * Interval sets the time between switching views in a playlist.\n   * FIXME: Is this based on a standardized format or what options are available? Can datemath be used?\n   */\n  interval: string;\n  /**\n   * The ordered list of items that the playlist will iterate over.\n   * FIXME! This should not be optional, but changing it makes the godegen awkward\n   */\n  items?: Array<PlaylistItem>;\n  /**\n   * Name of the playlist.\n   */\n  name: string;\n  /**\n   * Unique playlist identifier. Generated on creation, either by the\n   * creator of the playlist of by the application.\n   */\n  uid: string;\n}\n\nexport const defaultPlaylist: Partial<Playlist> = {\n  interval: '5m',\n  items: [],\n};\n"],"names":["AxisPlacement","AxisColorMode","VisibilityMode","GraphDrawStyle","GraphTransform","LineInterpolation","ScaleDistribution","GraphGradientMode","StackingMode","BarAlignment","ScaleOrientation","ScaleDirection","GraphTresholdsStyleMode","LegendDisplayMode","VizOrientation","BigValueColorMode","BigValueGraphMode","BigValueJustifyMode","BigValueTextMode","TableCellDisplayMode","TooltipDisplayMode","SortOrder","BarGaugeDisplayMode","defaultPanel","defaultFieldConfigSource","defaultFieldConfig","defaultDashboard","raw.defaultDashboard","raw.defaultPanel","raw.defaultFieldConfig","raw.defaultFieldConfigSource"],"mappings":";;;;AASY,IAAA,aAAA,qBAAAA,cAAL,KAAA;AACL,EAAAA,eAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,eAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,eAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,eAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,eAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,eAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AANI,EAAAA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA,EAAA;AAYA,IAAA,aAAA,qBAAAC,cAAL,KAAA;AACL,EAAAA,eAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,eAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AAFG,EAAAA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA,EAAA;AAQA,IAAA,cAAA,qBAAAC,eAAL,KAAA;AACL,EAAAA,gBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,gBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,gBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AAHE,EAAAA,OAAAA,eAAAA,CAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA,EAAA;AASA,IAAA,cAAA,qBAAAC,eAAL,KAAA;AACL,EAAAA,gBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,gBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,gBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAHC,EAAAA,OAAAA,eAAAA,CAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA,EAAA;AASA,IAAA,cAAA,qBAAAC,eAAL,KAAA;AACL,EAAAA,gBAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AACX,EAAAA,gBAAA,WAAY,CAAA,GAAA,YAAA,CAAA;AAFF,EAAAA,OAAAA,eAAAA,CAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA,EAAA;AAQA,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,mBAAA,WAAY,CAAA,GAAA,WAAA,CAAA;AACZ,EAAAA,mBAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AAJH,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AAUA,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,mBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AACN,EAAAA,mBAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AACV,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAJC,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AAUA,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AACN,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AACV,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAJC,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AAUA,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACL,EAAAA,cAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,cAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,cAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AAHA,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,EAAA;AASA,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACL,EAAAA,aAAAA,CAAAA,aAAAA,CAAA,WAAQ,CAAR,CAAA,GAAA,OAAA,CAAA;AACA,EAAAA,aAAAA,CAAAA,aAAAA,CAAA,YAAS,CAAT,CAAA,CAAA,GAAA,QAAA,CAAA;AACA,EAAAA,aAAAA,CAAAA,aAAAA,CAAA,YAAS,CAAT,CAAA,GAAA,QAAA,CAAA;AAHU,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,EAAA;AASA,IAAA,gBAAA,qBAAAC,iBAAL,KAAA;AACL,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,gBAAa,CAAb,CAAA,GAAA,YAAA,CAAA;AACA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,cAAW,CAAX,CAAA,GAAA,UAAA,CAAA;AAFU,EAAAA,OAAAA,iBAAAA,CAAAA;AAAA,CAAA,EAAA,gBAAA,IAAA,EAAA,EAAA;AAQA,IAAA,cAAA,qBAAAC,eAAL,KAAA;AACL,EAAAA,eAAAA,CAAAA,eAAAA,CAAA,UAAO,CAAP,CAAA,CAAA,GAAA,MAAA,CAAA;AACA,EAAAA,eAAAA,CAAAA,eAAAA,CAAA,UAAO,CAAP,CAAA,CAAA,GAAA,MAAA,CAAA;AACA,EAAAA,eAAAA,CAAAA,eAAAA,CAAA,WAAQ,CAAR,CAAA,GAAA,OAAA,CAAA;AACA,EAAAA,eAAAA,CAAAA,eAAAA,CAAA,QAAK,CAAL,CAAA,GAAA,IAAA,CAAA;AAJU,EAAAA,OAAAA,eAAAA,CAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA,EAAA;AAeL,MAAM,gBAAuC,GAAA;AAAA,EAClD,MAAM,EAAC;AACT,EAAA;AAwGY,IAAA,uBAAA,qBAAAC,wBAAL,KAAA;AACL,EAAAA,yBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,yBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,yBAAA,eAAgB,CAAA,GAAA,aAAA,CAAA;AAChB,EAAAA,yBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,yBAAA,aAAc,CAAA,GAAA,WAAA,CAAA;AACd,EAAAA,yBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AACN,EAAAA,yBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAPC,EAAAA,OAAAA,wBAAAA,CAAAA;AAAA,CAAA,EAAA,uBAAA,IAAA,EAAA,EAAA;AA0BA,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AAHE,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AA4CL,MAAM,wBAAuD,GAAA;AAAA,EAClE,OAAO,EAAC;AACV,EAAA;AAKY,IAAA,cAAA,qBAAAC,eAAL,KAAA;AACL,EAAAA,gBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,gBAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AACb,EAAAA,gBAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AAHD,EAAAA,OAAAA,eAAAA,CAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA,EAAA;AA2BL,MAAM,2BAA6D,GAAA;AAAA,EACxE,UAAU,EAAC;AACb,EAAA;AAYY,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AACb,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AAHE,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AASA,IAAA,iBAAA,qBAAAC,kBAAL,KAAA;AACL,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AAHG,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AASA,IAAA,mBAAA,qBAAAC,oBAAL,KAAA;AACL,EAAAA,qBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,qBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAFC,EAAAA,OAAAA,oBAAAA,CAAAA;AAAA,CAAA,EAAA,mBAAA,IAAA,EAAA,EAAA;AAQA,IAAA,gBAAA,qBAAAC,iBAAL,KAAA;AACL,EAAAA,kBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,kBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,kBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,kBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,kBAAA,cAAe,CAAA,GAAA,gBAAA,CAAA;AALL,EAAAA,OAAAA,iBAAAA,CAAAA;AAAA,CAAA,EAAA,gBAAA,IAAA,EAAA,EAAA;AAiBA,IAAA,oBAAA,qBAAAC,qBAAL,KAAA;AACL,EAAAA,sBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,sBAAA,YAAa,CAAA,GAAA,OAAA,CAAA;AACb,EAAAA,sBAAA,iBAAkB,CAAA,GAAA,kBAAA,CAAA;AAClB,EAAAA,sBAAA,sBAAuB,CAAA,GAAA,wBAAA,CAAA;AACvB,EAAAA,sBAAA,WAAY,CAAA,GAAA,YAAA,CAAA;AACZ,EAAAA,sBAAA,eAAgB,CAAA,GAAA,gBAAA,CAAA;AAChB,EAAAA,sBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,sBAAA,UAAW,CAAA,GAAA,WAAA,CAAA;AACX,EAAAA,sBAAA,UAAW,CAAA,GAAA,WAAA,CAAA;AATD,EAAAA,OAAAA,qBAAAA,CAAAA;AAAA,CAAA,EAAA,oBAAA,IAAA,EAAA,EAAA;AA6BA,IAAA,kBAAA,qBAAAC,mBAAL,KAAA;AACL,EAAAA,oBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,oBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,oBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AAHC,EAAAA,OAAAA,mBAAAA,CAAAA;AAAA,CAAA,EAAA,kBAAA,IAAA,EAAA,EAAA;AASA,IAAA,SAAA,qBAAAC,UAAL,KAAA;AACL,EAAAA,WAAA,WAAY,CAAA,GAAA,KAAA,CAAA;AACZ,EAAAA,WAAA,YAAa,CAAA,GAAA,MAAA,CAAA;AACb,EAAAA,WAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AAHG,EAAAA,OAAAA,UAAAA,CAAAA;AAAA,CAAA,EAAA,SAAA,IAAA,EAAA,EAAA;AA+BL,MAAM,uBAAqD,GAAA;AAAA,EAChE,OAAO,EAAC;AACV,EAAA;AAKY,IAAA,mBAAA,qBAAAC,oBAAL,KAAA;AACL,EAAAA,qBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,qBAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AACX,EAAAA,qBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AAHI,EAAAA,OAAAA,oBAAAA,CAAAA;AAAA,CAAA,EAAA,mBAAA,IAAA,EAAA,EAAA;AAmBL,MAAM,wBAAuD,GAAA;AAAA,EAClE,KAAO,EAAA,MAAA;AAAA,EACP,WAAa,EAAA,MAAA;AAAA,EACb,OAAS,EAAA,KAAA;AACX;;ACzdO,MAAM,uBAAqD,GAAA;AAAA,EAChE,MAAM,EAAC;AACT,EAAA;AAwCO,MAAM,sBAAmD,GAAA;AAAA,EAC9D,OAAS,EAAA,CAAA;AAAA,EACT,MAAQ,EAAA,IAAA;AAAA,EACR,IAAM,EAAA,KAAA;AAAA,EACN,MAAQ,EAAA,CAAA;AAAA,EACR,IAAM,EAAA,WAAA;AACR,EAAA;AA+BO,MAAM,oBAA+C,GAAA;AAAA,EAC1D,UAAY,EAAA,KAAA;AAAA,EACZ,WAAa,EAAA,KAAA;AAAA,EACb,QAAU,EAAA,KAAA;AAAA,EACV,MAAM,EAAC;AAAA,EACP,WAAa,EAAA,KAAA;AACf,EAAA;AAuEO,MAAM,cAAmC,GAAA;AAAA,EAC9C,CAAG,EAAA,CAAA;AAAA,EACH,CAAG,EAAA,EAAA;AAAA,EACH,CAAG,EAAA,CAAA;AAAA,EACH,CAAG,EAAA,CAAA;AACL,EAAA;AAoCO,MAAM,uBAAqD,GAAA;AAAA,EAChE,OAAO,EAAC;AACV,EAAA;AAyGO,MAAM,0BAAkD,GAAA,CAAA,WAAA;AAqGxD,MAAMC,cAA+B,GAAA;AAAA,EAC1C,OAAO,EAAC;AAAA,EACR,eAAiB,EAAA,GAAA;AAAA,EACjB,MAAM,EAAC;AAAA,EACP,SAAS,EAAC;AAAA,EACV,YAAY,EAAC;AAAA,EACb,aAAa,EAAC;AAAA,EACd,iBAAiB,EAAC;AAAA,EAClB,WAAa,EAAA,KAAA;AACf,CAAA,CAAA;AAaO,MAAMC,0BAAuD,GAAA;AAAA,EAClE,WAAW,EAAC;AACd,CAAA,CAAA;AAOO,MAAM,oBAA+C,GAAA;AAAA,EAC1D,EAAI,EAAA,EAAA;AACN,EAAA;AAqEO,MAAMC,oBAA2C,GAAA;AAAA,EACtD,OAAO,EAAC;AAAA,EACR,UAAU,EAAC;AACb,CAAA,CAAA;AA6BO,MAAM,eAAqC,GAAA;AAAA,EAChD,SAAW,EAAA,KAAA;AAAA,EACX,QAAQ,EAAC;AACX,EAAA;AAwHO,MAAMC,kBAAuC,GAAA;AAAA,EAClD,QAAU,EAAA,IAAA;AAAA,EACV,YAAc,EAAA,CAAA;AAAA,EACd,OAAO,EAAC;AAAA,EACR,QAAQ,EAAC;AAAA,EACT,aAAe,EAAA,EAAA;AAAA,EACf,KAAO,EAAA,MAAA;AAAA,EACP,MAAM,EAAC;AAAA,EACP,QAAU,EAAA,SAAA;AACZ,CAAA;;ACtpBO,MAAM,mBAAuCC,mBAAI;AACjD,MAAM,eAA+BC,eAAI;AACzC,MAAM,qBAA2CC,qBAAI;AACrD,MAAM,2BAAuDC;;ACsB7D,MAAM,eAAqC,GAAA;AAAA,EAChD,QAAU,EAAA,IAAA;AAAA,EACV,OAAO,EAAC;AACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}