{"version":3,"file":"ColorPickerInput.js","sources":["../../../../src/components/ColorPicker/ColorPickerInput.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useState, forwardRef } from 'react';\nimport { RgbaStringColorPicker } from 'react-colorful';\nimport { useThrottleFn } from 'react-use';\n\nimport { colorManipulator, GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2, useTheme2 } from '../../themes';\nimport { ClickOutsideWrapper } from '../ClickOutsideWrapper/ClickOutsideWrapper';\nimport { Props as InputProps } from '../Input/Input';\n\nimport ColorInput from './ColorInput';\nimport { getStyles as getPaletteStyles } from './SpectrumPalette';\n\nexport interface ColorPickerInputProps extends Omit<InputProps, 'value' | 'onChange'> {\n  value?: string;\n  onChange: (color: string) => void;\n  /** Format for returning the color in onChange callback, defaults to 'rgb' */\n  returnColorAs?: 'rgb' | 'hex';\n}\n\nexport const ColorPickerInput = forwardRef<HTMLInputElement, ColorPickerInputProps>(\n  ({ value = '', onChange, returnColorAs = 'rgb', ...inputProps }, ref) => {\n    const [currentColor, setColor] = useState(value);\n    const [isOpen, setIsOpen] = useState(false);\n    const theme = useTheme2();\n    const styles = useStyles2(getStyles);\n    const paletteStyles = useStyles2(getPaletteStyles);\n\n    useThrottleFn(\n      (c) => {\n        if (c === value) {\n          return;\n        }\n        // Default to an empty string if no color value is available\n        if (!c) {\n          onChange('');\n          return;\n        }\n        const color = theme.visualization.getColorByName(c);\n        if (returnColorAs === 'rgb') {\n          onChange(colorManipulator.asRgbString(color));\n        } else {\n          onChange(colorManipulator.asHexString(color));\n        }\n      },\n      500,\n      [currentColor]\n    );\n\n    return (\n      <ClickOutsideWrapper onClick={() => setIsOpen(false)}>\n        <div className={styles.wrapper}>\n          {isOpen && !inputProps.disabled && (\n            <RgbaStringColorPicker\n              data-testid={'color-popover'}\n              color={currentColor}\n              onChange={setColor}\n              className={cx(paletteStyles.root, styles.picker)}\n            />\n          )}\n          <div onClick={() => setIsOpen(true)}>\n            <ColorInput {...inputProps} theme={theme} color={currentColor} onChange={setColor} ref={ref} isClearable />\n          </div>\n        </div>\n      </ClickOutsideWrapper>\n    );\n  }\n);\n\nColorPickerInput.displayName = 'ColorPickerInput';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      position: relative;\n    `,\n    picker: css`\n      &.react-colorful {\n        position: absolute;\n        width: 100%;\n        z-index: 11;\n        bottom: 36px;\n      }\n    `,\n    inner: css`\n      position: absolute;\n    `,\n  };\n};\n"],"names":["getPaletteStyles","React"],"mappings":"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"}