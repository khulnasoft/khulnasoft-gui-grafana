{"version":3,"file":"DateTimePicker.js","sources":["../../../../../src/components/DateTimePickers/DateTimePicker/DateTimePicker.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, FormEvent, ReactNode, useCallback, useEffect, useState } from 'react';\nimport Calendar from 'react-calendar';\nimport { useMedia } from 'react-use';\n\nimport { dateTimeFormat, DateTime, dateTime, GrafanaTheme2, isDateTime } from '@grafana/data';\n\nimport { Button, ClickOutsideWrapper, HorizontalGroup, Icon, InlineField, Input, Portal } from '../..';\nimport { useStyles2, useTheme2 } from '../../../themes';\nimport { getModalStyles } from '../../Modal/getModalStyles';\nimport { TimeOfDayPicker } from '../TimeOfDayPicker';\nimport { getBodyStyles } from '../TimeRangePicker/CalendarBody';\nimport { isValid } from '../utils';\n\nexport interface Props {\n  /** Input date for the component */\n  date?: DateTime;\n  /** Callback for returning the selected date */\n  onChange: (date: DateTime) => void;\n  /** label for the input field */\n  label?: ReactNode;\n  /** Set the latest selectable date */\n  maxDate?: Date;\n}\n\nconst stopPropagation = (event: React.MouseEvent<HTMLDivElement>) => event.stopPropagation();\n\nexport const DateTimePicker: FC<Props> = ({ date, maxDate, label, onChange }) => {\n  const [isOpen, setOpen] = useState(false);\n\n  const theme = useTheme2();\n  const { modalBackdrop } = getModalStyles(theme);\n  const isFullscreen = useMedia(`(min-width: ${theme.breakpoints.values.lg}px)`);\n  const styles = useStyles2(getStyles);\n\n  const onApply = useCallback(\n    (date: DateTime) => {\n      setOpen(false);\n      onChange(date);\n    },\n    [onChange]\n  );\n\n  const onOpen = useCallback(\n    (event: FormEvent<HTMLElement>) => {\n      event.preventDefault();\n      setOpen(true);\n    },\n    [setOpen]\n  );\n\n  return (\n    <div data-testid=\"date-time-picker\" style={{ position: 'relative' }}>\n      <DateTimeInput date={date} onChange={onChange} isFullscreen={isFullscreen} onOpen={onOpen} label={label} />\n      {isOpen ? (\n        isFullscreen ? (\n          <ClickOutsideWrapper onClick={() => setOpen(false)}>\n            <DateTimeCalendar\n              date={date}\n              onChange={onApply}\n              isFullscreen={true}\n              onClose={() => setOpen(false)}\n              maxDate={maxDate}\n            />\n          </ClickOutsideWrapper>\n        ) : (\n          <Portal>\n            <ClickOutsideWrapper onClick={() => setOpen(false)}>\n              <div className={styles.modal} onClick={stopPropagation}>\n                <DateTimeCalendar date={date} onChange={onApply} isFullscreen={false} onClose={() => setOpen(false)} />\n              </div>\n              <div className={modalBackdrop} onClick={stopPropagation} />\n            </ClickOutsideWrapper>\n          </Portal>\n        )\n      ) : null}\n    </div>\n  );\n};\n\ninterface DateTimeCalendarProps {\n  date?: DateTime;\n  onChange: (date: DateTime) => void;\n  onClose: () => void;\n  isFullscreen: boolean;\n  maxDate?: Date;\n}\n\ninterface InputProps {\n  label?: ReactNode;\n  date?: DateTime;\n  isFullscreen: boolean;\n  onChange: (date: DateTime) => void;\n  onOpen: (event: FormEvent<HTMLElement>) => void;\n}\n\ntype InputState = {\n  value: string;\n  invalid: boolean;\n};\n\nconst DateTimeInput: FC<InputProps> = ({ date, label, onChange, isFullscreen, onOpen }) => {\n  const [internalDate, setInternalDate] = useState<InputState>(() => {\n    return { value: date ? dateTimeFormat(date) : dateTimeFormat(dateTime()), invalid: false };\n  });\n\n  useEffect(() => {\n    if (date) {\n      setInternalDate({\n        invalid: !isValid(dateTimeFormat(date)),\n        value: isDateTime(date) ? dateTimeFormat(date) : date,\n      });\n    }\n  }, [date]);\n\n  const onChangeDate = useCallback((event: FormEvent<HTMLInputElement>) => {\n    const isInvalid = !isValid(event.currentTarget.value);\n    setInternalDate({\n      value: event.currentTarget.value,\n      invalid: isInvalid,\n    });\n  }, []);\n\n  const onFocus = useCallback(\n    (event: FormEvent<HTMLElement>) => {\n      if (!isFullscreen) {\n        return;\n      }\n      onOpen(event);\n    },\n    [isFullscreen, onOpen]\n  );\n\n  const onBlur = useCallback(() => {\n    if (isDateTime(internalDate.value)) {\n      onChange(dateTime(internalDate.value));\n    }\n  }, [internalDate.value, onChange]);\n\n  const icon = <Button aria-label=\"Time picker\" icon=\"calendar-alt\" variant=\"secondary\" onClick={onOpen} />;\n  return (\n    <InlineField\n      label={label}\n      onClick={stopPropagation}\n      invalid={!!(internalDate.value && internalDate.invalid)}\n      className={css`\n        margin-bottom: 0;\n      `}\n    >\n      <Input\n        onClick={stopPropagation}\n        onChange={onChangeDate}\n        addonAfter={icon}\n        value={internalDate.value}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        data-testid=\"date-time-input\"\n        placeholder=\"Select date/time\"\n      />\n    </InlineField>\n  );\n};\n\nconst DateTimeCalendar: FC<DateTimeCalendarProps> = ({ date, onClose, onChange, isFullscreen, maxDate }) => {\n  const calendarStyles = useStyles2(getBodyStyles);\n  const styles = useStyles2(getStyles);\n  const [internalDate, setInternalDate] = useState<Date>(() => {\n    if (date && date.isValid()) {\n      return date.toDate();\n    }\n\n    return new Date();\n  });\n\n  const onChangeDate = useCallback((date: Date | Date[]) => {\n    if (!Array.isArray(date)) {\n      setInternalDate((prevState) => {\n        // If we don't use time from prevState\n        // the time will be reset to 00:00:00\n        date.setHours(prevState.getHours());\n        date.setMinutes(prevState.getMinutes());\n        date.setSeconds(prevState.getSeconds());\n\n        return date;\n      });\n    }\n  }, []);\n\n  const onChangeTime = useCallback((date: DateTime) => {\n    setInternalDate(date.toDate());\n  }, []);\n\n  return (\n    <div className={cx(styles.container, { [styles.fullScreen]: isFullscreen })} onClick={stopPropagation}>\n      <Calendar\n        next2Label={null}\n        prev2Label={null}\n        value={internalDate}\n        nextLabel={<Icon name=\"angle-right\" />}\n        nextAriaLabel=\"Next month\"\n        prevLabel={<Icon name=\"angle-left\" />}\n        prevAriaLabel=\"Previous month\"\n        onChange={onChangeDate}\n        locale=\"en\"\n        className={calendarStyles.body}\n        tileClassName={calendarStyles.title}\n        maxDate={maxDate}\n      />\n      <div className={styles.time}>\n        <TimeOfDayPicker showSeconds={true} onChange={onChangeTime} value={dateTime(internalDate)} />\n      </div>\n      <HorizontalGroup>\n        <Button type=\"button\" onClick={() => onChange(dateTime(internalDate))}>\n          Apply\n        </Button>\n        <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    border: 1px ${theme.colors.border.weak} solid;\n    border-radius: ${theme.shape.borderRadius(1)};\n    background-color: ${theme.colors.background.primary};\n    z-index: ${theme.zIndex.modal};\n  `,\n  fullScreen: css`\n    position: absolute;\n  `,\n  time: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  modal: css`\n    position: fixed;\n    top: 25%;\n    left: 25%;\n    width: 100%;\n    z-index: ${theme.zIndex.modal};\n    max-width: 280px;\n  `,\n});\n"],"names":["date","React"],"mappings":"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"}