{"version":3,"file":"InlineField.js","sources":["../../../../src/components/Forms/InlineField.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes';\nimport { getChildId } from '../../utils/reactUtils';\nimport { PopoverContent } from '../Tooltip';\n\nimport { FieldProps } from './Field';\nimport { FieldValidationMessage } from './FieldValidationMessage';\nimport { InlineLabel } from './InlineLabel';\n\nexport interface Props extends Omit<FieldProps, 'css' | 'horizontal' | 'description' | 'error'> {\n  /** Content for the label's tooltip */\n  tooltip?: PopoverContent;\n  /** Custom width for the label as a multiple of 8px */\n  labelWidth?: number | 'auto';\n  /** Make the field's child to fill the width of the row. Equivalent to setting `flex-grow:1` on the field */\n  grow?: boolean;\n  /** Make the field's child shrink with width of the row. Equivalent to setting `flex-shrink:1` on the field */\n  shrink?: boolean;\n  /** Make field's background transparent */\n  transparent?: boolean;\n  /** Error message to display */\n  error?: string | null;\n  htmlFor?: string;\n  /** Make tooltip interactive */\n  interactive?: boolean;\n}\n\nexport const InlineField: FC<Props> = ({\n  children,\n  label,\n  tooltip,\n  labelWidth = 'auto',\n  invalid,\n  loading,\n  disabled,\n  required,\n  className,\n  htmlFor,\n  grow,\n  shrink,\n  error,\n  transparent,\n  interactive,\n  ...htmlProps\n}) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, grow, shrink);\n  const inputId = htmlFor ?? getChildId(children);\n\n  const labelElement =\n    typeof label === 'string' ? (\n      <InlineLabel\n        interactive={interactive}\n        width={labelWidth}\n        tooltip={tooltip}\n        htmlFor={inputId}\n        transparent={transparent}\n      >\n        {`${label}${required ? ' *' : ''}`}\n      </InlineLabel>\n    ) : (\n      label\n    );\n\n  return (\n    <div className={cx(styles.container, className)} {...htmlProps}>\n      {labelElement}\n      <div className={styles.childContainer}>\n        {React.cloneElement(children, { invalid, disabled, loading })}\n        {invalid && error && (\n          <div className={cx(styles.fieldValidationWrapper)}>\n            <FieldValidationMessage>{error}</FieldValidationMessage>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nInlineField.displayName = 'InlineField';\n\nconst getStyles = (theme: GrafanaTheme2, grow?: boolean, shrink?: boolean) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n      margin: 0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0;\n    `,\n    childContainer: css`\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n    `,\n    fieldValidationWrapper: css`\n      margin-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n"],"names":["React"],"mappings":"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"}