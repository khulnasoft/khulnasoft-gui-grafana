{"version":3,"file":"FeatureInfoBox.js","sources":["../../../../src/components/InfoBox/FeatureInfoBox.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { FeatureState, GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { Badge, BadgeProps } from '../Badge/Badge';\n\nimport { InfoBox, InfoBoxProps } from './InfoBox';\n\nexport interface FeatureInfoBoxProps extends Omit<InfoBoxProps, 'title' | 'urlTitle'> {\n  title: string;\n  featureState?: FeatureState;\n}\n\n/** @deprecated use Alert with severity info */\nexport const FeatureInfoBox = React.memo(\n  React.forwardRef<HTMLDivElement, FeatureInfoBoxProps>(({ title, featureState, ...otherProps }, ref) => {\n    const styles = useStyles2(getFeatureInfoBoxStyles);\n\n    const titleEl = featureState ? (\n      <>\n        <div className={styles.badge}>\n          <FeatureBadge featureState={featureState} />\n        </div>\n        <h3>{title}</h3>\n      </>\n    ) : (\n      <h3>{title}</h3>\n    );\n    return <InfoBox branded title={titleEl} urlTitle=\"Read documentation\" ref={ref} {...otherProps} />;\n  })\n);\n\nFeatureInfoBox.displayName = 'FeatureInfoBox';\n\nconst getFeatureInfoBoxStyles = (theme: GrafanaTheme2) => {\n  return {\n    badge: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\ninterface FeatureBadgeProps {\n  featureState: FeatureState;\n  tooltip?: string;\n}\n\nexport const FeatureBadge: React.FC<FeatureBadgeProps> = ({ featureState, tooltip }) => {\n  const display = getPanelStateBadgeDisplayModel(featureState);\n  return <Badge text={display.text} color={display.color} icon={display.icon} tooltip={tooltip} />;\n};\n\nfunction getPanelStateBadgeDisplayModel(featureState: FeatureState): BadgeProps {\n  switch (featureState) {\n    case FeatureState.alpha:\n      return {\n        text: 'Alpha',\n        icon: 'exclamation-triangle',\n        color: 'orange',\n      };\n  }\n\n  return {\n    text: 'Beta',\n    icon: 'rocket',\n    color: 'blue',\n  };\n}\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO,MAAM,iBAAiBA,cAAM,CAAA,IAAA;AAAA,EAClCA,cAAM,CAAA,UAAA,CAAgD,CAAC,EAAA,EAAwC,GAAQ,KAAA;AAAhD,IAAA,IAAA,EAAA,GAAA,EAAA,EAAE,SAAO,YAjBlE,EAAA,GAiByD,IAA0B,UAA1B,GAAA,SAAA,CAAA,EAAA,EAA0B,CAAxB,OAAO,EAAA,cAAA,CAAA,CAAA,CAAA;AAC9D,IAAM,MAAA,MAAA,GAAS,WAAW,uBAAuB,CAAA,CAAA;AAEjD,IAAM,MAAA,OAAA,GAAU,YACd,mBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBACGA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAI,WAAW,MAAO,CAAA,KAAA;AAAA,KAAA,kBACpBA,cAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAA,MAAa,YAAA;AAAA,KAA4B,CAC5C,mBACCA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAI,KAAM,CACb,CAAA,mBAECA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAI,KAAM,CAAA,CAAA;AAEb,IAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,OAAA,EAAA,cAAA,CAAA;AAAA,MAAQ,OAAO,EAAA,IAAA;AAAA,MAAC,KAAO,EAAA,OAAA;AAAA,MAAS,QAAS,EAAA,oBAAA;AAAA,MAAqB,GAAA;AAAA,KAAA,EAAc,UAAY,CAAA,CAAA,CAAA;AAAA,GACjG,CAAA;AACH,EAAA;AAEA,cAAA,CAAe,WAAc,GAAA,gBAAA,CAAA;AAE7B,MAAM,uBAAA,GAA0B,CAAC,KAAyB,KAAA;AACxD,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,GAAA,CAAA;AAAA,qBACY,EAAA,KAAA,CAAM,QAAQ,CAAC,CAAA,CAAA;AAAA,IAAA,CAAA;AAAA,GAEpC,CAAA;AACF,CAAA,CAAA;AAOO,MAAM,YAA4C,GAAA,CAAC,EAAE,YAAA,EAAc,SAAc,KAAA;AACtF,EAAM,MAAA,OAAA,GAAU,+BAA+B,YAAY,CAAA,CAAA;AAC3D,EAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAM,MAAM,OAAQ,CAAA,IAAA;AAAA,IAAM,OAAO,OAAQ,CAAA,KAAA;AAAA,IAAO,MAAM,OAAQ,CAAA,IAAA;AAAA,IAAM,OAAA;AAAA,GAAkB,CAAA,CAAA;AAChG,EAAA;AAEA,SAAS,+BAA+B,YAAwC,EAAA;AAC9E,EAAA,QAAQ,YAAc;AAAA,IACpB,KAAK,YAAa,CAAA,KAAA;AAChB,MAAO,OAAA;AAAA,QACL,IAAM,EAAA,OAAA;AAAA,QACN,IAAM,EAAA,sBAAA;AAAA,QACN,KAAO,EAAA,QAAA;AAAA,OACT,CAAA;AAAA,GACJ;AAEA,EAAO,OAAA;AAAA,IACL,IAAM,EAAA,MAAA;AAAA,IACN,IAAM,EAAA,QAAA;AAAA,IACN,KAAO,EAAA,MAAA;AAAA,GACT,CAAA;AACF;;;;"}