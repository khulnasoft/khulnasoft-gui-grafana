{"version":3,"file":"LogRowContextProvider.js","sources":["../../../../src/components/Logs/LogRowContextProvider.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport {\n  LogRowModel,\n  toDataFrame,\n  Field,\n  FieldCache,\n  LogsSortOrder,\n  DataQueryResponse,\n  DataQueryError,\n} from '@grafana/data';\n\n/** @deprecated will be removed in the next major version */\nexport interface RowContextOptions {\n  direction?: 'BACKWARD' | 'FORWARD';\n  limit?: number;\n}\n\n/** @deprecated will be removed in the next major version */\nexport interface LogRowContextRows {\n  before?: string[];\n  after?: string[];\n}\n\n/** @deprecated will be removed in the next major version */\nexport interface LogRowContextQueryErrors {\n  before?: string;\n  after?: string;\n}\n\n/** @deprecated will be removed in the next major version */\nexport interface HasMoreContextRows {\n  before: boolean;\n  after: boolean;\n}\n\ninterface ResultType {\n  data: string[][];\n  errors: string[];\n}\n\ninterface LogRowContextProviderProps {\n  row: LogRowModel;\n  logsSortOrder?: LogsSortOrder | null;\n  getRowContext: (row: LogRowModel, options?: RowContextOptions) => Promise<DataQueryResponse>;\n  children: (props: {\n    result: LogRowContextRows;\n    errors: LogRowContextQueryErrors;\n    hasMoreContextRows: HasMoreContextRows;\n    updateLimit: () => void;\n    limit: number;\n  }) => JSX.Element;\n}\n\n/** @deprecated will be removed in the next major version */\nexport const getRowContexts = async (\n  getRowContext: (row: LogRowModel, options?: RowContextOptions) => Promise<DataQueryResponse>,\n  row: LogRowModel,\n  limit: number,\n  logsSortOrder?: LogsSortOrder | null\n) => {\n  const promises = [\n    getRowContext(row, {\n      limit,\n    }),\n    getRowContext(row, {\n      // The start time is inclusive so we will get the one row we are using as context entry\n      limit: limit + 1,\n      direction: 'FORWARD',\n    }),\n  ];\n\n  const results: Array<DataQueryResponse | DataQueryError> = await Promise.all(promises.map((p) => p.catch((e) => e)));\n\n  const data = results.map((result) => {\n    const dataResult: DataQueryResponse = result as DataQueryResponse;\n    if (!dataResult.data) {\n      return [];\n    }\n\n    const data = [];\n    for (let index = 0; index < dataResult.data.length; index++) {\n      const dataFrame = toDataFrame(dataResult.data[index]);\n      const fieldCache = new FieldCache(dataFrame);\n      const timestampField: Field<string> = fieldCache.getFieldByName('ts')!;\n      const idField: Field<string> | undefined = fieldCache.getFieldByName('id');\n\n      for (let fieldIndex = 0; fieldIndex < timestampField.values.length; fieldIndex++) {\n        // TODO: this filtering is datasource dependant so it will make sense to move it there so the API is\n        //  to return correct list of lines handling inclusive ranges or how to filter the correct line on the\n        //  datasource.\n\n        // Filter out the row that is the one used as a focal point for the context as we will get it in one of the\n        // requests.\n        if (idField) {\n          // For Loki this means we filter only the one row. Issue is we could have other rows logged at the same\n          // ns which came before but they come in the response that search for logs after. This means right now\n          // we will show those as if they came after. This is not strictly correct but seems better than losing them\n          // and making this correct would mean quite a bit of complexity to shuffle things around and messing up\n          //counts.\n          if (idField.values.get(fieldIndex) === row.uid) {\n            continue;\n          }\n        } else {\n          // Fallback to timestamp. This should not happen right now as this feature is implemented only for loki\n          // and that has ID. Later this branch could be used in other DS but mind that this could also filter out\n          // logs which were logged in the same timestamp and that can be a problem depending on the precision.\n          if (parseInt(timestampField.values.get(fieldIndex), 10) === row.timeEpochMs) {\n            continue;\n          }\n        }\n\n        const lineField: Field<string> = dataFrame.fields.filter((field) => field.name === 'line')[0];\n        const line = lineField.values.get(fieldIndex); // assuming that both fields have same length\n\n        data.push(line);\n      }\n    }\n\n    return logsSortOrder === LogsSortOrder.Ascending ? data.reverse() : data;\n  });\n\n  const errors = results.map((result) => {\n    const errorResult: DataQueryError = result as DataQueryError;\n    if (!errorResult.message) {\n      return '';\n    }\n\n    return errorResult.message;\n  });\n\n  return {\n    data: logsSortOrder === LogsSortOrder.Ascending ? data.reverse() : data,\n    errors: logsSortOrder === LogsSortOrder.Ascending ? errors.reverse() : errors,\n  };\n};\n\n/** @deprecated will be removed in the next major version */\nexport const LogRowContextProvider: React.FunctionComponent<LogRowContextProviderProps> = ({\n  getRowContext,\n  row,\n  children,\n  logsSortOrder,\n}) => {\n  // React Hook that creates a number state value called limit to component state and a setter function called setLimit\n  // The initial value for limit is 10\n  // Used for the number of rows to retrieve from backend from a specific point in time\n  const [limit, setLimit] = useState(10);\n\n  // React Hook that creates an object state value called result to component state and a setter function called setResult\n  // The initial value for result is null\n  // Used for sorting the response from backend\n  const [result, setResult] = useState<ResultType | null>(null);\n\n  // React Hook that creates an object state value called hasMoreContextRows to component state and a setter function called setHasMoreContextRows\n  // The initial value for hasMoreContextRows is {before: true, after: true}\n  // Used for indicating in UI if there are more rows to load in a given direction\n  const [hasMoreContextRows, setHasMoreContextRows] = useState({\n    before: true,\n    after: true,\n  });\n\n  // React Hook that resolves two promises every time the limit prop changes\n  // First promise fetches limit number of rows backwards in time from a specific point in time\n  // Second promise fetches limit number of rows forwards in time from a specific point in time\n  const { value } = useAsync(async () => {\n    return await getRowContexts(getRowContext, row, limit, logsSortOrder); // Moved it to a separate function for debugging purposes\n  }, [limit]);\n\n  // React Hook that performs a side effect every time the value (from useAsync hook) prop changes\n  // The side effect changes the result state with the response from the useAsync hook\n  // The side effect changes the hasMoreContextRows state if there are more context rows before or after the current result\n  useEffect(() => {\n    if (value) {\n      setResult((currentResult) => {\n        let hasMoreLogsBefore = true,\n          hasMoreLogsAfter = true;\n\n        if (currentResult) {\n          const currentResultBefore = currentResult.data[0];\n          const currentResultAfter = currentResult.data[1];\n          const valueBefore = value.data[0];\n          const valueAfter = value.data[1];\n\n          // checks if there are more log rows in a given direction\n          // if after fetching additional rows the length of result is the same,\n          // we can assume there are no logs in that direction within a given time range\n          if (!valueBefore || currentResultBefore.length === valueBefore.length) {\n            hasMoreLogsBefore = false;\n          }\n\n          if (!valueAfter || currentResultAfter.length === valueAfter.length) {\n            hasMoreLogsAfter = false;\n          }\n        }\n\n        setHasMoreContextRows({\n          before: hasMoreLogsBefore,\n          after: hasMoreLogsAfter,\n        });\n\n        return value;\n      });\n    }\n  }, [value]);\n\n  return children({\n    result: {\n      before: result ? result.data[0] : [],\n      after: result ? result.data[1] : [],\n    },\n    errors: {\n      before: result ? result.errors[0] : undefined,\n      after: result ? result.errors[1] : undefined,\n    },\n    hasMoreContextRows,\n    updateLimit: () => setLimit(limit + 10),\n    limit,\n  });\n};\n"],"names":["data"],"mappings":"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"}