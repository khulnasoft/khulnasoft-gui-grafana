import { css } from '@emotion/css';
import React__default from 'react';
import { useTheme2, useStyles2 } from '../../themes/ThemeContext.js';
import '@grafana/data';
import 'memoize-one';
import '@emotion/react';
import 'tinycolor2';

const PanelChrome = ({
  title = "",
  children,
  width,
  height,
  padding = "md",
  leftItems = []
}) => {
  const theme = useTheme2();
  const styles = useStyles2(getStyles);
  const headerHeight = getHeaderHeight(theme, title, leftItems);
  const { contentStyle, innerWidth, innerHeight } = getContentStyle(padding, theme, width, headerHeight, height);
  const headerStyles = {
    height: headerHeight
  };
  const containerStyles = { width, height };
  return /* @__PURE__ */ React__default.createElement("div", {
    className: styles.container,
    style: containerStyles
  }, /* @__PURE__ */ React__default.createElement("div", {
    className: styles.header,
    style: headerStyles
  }, /* @__PURE__ */ React__default.createElement("div", {
    className: styles.headerTitle
  }, title), itemsRenderer(leftItems, (items) => {
    return /* @__PURE__ */ React__default.createElement("div", {
      className: styles.leftItems
    }, items);
  })), /* @__PURE__ */ React__default.createElement("div", {
    className: styles.content,
    style: contentStyle
  }, children(innerWidth, innerHeight)));
};
const itemsRenderer = (items, renderer) => {
  const toRender = React__default.Children.toArray(items).filter(Boolean);
  return toRender.length > 0 ? renderer(toRender) : null;
};
const getHeaderHeight = (theme, title, items) => {
  if (title.length > 0 || items.length > 0) {
    return theme.spacing.gridSize * theme.components.panel.headerHeight;
  }
  return 0;
};
const getContentStyle = (padding, theme, width, headerHeight, height) => {
  const chromePadding = (padding === "md" ? theme.components.panel.padding : 0) * theme.spacing.gridSize;
  const panelBorder = 1 * 2;
  const innerWidth = width - chromePadding * 2 - panelBorder;
  const innerHeight = height - headerHeight - chromePadding * 2 - panelBorder;
  const contentStyle = {
    padding: chromePadding
  };
  return { contentStyle, innerWidth, innerHeight };
};
const getStyles = (theme) => {
  const { padding, background, borderColor } = theme.components.panel;
  return {
    container: css`
      label: panel-container;
      background-color: ${background};
      border: 1px solid ${borderColor};
      position: relative;
      border-radius: 3px;
      height: 100%;
      display: flex;
      flex-direction: column;
      flex: 0 0 0;
    `,
    content: css`
      label: panel-content;
      width: 100%;
      flex-grow: 1;
    `,
    header: css`
      label: panel-header;
      display: flex;
      align-items: center;
    `,
    headerTitle: css`
      label: panel-header;
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
      padding-left: ${theme.spacing(padding)};
      flex-grow: 1;
      font-weight: ${theme.typography.fontWeightMedium};
    `,
    leftItems: css`
      display: flex;
      padding-right: ${theme.spacing(padding)};
    `
  };
};

export { PanelChrome };
//# sourceMappingURL=PanelChrome.js.map
