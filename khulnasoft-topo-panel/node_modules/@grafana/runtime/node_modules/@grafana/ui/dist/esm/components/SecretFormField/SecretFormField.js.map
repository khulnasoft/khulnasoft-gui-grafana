{"version":3,"file":"SecretFormField.js","sources":["../../../../src/components/SecretFormField/SecretFormField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { omit } from 'lodash';\nimport React, { InputHTMLAttributes, FunctionComponent } from 'react';\n\nimport { Button } from '../Button/Button';\nimport { FormField } from '../FormField/FormField';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onReset'> {\n  // Function to use when reset is clicked. Means you have to reset the input value yourself as this is  uncontrolled\n  // component (or do something else if required).\n  onReset: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  isConfigured: boolean;\n\n  label?: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  inputWidth?: number;\n  // Placeholder of the input field when in non configured state.\n  placeholder?: string;\n  interactive?: boolean;\n}\n\nconst getSecretFormFieldStyles = () => {\n  return {\n    noRadiusInput: css`\n      border-bottom-right-radius: 0 !important;\n      border-top-right-radius: 0 !important;\n    `,\n    noRadiusButton: css`\n      border-bottom-left-radius: 0 !important;\n      border-top-left-radius: 0 !important;\n    `,\n  };\n};\n/**\n * Form field that has 2 states configured and not configured. If configured it will not show its contents and adds\n * a reset button that will clear the input and makes it accessible. In non configured state it behaves like normal\n * form field. This is used for passwords or anything that is encrypted on the server and is later returned encrypted\n * to the user (like datasource passwords).\n */\nexport const SecretFormField: FunctionComponent<Props> = ({\n  label = 'Password',\n  labelWidth,\n  inputWidth = 12,\n  onReset,\n  isConfigured,\n  tooltip,\n  placeholder = 'Password',\n  interactive,\n  ...inputProps\n}: Props) => {\n  const styles = getSecretFormFieldStyles();\n  return (\n    <FormField\n      label={label!}\n      tooltip={tooltip}\n      interactive={interactive}\n      labelWidth={labelWidth}\n      inputEl={\n        isConfigured ? (\n          <>\n            <input\n              type=\"text\"\n              className={cx(`gf-form-input width-${inputWidth}`, styles.noRadiusInput)}\n              disabled={true}\n              value=\"configured\"\n              {...omit(inputProps, 'value')}\n            />\n            <Button onClick={onReset} variant=\"secondary\" type=\"button\">\n              Reset\n            </Button>\n          </>\n        ) : (\n          <input\n            type=\"password\"\n            className={`gf-form-input width-${inputWidth}`}\n            placeholder={placeholder}\n            {...inputProps}\n          />\n        )\n      }\n    />\n  );\n};\n\nSecretFormField.displayName = 'SecretFormField';\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAM,2BAA2B,MAAM;AACrC,EAAO,OAAA;AAAA,IACL,aAAe,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,IAIf,cAAgB,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,GAIlB,CAAA;AACF,CAAA,CAAA;AAOa,MAAA,eAAA,GAA4C,CAAC,EAU7C,KAAA;AAV6C,EACxD,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,IAAQ,KAAA,GAAA,UAAA;AAAA,IACR,UAAA;AAAA,IACA,UAAa,GAAA,EAAA;AAAA,IACb,OAAA;AAAA,IACA,YAAA;AAAA,IACA,OAAA;AAAA,IACA,WAAc,GAAA,UAAA;AAAA,IACd,WAAA;AAAA,GAjDF,GAyC0D,EASrD,EAAA,UAAA,GAAA,SAAA,CATqD,EASrD,EAAA;AAAA,IARH,OAAA;AAAA,IACA,YAAA;AAAA,IACA,YAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAA;AAAA,IACA,aAAA;AAAA,IACA,aAAA;AAAA,GAAA,CAAA,CAAA;AAGA,EAAA,MAAM,SAAS,wBAAyB,EAAA,CAAA;AACxC,EAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAA,IACC,KAAA;AAAA,IACA,OAAA;AAAA,IACA,WAAA;AAAA,IACA,UAAA;AAAA,IACA,OAAA,EACE,YACE,mBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBACGA,cAAA,CAAA,aAAA,CAAA,OAAA,EAAA,cAAA,CAAA;AAAA,MACC,IAAK,EAAA,MAAA;AAAA,MACL,SAAW,EAAA,EAAA,CAAG,CAAuB,oBAAA,EAAA,UAAA,CAAA,CAAA,EAAc,OAAO,aAAa,CAAA;AAAA,MACvE,QAAU,EAAA,IAAA;AAAA,MACV,KAAM,EAAA,YAAA;AAAA,KAAA,EACF,IAAK,CAAA,UAAA,EAAY,OAAO,CAAA,CAC9B,mBACCA,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,MAAO,OAAS,EAAA,OAAA;AAAA,MAAS,OAAQ,EAAA,WAAA;AAAA,MAAY,IAAK,EAAA,QAAA;AAAA,KAAS,EAAA,OAE5D,CACF,CAAA,mBAECA,cAAA,CAAA,aAAA,CAAA,OAAA,EAAA,cAAA,CAAA;AAAA,MACC,IAAK,EAAA,UAAA;AAAA,MACL,WAAW,CAAuB,oBAAA,EAAA,UAAA,CAAA,CAAA;AAAA,MAClC,WAAA;AAAA,KAAA,EACI,UACN,CAAA,CAAA;AAAA,GAGN,CAAA,CAAA;AAEJ,EAAA;AAEA,eAAA,CAAgB,WAAc,GAAA,iBAAA;;;;"}