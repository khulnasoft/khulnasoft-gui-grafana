{"version":3,"file":"SecretInput.js","sources":["../../../../src/components/SecretInput/SecretInput.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button } from '../Button';\nimport { Input } from '../Input/Input';\nimport { HorizontalGroup } from '../Layout/Layout';\n\nexport type Props = React.ComponentProps<typeof Input> & {\n  /** TRUE if the secret was already configured. (It is needed as often the backend doesn't send back the actual secret, only the information that it was configured) */\n  isConfigured: boolean;\n  /** Called when the user clicks on the \"Reset\" button in order to clear the secret */\n  onReset: () => void;\n};\n\nexport const CONFIGURED_TEXT = 'configured';\nexport const RESET_BUTTON_TEXT = 'Reset';\n\nexport const SecretInput = ({ isConfigured, onReset, ...props }: Props) => (\n  <HorizontalGroup>\n    {!isConfigured && <Input {...props} type=\"password\" />}\n    {isConfigured && <Input {...props} type=\"text\" disabled={true} value={CONFIGURED_TEXT} />}\n    {isConfigured && (\n      <Button onClick={onReset} variant=\"secondary\">\n        {RESET_BUTTON_TEXT}\n      </Button>\n    )}\n  </HorizontalGroup>\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaO,MAAM,eAAkB,GAAA,aAAA;AACxB,MAAM,iBAAoB,GAAA,QAAA;AAEpB,MAAA,WAAA,GAAc,CAAC,EAA4C,KAAA;AAA5C,EAAA,IAAA,EAAA,GAAA,EAAA,EAAE,gBAAc,OAhB5C,EAAA,GAgB4B,IAA4B,KAA5B,GAAA,SAAA,CAAA,EAAA,EAA4B,CAA1B,cAAc,EAAA,SAAA,CAAA,CAAA,CAAA;AAC1C,EAAA,uBAAA,KAAA,CAAA,aAAA,CAAC,eACE,EAAA,IAAA,EAAA,CAAC,YAAgB,oBAAA,KAAA,CAAA,aAAA,CAAC,wCAAU,KAAV,CAAA,EAAA;AAAA,IAAiB,IAAK,EAAA,UAAA;AAAA,GAAA,CAAW,CACnD,EAAA,YAAA,oBAAiB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAU,KAAV,CAAA,EAAA;AAAA,IAAiB,IAAK,EAAA,MAAA;AAAA,IAAO,QAAU,EAAA,IAAA;AAAA,IAAM,KAAO,EAAA,eAAA;AAAA,GAAiB,CAAA,CAAA,EACtF,gCACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAA,IAAO,OAAS,EAAA,OAAA;AAAA,IAAS,OAAQ,EAAA,WAAA;AAAA,GAAA,EAC/B,iBACH,CAEJ,CAAA,CAAA;AAAA;;;;"}