{"version":3,"file":"Segment.js","sources":["../../../../src/components/Segment/Segment.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { isObject } from 'lodash';\nimport React, { HTMLProps } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineLabel } from '../Forms/InlineLabel';\n\nimport { getSegmentStyles } from './styles';\n\nimport { SegmentSelect, useExpandableLabel, SegmentProps } from './';\n\nexport interface SegmentSyncProps<T> extends SegmentProps<T>, Omit<HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  value?: T | SelectableValue<T>;\n  onChange: (item: SelectableValue<T>) => void;\n  options: Array<SelectableValue<T>>;\n  inputMinWidth?: number;\n}\n\nexport function Segment<T>({\n  options,\n  value,\n  onChange,\n  Component,\n  className,\n  allowCustomValue,\n  allowEmptyValue,\n  placeholder,\n  disabled,\n  inputMinWidth,\n  inputPlaceholder,\n  onExpandedChange,\n  autofocus = false,\n  ...rest\n}: React.PropsWithChildren<SegmentSyncProps<T>>) {\n  const [Label, labelWidth, expanded, setExpanded] = useExpandableLabel(autofocus, onExpandedChange);\n  const width = inputMinWidth ? Math.max(inputMinWidth, labelWidth) : labelWidth;\n  const styles = useStyles2(getSegmentStyles);\n\n  if (!expanded) {\n    const label = isObject(value) ? value.label : value;\n\n    return (\n      <Label\n        disabled={disabled}\n        Component={\n          Component || (\n            <InlineLabel\n              className={cx(\n                styles.segment,\n                {\n                  [styles.queryPlaceholder]: placeholder !== undefined && !value,\n                  [styles.disabled]: disabled,\n                },\n                className\n              )}\n            >\n              {label || placeholder}\n            </InlineLabel>\n          )\n        }\n      />\n    );\n  }\n\n  return (\n    <SegmentSelect\n      {...rest}\n      value={value && !isObject(value) ? { value } : value}\n      placeholder={inputPlaceholder}\n      options={options}\n      width={width}\n      onClickOutside={() => setExpanded(false)}\n      allowCustomValue={allowCustomValue}\n      allowEmptyValue={allowEmptyValue}\n      onChange={(item) => {\n        setExpanded(false);\n        onChange(item);\n      }}\n    />\n  );\n}\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBO,SAAS,QAAW,EAesB,EAAA;AAftB,EACzB,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,IAAA,OAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAA;AAAA,IACA,gBAAA;AAAA,IACA,eAAA;AAAA,IACA,WAAA;AAAA,IACA,QAAA;AAAA,IACA,aAAA;AAAA,IACA,gBAAA;AAAA,IACA,gBAAA;AAAA,IACA,SAAY,GAAA,KAAA;AAAA,GAjCd,GAoB2B,EActB,EAAA,IAAA,GAAA,SAAA,CAdsB,EActB,EAAA;AAAA,IAbH,SAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA;AAAA,IACA,WAAA;AAAA,IACA,WAAA;AAAA,IACA,kBAAA;AAAA,IACA,iBAAA;AAAA,IACA,aAAA;AAAA,IACA,UAAA;AAAA,IACA,eAAA;AAAA,IACA,kBAAA;AAAA,IACA,kBAAA;AAAA,IACA,WAAA;AAAA,GAAA,CAAA,CAAA;AAGA,EAAM,MAAA,CAAC,OAAO,UAAY,EAAA,QAAA,EAAU,WAAW,CAAI,GAAA,kBAAA,CAAmB,WAAW,gBAAgB,CAAA,CAAA;AACjG,EAAA,MAAM,QAAQ,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,aAAA,EAAe,UAAU,CAAI,GAAA,UAAA,CAAA;AACpE,EAAM,MAAA,MAAA,GAAS,WAAW,gBAAgB,CAAA,CAAA;AAE1C,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAA,MAAM,KAAQ,GAAA,QAAA,CAAS,KAAK,CAAA,GAAI,MAAM,KAAQ,GAAA,KAAA,CAAA;AAE9C,IAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MACC,QAAA;AAAA,MACA,SAAA,EACE,6BACGA,cAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,QACC,SAAW,EAAA,EAAA;AAAA,UACT,MAAO,CAAA,OAAA;AAAA,UACP;AAAA,YACE,CAAC,MAAA,CAAO,gBAAmB,GAAA,WAAA,KAAgB,UAAa,CAAC,KAAA;AAAA,YACzD,CAAC,OAAO,QAAW,GAAA,QAAA;AAAA,WACrB;AAAA,UACA,SAAA;AAAA,SACF;AAAA,OAAA,EAEC,SAAS,WACZ,CAAA;AAAA,KAGN,CAAA,CAAA;AAAA,GAEJ;AAEA,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,gDACK,IADL,CAAA,EAAA;AAAA,IAEC,KAAA,EAAO,SAAS,CAAC,QAAA,CAAS,KAAK,CAAI,GAAA,EAAE,OAAU,GAAA,KAAA;AAAA,IAC/C,WAAa,EAAA,gBAAA;AAAA,IACb,OAAA;AAAA,IACA,KAAA;AAAA,IACA,cAAA,EAAgB,MAAM,WAAA,CAAY,KAAK,CAAA;AAAA,IACvC,gBAAA;AAAA,IACA,eAAA;AAAA,IACA,QAAA,EAAU,CAAC,IAAS,KAAA;AAClB,MAAA,WAAA,CAAY,KAAK,CAAA,CAAA;AACjB,MAAA,QAAA,CAAS,IAAI,CAAA,CAAA;AAAA,KACf;AAAA,GACF,CAAA,CAAA,CAAA;AAEJ;;;;"}