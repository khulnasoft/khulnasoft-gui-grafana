import { cx } from '@emotion/css';
import React__default from 'react';
import tinycolor from 'tinycolor2';
import { formattedValueToString } from '@grafana/data';
import '../../utils/dom.js';
import { getTextColorForAlphaBackground } from '../../utils/colors.js';
import 'slate';
import { getCellLinks } from '../../utils/table.js';
import 'lodash';
import 'ansicolor';
import '../../utils/logger.js';
import { DataLinksContextMenu } from '../DataLinks/DataLinksContextMenu.js';
import { CellActions } from './CellActions.js';
import { TableCellDisplayMode } from '@grafana/schema';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const DefaultCell = (props) => {
  var _a, _b;
  const { field, cell, tableStyles, row, cellProps } = props;
  const inspectEnabled = Boolean((_a = field.config.custom) == null ? void 0 : _a.inspect);
  const displayValue = field.display(cell.value);
  let value;
  if (React__default.isValidElement(cell.value)) {
    value = cell.value;
  } else {
    value = formattedValueToString(displayValue);
  }
  const showFilters = field.config.filterable;
  const showActions = showFilters && cell.value !== void 0 || inspectEnabled;
  const cellStyle = getCellStyle(tableStyles, field, displayValue, inspectEnabled);
  const hasLinks = Boolean((_b = getCellLinks(field, row)) == null ? void 0 : _b.length);
  return /* @__PURE__ */ React__default.createElement("div", __spreadProps(__spreadValues({}, cellProps), {
    className: cellStyle
  }), !hasLinks && /* @__PURE__ */ React__default.createElement("div", {
    className: tableStyles.cellText
  }, value), hasLinks && /* @__PURE__ */ React__default.createElement(DataLinksContextMenu, {
    links: () => getCellLinks(field, row) || []
  }, (api) => {
    return /* @__PURE__ */ React__default.createElement("div", {
      onClick: api.openMenu,
      className: cx(tableStyles.cellLink, api.targetClassName)
    }, value);
  }), showActions && /* @__PURE__ */ React__default.createElement(CellActions, __spreadProps(__spreadValues({}, props), {
    previewMode: "text"
  })));
};
function getCellStyle(tableStyles, field, displayValue, disableOverflowOnHover = false) {
  var _a, _b, _c;
  if (((_a = field.config.custom) == null ? void 0 : _a.displayMode) === TableCellDisplayMode.ColorText) {
    return tableStyles.buildCellContainerStyle(displayValue.color, void 0, !disableOverflowOnHover);
  }
  if (((_b = field.config.custom) == null ? void 0 : _b.displayMode) === TableCellDisplayMode.ColorBackgroundSolid) {
    const bgColor = tinycolor(displayValue.color);
    const textColor = getTextColorForAlphaBackground(displayValue.color, tableStyles.theme.isDark);
    return tableStyles.buildCellContainerStyle(textColor, bgColor.toRgbString(), !disableOverflowOnHover);
  }
  if (((_c = field.config.custom) == null ? void 0 : _c.displayMode) === TableCellDisplayMode.ColorBackground) {
    const themeFactor = tableStyles.theme.isDark ? 1 : -0.7;
    const bgColor2 = tinycolor(displayValue.color).darken(10 * themeFactor).spin(5).toRgbString();
    const textColor = getTextColorForAlphaBackground(displayValue.color, tableStyles.theme.isDark);
    return tableStyles.buildCellContainerStyle(
      textColor,
      `linear-gradient(120deg, ${bgColor2}, ${displayValue.color})`,
      !disableOverflowOnHover
    );
  }
  return disableOverflowOnHover ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer;
}

export { DefaultCell };
//# sourceMappingURL=DefaultCell.js.map
