{"version":3,"file":"DefaultCell.js","sources":["../../../../src/components/Table/DefaultCell.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport React, { FC, ReactElement } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { DisplayValue, Field, formattedValueToString } from '@grafana/data';\n\nimport { getCellLinks, getTextColorForAlphaBackground } from '../../utils';\nimport { DataLinksContextMenu } from '../DataLinks/DataLinksContextMenu';\n\nimport { CellActions } from './CellActions';\nimport { TableStyles } from './styles';\nimport { TableCellDisplayMode, TableCellProps, TableFieldOptions } from './types';\n\nexport const DefaultCell: FC<TableCellProps> = (props) => {\n  const { field, cell, tableStyles, row, cellProps } = props;\n\n  const inspectEnabled = Boolean((field.config.custom as TableFieldOptions)?.inspect);\n  const displayValue = field.display!(cell.value);\n\n  let value: string | ReactElement;\n  if (React.isValidElement(cell.value)) {\n    value = cell.value;\n  } else {\n    value = formattedValueToString(displayValue);\n  }\n\n  const showFilters = field.config.filterable;\n  const showActions = (showFilters && cell.value !== undefined) || inspectEnabled;\n  const cellStyle = getCellStyle(tableStyles, field, displayValue, inspectEnabled);\n\n  const hasLinks = Boolean(getCellLinks(field, row)?.length);\n\n  return (\n    <div {...cellProps} className={cellStyle}>\n      {!hasLinks && <div className={tableStyles.cellText}>{value}</div>}\n\n      {hasLinks && (\n        <DataLinksContextMenu links={() => getCellLinks(field, row) || []}>\n          {(api) => {\n            return (\n              <div onClick={api.openMenu} className={cx(tableStyles.cellLink, api.targetClassName)}>\n                {value}\n              </div>\n            );\n          }}\n        </DataLinksContextMenu>\n      )}\n\n      {showActions && <CellActions {...props} previewMode=\"text\" />}\n    </div>\n  );\n};\n\nfunction getCellStyle(\n  tableStyles: TableStyles,\n  field: Field,\n  displayValue: DisplayValue,\n  disableOverflowOnHover = false\n) {\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorText) {\n    return tableStyles.buildCellContainerStyle(displayValue.color, undefined, !disableOverflowOnHover);\n  }\n\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorBackgroundSolid) {\n    const bgColor = tinycolor(displayValue.color);\n    const textColor = getTextColorForAlphaBackground(displayValue.color!, tableStyles.theme.isDark);\n    return tableStyles.buildCellContainerStyle(textColor, bgColor.toRgbString(), !disableOverflowOnHover);\n  }\n\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorBackground) {\n    const themeFactor = tableStyles.theme.isDark ? 1 : -0.7;\n    const bgColor2 = tinycolor(displayValue.color)\n      .darken(10 * themeFactor)\n      .spin(5)\n      .toRgbString();\n\n    const textColor = getTextColorForAlphaBackground(displayValue.color!, tableStyles.theme.isDark);\n\n    return tableStyles.buildCellContainerStyle(\n      textColor,\n      `linear-gradient(120deg, ${bgColor2}, ${displayValue.color})`,\n      !disableOverflowOnHover\n    );\n  }\n\n  return disableOverflowOnHover ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer;\n}\n"],"names":["React"],"mappings":"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"}