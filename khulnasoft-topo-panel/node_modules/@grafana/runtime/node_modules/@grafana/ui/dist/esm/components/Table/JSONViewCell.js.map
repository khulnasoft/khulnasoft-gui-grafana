{"version":3,"file":"JSONViewCell.js","sources":["../../../../src/components/Table/JSONViewCell.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React from 'react';\n\nimport { getCellLinks } from '../../utils';\nimport { DataLinksContextMenu } from '../DataLinks/DataLinksContextMenu';\n\nimport { CellActions } from './CellActions';\nimport { TableCellProps, TableFieldOptions } from './types';\n\nexport function JSONViewCell(props: TableCellProps): JSX.Element {\n  const { cell, tableStyles, cellProps, field, row } = props;\n  const inspectEnabled = Boolean((field.config.custom as TableFieldOptions)?.inspect);\n  const txt = css`\n    cursor: pointer;\n    font-family: monospace;\n  `;\n\n  let value = cell.value;\n  let displayValue = value;\n\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n\n  const hasLinks = Boolean(getCellLinks(field, row)?.length);\n\n  return (\n    <div {...cellProps} className={inspectEnabled ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer}>\n      <div className={cx(tableStyles.cellText, txt)}>\n        {!hasLinks && <div className={tableStyles.cellText}>{displayValue}</div>}\n        {hasLinks && (\n          <DataLinksContextMenu links={() => getCellLinks(field, row) || []}>\n            {(api) => {\n              return (\n                <div onClick={api.openMenu} className={api.targetClassName}>\n                  {displayValue}\n                </div>\n              );\n            }}\n          </DataLinksContextMenu>\n        )}\n      </div>\n      {inspectEnabled && <CellActions {...props} previewMode=\"code\" />}\n    </div>\n  );\n}\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUO,SAAS,aAAa,KAAoC,EAAA;AAVjE,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAWE,EAAA,MAAM,EAAE,IAAM,EAAA,WAAA,EAAa,SAAW,EAAA,KAAA,EAAO,KAAQ,GAAA,KAAA,CAAA;AACrD,EAAA,MAAM,iBAAiB,OAAS,CAAA,CAAA,EAAA,GAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAb,mBAA2C,OAAO,CAAA,CAAA;AAClF,EAAA,MAAM,GAAM,GAAA,GAAA,CAAA;AAAA;AAAA;AAAA,EAAA,CAAA,CAAA;AAKZ,EAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;AACjB,EAAA,IAAI,YAAe,GAAA,KAAA,CAAA;AAEnB,EAAI,IAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AACnB,IAAI,IAAA;AACF,MAAQ,KAAA,GAAA,IAAA,CAAK,MAAM,KAAK,CAAA,CAAA;AAAA,aAClB,CAAN,EAAA;AAAA,KAAO;AAAA,GACJ,MAAA;AACL,IAAA,YAAA,GAAe,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,GAChD;AAEA,EAAA,MAAM,WAAW,OAAQ,CAAA,CAAA,EAAA,GAAA,YAAA,CAAa,OAAO,GAAG,CAAA,KAAvB,mBAA0B,MAAM,CAAA,CAAA;AAEzD,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,wCAAQ,SAAR,CAAA,EAAA;AAAA,IAAmB,SAAW,EAAA,cAAA,GAAiB,WAAY,CAAA,uBAAA,GAA0B,WAAY,CAAA,aAAA;AAAA,GAAA,CAAA,kBAC/FA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAI,SAAW,EAAA,EAAA,CAAG,WAAY,CAAA,QAAA,EAAU,GAAG,CAAA;AAAA,GACzC,EAAA,CAAC,4BAAaA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IAAI,WAAW,WAAY,CAAA,QAAA;AAAA,GAAW,EAAA,YAAa,CACjE,EAAA,QAAA,oBACEA,cAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AAAA,IAAqB,OAAO,MAAM,YAAA,CAAa,KAAO,EAAA,GAAG,KAAK,EAAC;AAAA,GAAA,EAC7D,CAAC,GAAQ,KAAA;AACR,IAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,MAAI,SAAS,GAAI,CAAA,QAAA;AAAA,MAAU,WAAW,GAAI,CAAA,eAAA;AAAA,KAAA,EACxC,YACH,CAAA,CAAA;AAAA,GAGN,CAEJ,CAAA,EACC,cAAkB,oBAAAA,cAAA,CAAA,aAAA,CAAC,8CAAgB,KAAhB,CAAA,EAAA;AAAA,IAAuB,WAAY,EAAA,MAAA;AAAA,GAAA,CAAO,CAChE,CAAA,CAAA;AAEJ;;;;"}