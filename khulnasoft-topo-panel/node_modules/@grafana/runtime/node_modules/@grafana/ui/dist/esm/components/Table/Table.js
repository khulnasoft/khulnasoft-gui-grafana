import React__default, { memo, useRef, useState, useMemo, useEffect, useCallback } from 'react';
import { useTable, useFilters, useSortBy, usePagination, useAbsoluteLayout, useResizeColumns } from 'react-table';
import usePrevious from 'react-use/lib/usePrevious';
import { VariableSizeList } from 'react-window';
import { getFieldDisplayName } from '@grafana/data';
import { useStyles2, useTheme2 } from '../../themes/ThemeContext.js';
import 'memoize-one';
import '@emotion/react';
import 'tinycolor2';
import { CustomScrollbar } from '../CustomScrollbar/CustomScrollbar.js';
import { Pagination } from '../Pagination/Pagination.js';
import { FooterRow } from './FooterRow.js';
import { HeaderRow } from './HeaderRow.js';
import { TableCell } from './TableCell.js';
import { getTableStyles } from './styles.js';
import { getColumns, sortNumber, sortCaseInsensitive, getFooterItems, createFooterCalculationValues, EXPANDER_WIDTH } from './utils.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const COLUMN_MIN_WIDTH = 150;
function useTableStateReducer({ onColumnResize, onSortByChange, data }) {
  return useCallback(
    (newState, action) => {
      switch (action.type) {
        case "columnDoneResizing":
          if (onColumnResize) {
            const info = newState.columnResizing.headerIdWidths[0];
            const columnIdString = info[0];
            const fieldIndex = parseInt(columnIdString, 10);
            const width = Math.round(newState.columnResizing.columnWidths[columnIdString]);
            const field = data.fields[fieldIndex];
            if (!field) {
              return newState;
            }
            const fieldDisplayName = getFieldDisplayName(field, data);
            onColumnResize(fieldDisplayName, width);
          }
        case "toggleSortBy":
          if (onSortByChange) {
            const sortByFields = [];
            for (const sortItem of newState.sortBy) {
              const field = data.fields[parseInt(sortItem.id, 10)];
              if (!field) {
                continue;
              }
              sortByFields.push({
                displayName: getFieldDisplayName(field, data),
                desc: sortItem.desc
              });
            }
            onSortByChange(sortByFields);
          }
          break;
      }
      return newState;
    },
    [data, onColumnResize, onSortByChange]
  );
}
function getInitialState(initialSortBy, columns) {
  const state = {};
  if (initialSortBy) {
    state.sortBy = [];
    for (const sortBy of initialSortBy) {
      for (const col of columns) {
        if (col.Header === sortBy.displayName) {
          state.sortBy.push({ id: col.id, desc: sortBy.desc });
        }
      }
    }
  }
  return state;
}
const Table = memo((props) => {
  const {
    ariaLabel,
    data,
    subData,
    height,
    onCellFilterAdded,
    width,
    columnMinWidth = COLUMN_MIN_WIDTH,
    noHeader,
    resizable = true,
    initialSortBy,
    footerOptions,
    showTypeIcons,
    footerValues,
    enablePagination
  } = props;
  const listRef = useRef(null);
  const tableDivRef = useRef(null);
  const variableSizeListScrollbarRef = useRef(null);
  const tableStyles = useStyles2(getTableStyles);
  const theme = useTheme2();
  const headerHeight = noHeader ? 0 : tableStyles.cellHeight;
  const [footerItems, setFooterItems] = useState(footerValues);
  const [expandedIndexes, setExpandedIndexes] = useState(/* @__PURE__ */ new Set());
  const prevExpandedIndexes = usePrevious(expandedIndexes);
  const footerHeight = useMemo(() => {
    const EXTENDED_ROW_HEIGHT = 33;
    let length = 0;
    if (!footerItems) {
      return 0;
    }
    for (const fv of footerItems) {
      if (Array.isArray(fv) && fv.length > length) {
        length = fv.length;
      }
    }
    if (length > 1) {
      return EXTENDED_ROW_HEIGHT * length;
    }
    return EXTENDED_ROW_HEIGHT;
  }, [footerItems]);
  const memoizedData = useMemo(() => {
    if (!data.fields.length) {
      return [];
    }
    return Array(data.length).fill(0);
  }, [data]);
  const memoizedColumns = useMemo(
    () => getColumns(data, width, columnMinWidth, expandedIndexes, setExpandedIndexes, !!(subData == null ? void 0 : subData.length), footerItems),
    [data, width, columnMinWidth, footerItems, subData, expandedIndexes]
  );
  const stateReducer = useTableStateReducer(props);
  const options = useMemo(
    () => ({
      columns: memoizedColumns,
      data: memoizedData,
      disableResizing: !resizable,
      stateReducer,
      initialState: getInitialState(initialSortBy, memoizedColumns),
      autoResetFilters: false,
      sortTypes: {
        number: sortNumber,
        "alphanumeric-insensitive": sortCaseInsensitive
      }
    }),
    [initialSortBy, memoizedColumns, memoizedData, resizable, stateReducer]
  );
  const {
    getTableProps,
    headerGroups,
    rows,
    prepareRow,
    totalColumnsWidth,
    footerGroups,
    page,
    state,
    gotoPage,
    setPageSize,
    pageOptions
  } = useTable(options, useFilters, useSortBy, usePagination, useAbsoluteLayout, useResizeColumns);
  useEffect(() => {
    if (!footerOptions) {
      setFooterItems(footerValues);
    }
  }, [footerValues, footerOptions]);
  useEffect(() => {
    if (!footerOptions) {
      return;
    }
    if (footerOptions.show) {
      setFooterItems(
        getFooterItems(
          headerGroups[0].headers,
          createFooterCalculationValues(rows),
          footerOptions,
          theme
        )
      );
    } else {
      setFooterItems(void 0);
    }
  }, [footerOptions, theme, state.filters, data]);
  let listHeight = height - (headerHeight + footerHeight);
  if (enablePagination) {
    listHeight -= tableStyles.cellHeight;
  }
  const pageSize = Math.round(listHeight / tableStyles.cellHeight) - 1;
  useEffect(() => {
    if (pageSize <= 0) {
      return;
    }
    setPageSize(pageSize);
  }, [pageSize, setPageSize]);
  useEffect(() => {
    var _a;
    (_a = listRef.current) == null ? void 0 : _a.resetAfterIndex(
      Math.min(...Array.from(expandedIndexes), ...prevExpandedIndexes ? Array.from(prevExpandedIndexes) : [])
    );
  }, [expandedIndexes, prevExpandedIndexes]);
  useEffect(() => {
    var _a, _b, _c;
    const listVerticalScrollbarHTML = (_a = variableSizeListScrollbarRef.current) == null ? void 0 : _a.querySelector(
      ".track-vertical"
    );
    const tableScrollbarView = (_b = tableDivRef.current) == null ? void 0 : _b.firstChild;
    if (tableScrollbarView && listVerticalScrollbarHTML) {
      listVerticalScrollbarHTML == null ? void 0 : listVerticalScrollbarHTML.remove();
      (_c = tableScrollbarView.querySelector(":scope > .track-vertical")) == null ? void 0 : _c.remove();
      tableScrollbarView.append(listVerticalScrollbarHTML);
    }
  });
  useEffect(() => {
    setExpandedIndexes(/* @__PURE__ */ new Set());
  }, [data, subData]);
  const renderSubTable = React__default.useCallback(
    (rowIndex) => {
      var _a, _b;
      if (expandedIndexes.has(rowIndex)) {
        const rowSubData = subData == null ? void 0 : subData.find((frame) => {
          var _a2, _b2;
          return ((_b2 = (_a2 = frame.meta) == null ? void 0 : _a2.custom) == null ? void 0 : _b2.parentRowIndex) === rowIndex;
        });
        if (rowSubData) {
          const noHeader2 = !!((_b = (_a = rowSubData.meta) == null ? void 0 : _a.custom) == null ? void 0 : _b.noHeader);
          const subTableStyle = {
            height: tableStyles.rowHeight * (rowSubData.length + (noHeader2 ? 0 : 1)),
            background: theme.colors.emphasize(theme.colors.background.primary, 0.015),
            paddingLeft: EXPANDER_WIDTH,
            position: "absolute",
            bottom: 0
          };
          return /* @__PURE__ */ React__default.createElement("div", {
            style: subTableStyle
          }, /* @__PURE__ */ React__default.createElement(Table, {
            data: rowSubData,
            width: width - EXPANDER_WIDTH,
            height: tableStyles.rowHeight * (rowSubData.length + 1),
            noHeader: noHeader2
          }));
        }
      }
      return null;
    },
    [expandedIndexes, subData, tableStyles.rowHeight, theme.colors, width]
  );
  const RenderRow = React__default.useCallback(
    ({ index: rowIndex, style }) => {
      let row = rows[rowIndex];
      if (enablePagination) {
        row = page[rowIndex];
      }
      prepareRow(row);
      return /* @__PURE__ */ React__default.createElement("div", __spreadProps(__spreadValues({}, row.getRowProps({ style })), {
        className: tableStyles.row
      }), renderSubTable(rowIndex), row.cells.map((cell, index) => /* @__PURE__ */ React__default.createElement(TableCell, {
        key: index,
        tableStyles,
        cell,
        onCellFilterAdded,
        columnIndex: index,
        columnCount: row.cells.length
      })));
    },
    [onCellFilterAdded, page, enablePagination, prepareRow, rows, tableStyles, renderSubTable]
  );
  const onNavigate = useCallback(
    (toPage) => {
      gotoPage(toPage - 1);
    },
    [gotoPage]
  );
  const itemCount = enablePagination ? page.length : rows.length;
  let paginationEl = null;
  if (enablePagination) {
    const itemsRangeStart = state.pageIndex * state.pageSize + 1;
    let itemsRangeEnd = itemsRangeStart + state.pageSize - 1;
    const isSmall = width < 550;
    if (itemsRangeEnd > data.length) {
      itemsRangeEnd = data.length;
    }
    paginationEl = /* @__PURE__ */ React__default.createElement("div", {
      className: tableStyles.paginationWrapper
    }, isSmall ? null : /* @__PURE__ */ React__default.createElement("div", {
      className: tableStyles.paginationItem
    }), /* @__PURE__ */ React__default.createElement("div", {
      className: tableStyles.paginationCenterItem
    }, /* @__PURE__ */ React__default.createElement(Pagination, {
      currentPage: state.pageIndex + 1,
      numberOfPages: pageOptions.length,
      showSmallVersion: isSmall,
      onNavigate
    })), isSmall ? null : /* @__PURE__ */ React__default.createElement("div", {
      className: tableStyles.paginationSummary
    }, itemsRangeStart, " - ", itemsRangeEnd, " of ", data.length, " rows"));
  }
  const getItemSize = (index) => {
    var _a, _b;
    if (expandedIndexes.has(index)) {
      const rowSubData = subData == null ? void 0 : subData.find((frame) => {
        var _a2, _b2;
        return ((_b2 = (_a2 = frame.meta) == null ? void 0 : _a2.custom) == null ? void 0 : _b2.parentRowIndex) === index;
      });
      if (rowSubData) {
        const noHeader2 = !!((_b = (_a = rowSubData.meta) == null ? void 0 : _a.custom) == null ? void 0 : _b.noHeader);
        return tableStyles.rowHeight * (rowSubData.length + 1 + (noHeader2 ? 0 : 1));
      }
    }
    return tableStyles.rowHeight;
  };
  const handleScroll = (event) => {
    const { scrollTop } = event.target;
    if (listRef.current !== null) {
      listRef.current.scrollTo(scrollTop);
    }
  };
  return /* @__PURE__ */ React__default.createElement("div", __spreadProps(__spreadValues({}, getTableProps()), {
    className: tableStyles.table,
    "aria-label": ariaLabel,
    role: "table",
    ref: tableDivRef
  }), /* @__PURE__ */ React__default.createElement(CustomScrollbar, {
    hideVerticalTrack: true
  }, /* @__PURE__ */ React__default.createElement("div", {
    className: tableStyles.tableContentWrapper(totalColumnsWidth)
  }, !noHeader && /* @__PURE__ */ React__default.createElement(HeaderRow, {
    headerGroups,
    showTypeIcons
  }), itemCount > 0 ? /* @__PURE__ */ React__default.createElement("div", {
    ref: variableSizeListScrollbarRef
  }, /* @__PURE__ */ React__default.createElement(CustomScrollbar, {
    onScroll: handleScroll,
    hideHorizontalTrack: true
  }, /* @__PURE__ */ React__default.createElement(VariableSizeList, {
    height: listHeight,
    itemCount,
    itemSize: getItemSize,
    width: "100%",
    ref: listRef,
    style: { overflow: void 0 }
  }, RenderRow))) : /* @__PURE__ */ React__default.createElement("div", {
    style: { height: height - headerHeight },
    className: tableStyles.noData
  }, "No data"), footerItems && /* @__PURE__ */ React__default.createElement(FooterRow, {
    height: footerHeight,
    isPaginationVisible: Boolean(enablePagination),
    footerValues: footerItems,
    footerGroups,
    totalColumnsWidth
  }))), paginationEl);
});
Table.displayName = "Table";

export { Table };
//# sourceMappingURL=Table.js.map
