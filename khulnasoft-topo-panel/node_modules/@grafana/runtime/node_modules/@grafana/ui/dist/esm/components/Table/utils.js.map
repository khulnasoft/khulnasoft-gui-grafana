{"version":3,"file":"utils.js","sources":["../../../../src/components/Table/utils.tsx"],"sourcesContent":["import { Property } from 'csstype';\nimport { clone } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport React from 'react';\nimport { Row } from 'react-table';\n\nimport {\n  DataFrame,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  SelectableValue,\n  fieldReducers,\n  getDisplayProcessor,\n  reduceField,\n  GrafanaTheme2,\n  ArrayVector,\n} from '@grafana/data';\n\nimport { BarGaugeCell } from './BarGaugeCell';\nimport { DefaultCell } from './DefaultCell';\nimport { getFooterValue } from './FooterRow';\nimport { GeoCell } from './GeoCell';\nimport { ImageCell } from './ImageCell';\nimport { JSONViewCell } from './JSONViewCell';\nimport { RowExpander } from './RowExpander';\nimport {\n  CellComponent,\n  TableCellDisplayMode,\n  TableFieldOptions,\n  FooterItem,\n  GrafanaTableColumn,\n  TableFooterCalc,\n} from './types';\n\nexport const EXPANDER_WIDTH = 50;\n\nexport function getTextAlign(field?: Field): Property.JustifyContent {\n  if (!field) {\n    return 'flex-start';\n  }\n\n  if (field.config.custom) {\n    const custom = field.config.custom as TableFieldOptions;\n\n    switch (custom.align) {\n      case 'right':\n        return 'flex-end';\n      case 'left':\n        return 'flex-start';\n      case 'center':\n        return 'center';\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return 'flex-end';\n  }\n\n  return 'flex-start';\n}\n\nexport function getColumns(\n  data: DataFrame,\n  availableWidth: number,\n  columnMinWidth: number,\n  expandedIndexes: Set<number>,\n  setExpandedIndexes: (indexes: Set<number>) => void,\n  expander: boolean,\n  footerValues?: FooterItem[]\n): GrafanaTableColumn[] {\n  const columns: GrafanaTableColumn[] = expander\n    ? [\n        {\n          // Make an expander cell\n          Header: () => null, // No header\n          id: 'expander', // It needs an ID\n          Cell: ({ row }) => {\n            return <RowExpander row={row} expandedIndexes={expandedIndexes} setExpandedIndexes={setExpandedIndexes} />;\n          },\n          width: EXPANDER_WIDTH,\n          minWidth: EXPANDER_WIDTH,\n          filter: (rows: Row[], id: string, filterValues?: SelectableValue[]) => {\n            return [];\n          },\n          justifyContent: 'left',\n          field: data.fields[0],\n          sortType: 'basic',\n        },\n      ]\n    : [];\n  let fieldCountWithoutWidth = 0;\n\n  if (expander) {\n    availableWidth -= EXPANDER_WIDTH;\n  }\n\n  for (const [fieldIndex, field] of data.fields.entries()) {\n    const fieldTableOptions = (field.config.custom || {}) as TableFieldOptions;\n\n    if (fieldTableOptions.hidden) {\n      continue;\n    }\n\n    if (fieldTableOptions.width) {\n      availableWidth -= fieldTableOptions.width;\n    } else {\n      fieldCountWithoutWidth++;\n    }\n\n    const selectSortType = (type: FieldType) => {\n      switch (type) {\n        case FieldType.number:\n          return 'number';\n        case FieldType.time:\n          return 'basic';\n        default:\n          return 'alphanumeric-insensitive';\n      }\n    };\n\n    const Cell = getCellComponent(fieldTableOptions.displayMode, field);\n    columns.push({\n      Cell,\n      id: fieldIndex.toString(),\n      field: field,\n      Header: getFieldDisplayName(field, data),\n      accessor: (row: any, i: number) => {\n        return field.values.get(i);\n      },\n      sortType: selectSortType(field.type),\n      width: fieldTableOptions.width,\n      minWidth: fieldTableOptions.minWidth ?? columnMinWidth,\n      filter: memoizeOne(filterByValue(field)),\n      justifyContent: getTextAlign(field),\n      Footer: getFooterValue(fieldIndex, footerValues),\n    });\n  }\n\n  // set columns that are at minimum width\n  let sharedWidth = availableWidth / fieldCountWithoutWidth;\n  for (let i = fieldCountWithoutWidth; i > 0; i--) {\n    for (const column of columns) {\n      if (!column.width && column.minWidth > sharedWidth) {\n        column.width = column.minWidth;\n        availableWidth -= column.width;\n        fieldCountWithoutWidth -= 1;\n        sharedWidth = availableWidth / fieldCountWithoutWidth;\n      }\n    }\n  }\n\n  // divide up the rest of the space\n  for (const column of columns) {\n    if (!column.width) {\n      column.width = sharedWidth;\n    }\n    column.minWidth = 50;\n  }\n\n  return columns;\n}\n\nexport function getCellComponent(displayMode: TableCellDisplayMode, field: Field): CellComponent {\n  switch (displayMode) {\n    case TableCellDisplayMode.ColorText:\n    case TableCellDisplayMode.ColorBackground:\n      return DefaultCell;\n    case TableCellDisplayMode.Image:\n      return ImageCell;\n    case TableCellDisplayMode.LcdGauge:\n    case TableCellDisplayMode.BasicGauge:\n    case TableCellDisplayMode.GradientGauge:\n      return BarGaugeCell;\n    case TableCellDisplayMode.JSONView:\n      return JSONViewCell;\n  }\n\n  if (field.type === FieldType.geo) {\n    return GeoCell;\n  }\n\n  // Default or Auto\n  if (field.type === FieldType.other) {\n    return JSONViewCell;\n  }\n  return DefaultCell;\n}\n\nexport function filterByValue(field?: Field) {\n  return function (rows: Row[], id: string, filterValues?: SelectableValue[]) {\n    if (rows.length === 0) {\n      return rows;\n    }\n\n    if (!filterValues) {\n      return rows;\n    }\n\n    if (!field) {\n      return rows;\n    }\n\n    return rows.filter((row) => {\n      if (!row.values.hasOwnProperty(id)) {\n        return false;\n      }\n      const value = rowToFieldValue(row, field);\n      return filterValues.find((filter) => filter.value === value) !== undefined;\n    });\n  };\n}\n\nexport function calculateUniqueFieldValues(rows: any[], field?: Field) {\n  if (!field || rows.length === 0) {\n    return {};\n  }\n\n  const set: Record<string, string> = {};\n\n  for (let index = 0; index < rows.length; index++) {\n    const value = rowToFieldValue(rows[index], field);\n    set[value || '(Blanks)'] = value;\n  }\n\n  return set;\n}\n\nexport function rowToFieldValue(row: any, field?: Field): string {\n  if (!field || !row) {\n    return '';\n  }\n\n  const fieldValue = field.values.get(row.index);\n  const displayValue = field.display ? field.display(fieldValue) : fieldValue;\n  const value = field.display ? formattedValueToString(displayValue) : displayValue;\n\n  return value;\n}\n\nexport function valuesToOptions(unique: Record<string, any>): SelectableValue[] {\n  return Object.keys(unique)\n    .reduce((all, key) => all.concat({ value: unique[key], label: key }), [] as SelectableValue[])\n    .sort(sortOptions);\n}\n\nexport function sortOptions(a: SelectableValue, b: SelectableValue): number {\n  if (a.label === undefined && b.label === undefined) {\n    return 0;\n  }\n\n  if (a.label === undefined && b.label !== undefined) {\n    return -1;\n  }\n\n  if (a.label !== undefined && b.label === undefined) {\n    return 1;\n  }\n\n  if (a.label! < b.label!) {\n    return -1;\n  }\n\n  if (a.label! > b.label!) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function getFilteredOptions(options: SelectableValue[], filterValues?: SelectableValue[]): SelectableValue[] {\n  if (!filterValues) {\n    return [];\n  }\n\n  return options.filter((option) => filterValues.some((filtered) => filtered.value === option.value));\n}\n\nexport function sortCaseInsensitive(a: Row<any>, b: Row<any>, id: string) {\n  return String(a.values[id]).localeCompare(String(b.values[id]), undefined, { sensitivity: 'base' });\n}\n\n// sortNumber needs to have great performance as it is called a lot\nexport function sortNumber(rowA: Row<any>, rowB: Row<any>, id: string) {\n  const a = toNumber(rowA.values[id]);\n  const b = toNumber(rowB.values[id]);\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toNumber(value: any): number {\n  if (value === null || value === undefined || value === '' || isNaN(value)) {\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return Number(value);\n}\n\nexport function getFooterItems(\n  filterFields: Array<{ field: Field }>,\n  values: any[number],\n  options: TableFooterCalc,\n  theme2: GrafanaTheme2\n): FooterItem[] {\n  return filterFields.map((data, i) => {\n    if (data.field.type !== FieldType.number) {\n      // show the reducer in the first column\n      if (i === 0 && options.reducer && options.reducer.length > 0) {\n        const reducer = fieldReducers.get(options.reducer[0]);\n        return reducer.name;\n      }\n      return undefined;\n    }\n    let newField = clone(data.field);\n    newField.values = new ArrayVector(values[i]);\n    newField.state = undefined;\n\n    data.field = newField;\n    if (options.fields && options.fields.length > 0) {\n      const f = options.fields.find((f) => f === data.field.name);\n      if (f) {\n        return getFormattedValue(data.field, options.reducer, theme2);\n      }\n      return undefined;\n    }\n    return getFormattedValue(data.field, options.reducer || [], theme2);\n  });\n}\n\nfunction getFormattedValue(field: Field, reducer: string[], theme: GrafanaTheme2) {\n  const fmt = field.display ?? getDisplayProcessor({ field, theme });\n  const calc = reducer[0];\n  const v = reduceField({ field, reducers: reducer })[calc];\n  return formattedValueToString(fmt(v));\n}\n\nexport function createFooterCalculationValues(rows: Row[]): any[number] {\n  const values: any[number] = [];\n\n  for (const key in rows) {\n    for (const [valKey, val] of Object.entries(rows[key].values)) {\n      if (values[valKey] === undefined) {\n        values[valKey] = [];\n      }\n      values[valKey].push(val);\n    }\n  }\n\n  return values;\n}\n"],"names":["React","f"],"mappings":"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"}