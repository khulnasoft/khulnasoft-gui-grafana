{"version":3,"file":"TimeSeries.js","sources":["../../../../src/components/TimeSeries/TimeSeries.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { DataFrame, TimeRange } from '@grafana/data';\n\nimport { withTheme2 } from '../../themes/ThemeContext';\nimport { GraphNG, GraphNGProps, PropDiffFn } from '../GraphNG/GraphNG';\nimport { PanelContext, PanelContextRoot } from '../PanelChrome/PanelContext';\nimport { PlotLegend } from '../uPlot/PlotLegend';\nimport { UPlotConfigBuilder } from '../uPlot/config/UPlotConfigBuilder';\n\nimport { preparePlotConfigBuilder } from './utils';\n\nconst propsToDiff: Array<string | PropDiffFn> = ['legend', 'options'];\n\ntype TimeSeriesProps = Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend'>;\n\nexport class UnthemedTimeSeries extends Component<TimeSeriesProps> {\n  static contextType = PanelContextRoot;\n  panelContext: PanelContext = {} as PanelContext;\n\n  prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    const { eventBus, sync } = this.context as PanelContext;\n    const { theme, timeZone, renderers, tweakAxis, tweakScale } = this.props;\n\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      theme,\n      timeZones: Array.isArray(timeZone) ? timeZone : [timeZone],\n      getTimeRange,\n      eventBus,\n      sync,\n      allFrames,\n      renderers,\n      tweakScale,\n      tweakAxis,\n    });\n  };\n\n  renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend, frames } = this.props;\n\n    //hides and shows the legend ON the uPlot graph\n    if (!config || (legend && !legend.showLegend)) {\n      return null;\n    }\n\n    return <PlotLegend data={frames} config={config} {...legend} />;\n  };\n\n  render() {\n    return (\n      <GraphNG\n        {...this.props}\n        prepConfig={this.prepConfig}\n        propsToDiff={propsToDiff}\n        renderLegend={this.renderLegend}\n      />\n    );\n  }\n}\n\nexport const TimeSeries = withTheme2(UnthemedTimeSeries);\nTimeSeries.displayName = 'TimeSeries';\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAM,WAAA,GAA0C,CAAC,QAAA,EAAU,SAAS,CAAA,CAAA;AAI7D,MAAM,2BAA2B,SAA2B,CAAA;AAAA,EAA5D,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;AAEL,IAAA,IAAA,CAAA,YAAA,GAA6B,EAAC,CAAA;AAE9B,IAAa,IAAA,CAAA,UAAA,GAAA,CAAC,YAAyB,EAAA,SAAA,EAAwB,YAAkC,KAAA;AAC/F,MAAA,MAAM,EAAE,QAAA,EAAU,IAAK,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AAChC,MAAA,MAAM,EAAE,KAAO,EAAA,QAAA,EAAU,WAAW,SAAW,EAAA,UAAA,KAAe,IAAK,CAAA,KAAA,CAAA;AAEnE,MAAA,OAAO,wBAAyB,CAAA;AAAA,QAC9B,KAAO,EAAA,YAAA;AAAA,QACP,KAAA;AAAA,QACA,WAAW,KAAM,CAAA,OAAA,CAAQ,QAAQ,CAAI,GAAA,QAAA,GAAW,CAAC,QAAQ,CAAA;AAAA,QACzD,YAAA;AAAA,QACA,QAAA;AAAA,QACA,IAAA;AAAA,QACA,SAAA;AAAA,QACA,SAAA;AAAA,QACA,UAAA;AAAA,QACA,SAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACH,CAAA;AAEA,IAAA,IAAA,CAAA,YAAA,GAAe,CAAC,MAA+B,KAAA;AAC7C,MAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,KAAA,CAAA;AAGhC,MAAA,IAAI,CAAC,MAAA,IAAW,MAAU,IAAA,CAAC,OAAO,UAAa,EAAA;AAC7C,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAEA,MAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,UAAA,EAAA,cAAA,CAAA;AAAA,QAAW,IAAM,EAAA,MAAA;AAAA,QAAQ,MAAA;AAAA,OAAA,EAAoB,MAAQ,CAAA,CAAA,CAAA;AAAA,KAC/D,CAAA;AAAA,GAAA;AAAA,EAEA,MAAS,GAAA;AACP,IACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,OACK,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,IAAA,CAAK,KADV,CAAA,EAAA;AAAA,MAEC,YAAY,IAAK,CAAA,UAAA;AAAA,MACjB,WAAA;AAAA,MACA,cAAc,IAAK,CAAA,YAAA;AAAA,KACrB,CAAA,CAAA,CAAA;AAAA,GAEJ;AACF,CAAA;AA3Ca,kBAAA,CACJ,WAAc,GAAA,gBAAA,CAAA;AA4CV,MAAA,UAAA,GAAa,WAAW,kBAAkB,EAAA;AACvD,UAAA,CAAW,WAAc,GAAA,YAAA;;;;"}