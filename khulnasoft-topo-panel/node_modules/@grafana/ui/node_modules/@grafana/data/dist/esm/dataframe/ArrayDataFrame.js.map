{"version":3,"file":"ArrayDataFrame.js","sources":["../../../src/dataframe/ArrayDataFrame.ts"],"sourcesContent":["import { QueryResultMeta } from '../types';\nimport { Field, FieldType, DataFrame, TIME_SERIES_VALUE_FIELD_NAME } from '../types/dataFrame';\n\nimport { guessFieldTypeForField } from './processDataFrame';\n\n/**\n * The ArrayDataFrame takes an array of objects and presents it as a DataFrame\n *\n * @deprecated use arrayToDataFrame\n */\nexport class ArrayDataFrame<T = any> implements DataFrame {\n  fields: Field[] = [];\n  length = 0;\n  name?: string;\n  refId?: string;\n  meta?: QueryResultMeta;\n\n  constructor(source: T[], names?: string[]) {\n    return arrayToDataFrame(source, names); // returns a standard DataFrame\n  }\n}\n\n/**\n * arrayToDataFrame will convert any array into a DataFrame\n *\n * @public\n */\nexport function arrayToDataFrame(source: any[], names?: string[]): DataFrame {\n  const df: DataFrame = {\n    fields: [],\n    length: source.length,\n  };\n  if (!source?.length) {\n    return df;\n  }\n\n  if (names) {\n    for (const name of names) {\n      df.fields.push(\n        makeFieldFromValues(\n          name,\n          source.map((v) => v[name])\n        )\n      );\n    }\n    return df;\n  }\n\n  const first = source.find((v) => v != null); // first not null|undefined\n  if (first != null) {\n    if (typeof first === 'object') {\n      df.fields = Object.keys(first).map((name) => {\n        return makeFieldFromValues(\n          name,\n          source.map((v) => v[name])\n        );\n      });\n    } else {\n      df.fields.push(makeFieldFromValues(TIME_SERIES_VALUE_FIELD_NAME, source));\n    }\n  }\n  return df;\n}\n\nfunction makeFieldFromValues(name: string, values: unknown[]): Field {\n  const f = { name, config: {}, values, type: FieldType.other };\n  f.type = guessFieldTypeForField(f) ?? FieldType.other;\n  return f;\n}\n"],"names":[],"mappings":";;;;;;;;;AAUO,MAAM,cAA6C,CAAA;AAAA,EAOxD,WAAA,CAAY,QAAa,KAAkB,EAAA;AAN3C,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,EAAkB,EAAC,CAAA,CAAA;AACnB,IAAS,aAAA,CAAA,IAAA,EAAA,QAAA,EAAA,CAAA,CAAA,CAAA;AACT,IAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AAGE,IAAO,OAAA,gBAAA,CAAiB,QAAQ,KAAK,CAAA,CAAA;AAAA,GACvC;AACF,CAAA;AAOgB,SAAA,gBAAA,CAAiB,QAAe,KAA6B,EAAA;AAC3E,EAAA,MAAM,EAAgB,GAAA;AAAA,IACpB,QAAQ,EAAC;AAAA,IACT,QAAQ,MAAO,CAAA,MAAA;AAAA,GACjB,CAAA;AACA,EAAI,IAAA,EAAC,iCAAQ,MAAQ,CAAA,EAAA;AACnB,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,KAAO,EAAA;AACT,IAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,MAAA,EAAA,CAAG,MAAO,CAAA,IAAA;AAAA,QACR,mBAAA;AAAA,UACE,IAAA;AAAA,UACA,OAAO,GAAI,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,IAAI,CAAC,CAAA;AAAA,SAC3B;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,QAAQ,MAAO,CAAA,IAAA,CAAK,CAAC,CAAA,KAAM,KAAK,IAAI,CAAA,CAAA;AAC1C,EAAA,IAAI,SAAS,IAAM,EAAA;AACjB,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAA,EAAA,CAAG,SAAS,MAAO,CAAA,IAAA,CAAK,KAAK,CAAE,CAAA,GAAA,CAAI,CAAC,IAAS,KAAA;AAC3C,QAAO,OAAA,mBAAA;AAAA,UACL,IAAA;AAAA,UACA,OAAO,GAAI,CAAA,CAAC,CAAM,KAAA,CAAA,CAAE,IAAI,CAAC,CAAA;AAAA,SAC3B,CAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACI,MAAA;AACL,MAAA,EAAA,CAAG,MAAO,CAAA,IAAA,CAAK,mBAAoB,CAAA,4BAAA,EAA8B,MAAM,CAAC,CAAA,CAAA;AAAA,KAC1E;AAAA,GACF;AACA,EAAO,OAAA,EAAA,CAAA;AACT,CAAA;AAEA,SAAS,mBAAA,CAAoB,MAAc,MAA0B,EAAA;AAhErE,EAAA,IAAA,EAAA,CAAA;AAiEE,EAAM,MAAA,CAAA,GAAI,EAAE,IAAM,EAAA,MAAA,EAAQ,EAAI,EAAA,MAAA,EAAQ,IAAM,EAAA,SAAA,CAAU,KAAM,EAAA,CAAA;AAC5D,EAAA,CAAA,CAAE,IAAO,GAAA,CAAA,EAAA,GAAA,sBAAA,CAAuB,CAAC,CAAA,KAAxB,YAA6B,SAAU,CAAA,KAAA,CAAA;AAChD,EAAO,OAAA,CAAA,CAAA;AACT;;;;"}