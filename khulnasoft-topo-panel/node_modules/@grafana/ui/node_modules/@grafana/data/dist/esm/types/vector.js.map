{"version":3,"file":"vector.js","sources":["../../../src/types/vector.ts"],"sourcesContent":["declare global {\n  interface Array<T> {\n    /** @deprecated Use [idx]. This only exists to help migrate Vector to Array */\n    get(idx: number): T;\n    /** @deprecated Use [idx]. This only exists to help migrate Vector to Array */\n    set(idx: number, value: T): void;\n    /** @deprecated Use .push(value). This only exists to help migrate Vector to Array */\n    add(value: T): void;\n    /** @deprecated this is not necessary.  This only exists to help migrate Vector to Array */\n    toArray(): T[];\n  }\n}\n\n// JS original sin\n// this if condition is because Jest will re-exec this block multiple times (in a browser this only runs once)\nexport function patchArrayVectorProrotypeMethods() {\n  if (!Object.getOwnPropertyDescriptor(Array.prototype, 'toArray')) {\n    Object.defineProperties(Array.prototype, {\n      get: {\n        value: function (idx: number) {\n          return this[idx];\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      },\n      set: {\n        value: function (idx: number, value: unknown) {\n          this[idx] = value;\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      },\n      add: {\n        value: function (value: unknown) {\n          this.push(value);\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      },\n      toArray: {\n        value: function () {\n          return this;\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      },\n    });\n  }\n}\n//this function call is intentional\npatchArrayVectorProrotypeMethods();\n\n/** @deprecated use a simple Array<T> */\nexport interface Vector<T = any> extends Array<T> {\n  length: number;\n\n  /**\n   * Access the value by index (Like an array)\n   *\n   * @deprecated use a simple Array<T>\n   */\n  get(index: number): T;\n\n  /**\n   * Set a value\n   *\n   * @deprecated use a simple Array<T>\n   */\n  set: (index: number, value: T) => void;\n\n  /**\n   * Adds the value to the vector\n   * Same as Array.push()\n   *\n   * @deprecated use a simple Array<T>\n   */\n  add: (value: T) => void;\n\n  /**\n   * Get the results as an array.\n   *\n   * @deprecated use a simple Array<T>\n   */\n  toArray(): T[];\n}\n\n/**\n * Apache arrow vectors are Read/Write\n *\n * @deprecated -- this is now part of the base Vector interface\n */\nexport interface ReadWriteVector<T = any> extends Vector<T> {}\n\n/**\n * Vector with standard manipulation functions\n *\n * @deprecated -- this is now part of the base Vector interface\n */\nexport interface MutableVector<T = any> extends ReadWriteVector<T> {}\n\n/**\n * This is an extremely inefficient Vector wrapper that allows vectors to\n * be treated as arrays.  We should avoid using this wrapper, but it is helpful\n * for a clean migration to arrays\n *\n * @deprecated\n */\nexport function makeArrayIndexableVector<T extends Vector>(v: T): T {\n  return new Proxy<T>(v, {\n    get(target: Vector, property: string, receiver: Vector) {\n      if (typeof property !== 'symbol') {\n        const idx = +property;\n        if (String(idx) === property) {\n          return target.get(idx);\n        }\n      }\n      return Reflect.get(target, property, receiver);\n    },\n    set(target: Vector, property: string, value: unknown, receiver: Vector) {\n      if (typeof property !== 'symbol') {\n        const idx = +property;\n        if (String(idx) === property) {\n          target.set(idx, value);\n          return true;\n        }\n      }\n      return Reflect.set(target, property, value, receiver);\n    },\n  });\n}\n"],"names":[],"mappings":"AAeO,SAAS,gCAAmC,GAAA;AACjD,EAAA,IAAI,CAAC,MAAO,CAAA,wBAAA,CAAyB,KAAM,CAAA,SAAA,EAAW,SAAS,CAAG,EAAA;AAChE,IAAO,MAAA,CAAA,gBAAA,CAAiB,MAAM,SAAW,EAAA;AAAA,MACvC,GAAK,EAAA;AAAA,QACH,KAAA,EAAO,SAAU,GAAa,EAAA;AAC5B,UAAA,OAAO,KAAK,GAAG,CAAA,CAAA;AAAA,SACjB;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,QACV,UAAY,EAAA,KAAA;AAAA,QACZ,YAAc,EAAA,IAAA;AAAA,OAChB;AAAA,MACA,GAAK,EAAA;AAAA,QACH,KAAA,EAAO,SAAU,GAAA,EAAa,KAAgB,EAAA;AAC5C,UAAA,IAAA,CAAK,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,SACd;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,QACV,UAAY,EAAA,KAAA;AAAA,QACZ,YAAc,EAAA,IAAA;AAAA,OAChB;AAAA,MACA,GAAK,EAAA;AAAA,QACH,KAAA,EAAO,SAAU,KAAgB,EAAA;AAC/B,UAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAA;AAAA,SACjB;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,QACV,UAAY,EAAA,KAAA;AAAA,QACZ,YAAc,EAAA,IAAA;AAAA,OAChB;AAAA,MACA,OAAS,EAAA;AAAA,QACP,OAAO,WAAY;AACjB,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,QACV,UAAY,EAAA,KAAA;AAAA,QACZ,YAAc,EAAA,IAAA;AAAA,OAChB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAEA,gCAAiC,EAAA,CAAA;AAyD1B,SAAS,yBAA2C,CAAS,EAAA;AAClE,EAAO,OAAA,IAAI,MAAS,CAAG,EAAA;AAAA,IACrB,GAAA,CAAI,MAAgB,EAAA,QAAA,EAAkB,QAAkB,EAAA;AACtD,MAAI,IAAA,OAAO,aAAa,QAAU,EAAA;AAChC,QAAA,MAAM,MAAM,CAAC,QAAA,CAAA;AACb,QAAI,IAAA,MAAA,CAAO,GAAG,CAAA,KAAM,QAAU,EAAA;AAC5B,UAAO,OAAA,MAAA,CAAO,IAAI,GAAG,CAAA,CAAA;AAAA,SACvB;AAAA,OACF;AACA,MAAA,OAAO,OAAQ,CAAA,GAAA,CAAI,MAAQ,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAAA,KAC/C;AAAA,IACA,GAAI,CAAA,MAAA,EAAgB,QAAkB,EAAA,KAAA,EAAgB,QAAkB,EAAA;AACtE,MAAI,IAAA,OAAO,aAAa,QAAU,EAAA;AAChC,QAAA,MAAM,MAAM,CAAC,QAAA,CAAA;AACb,QAAI,IAAA,MAAA,CAAO,GAAG,CAAA,KAAM,QAAU,EAAA;AAC5B,UAAO,MAAA,CAAA,GAAA,CAAI,KAAK,KAAK,CAAA,CAAA;AACrB,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAAA,OACF;AACA,MAAA,OAAO,OAAQ,CAAA,GAAA,CAAI,MAAQ,EAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAAA,KACtD;AAAA,GACD,CAAA,CAAA;AACH;;;;"}