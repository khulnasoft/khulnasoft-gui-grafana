"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCoreConfig = void 0;
var faro_core_1 = require("@grafana/faro-core");
var consts_1 = require("../consts");
var instrumentations_1 = require("../instrumentations");
var session_1 = require("../instrumentations/session");
var metas_1 = require("../metas");
var k6_1 = require("../metas/k6");
var transports_1 = require("../transports");
var getWebInstrumentations_1 = require("./getWebInstrumentations");
function makeCoreConfig(browserConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var transports = [];
    var internalLogger = (0, faro_core_1.createInternalLogger)(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);
    if (browserConfig.transports) {
        if (browserConfig.url || browserConfig.apiKey) {
            internalLogger.error('if "transports" is defined, "url" and "apiKey" should not be defined');
        }
        transports.push.apply(transports, browserConfig.transports);
    }
    else if (browserConfig.url) {
        transports.push(new transports_1.FetchTransport({
            url: browserConfig.url,
            apiKey: browserConfig.apiKey,
        }));
    }
    else {
        internalLogger.error('either "url" or "transports" must be defined');
    }
    function createMetas() {
        var initialMetas = metas_1.defaultMetas;
        if (browserConfig.metas) {
            initialMetas.push.apply(initialMetas, browserConfig.metas);
        }
        var isK6BrowserSession = (0, faro_core_1.isObject)(window.k6);
        if (isK6BrowserSession) {
            return __spreadArray(__spreadArray([], initialMetas, true), [k6_1.k6Meta], false);
        }
        return initialMetas;
    }
    var config = {
        app: browserConfig.app,
        batching: __assign(__assign({}, faro_core_1.defaultBatchingConfig), browserConfig.batching),
        dedupe: (_a = browserConfig.dedupe) !== null && _a !== void 0 ? _a : true,
        globalObjectKey: browserConfig.globalObjectKey || faro_core_1.defaultGlobalObjectKey,
        instrumentations: (_b = browserConfig.instrumentations) !== null && _b !== void 0 ? _b : (0, getWebInstrumentations_1.getWebInstrumentations)(),
        internalLoggerLevel: (_c = browserConfig.internalLoggerLevel) !== null && _c !== void 0 ? _c : faro_core_1.defaultInternalLoggerLevel,
        isolate: (_d = browserConfig.isolate) !== null && _d !== void 0 ? _d : false,
        logArgsSerializer: (_e = browserConfig.logArgsSerializer) !== null && _e !== void 0 ? _e : faro_core_1.defaultLogArgsSerializer,
        metas: createMetas(),
        parseStacktrace: instrumentations_1.parseStacktrace,
        paused: (_f = browserConfig.paused) !== null && _f !== void 0 ? _f : false,
        preventGlobalExposure: (_g = browserConfig.preventGlobalExposure) !== null && _g !== void 0 ? _g : false,
        transports: transports,
        unpatchedConsole: (_h = browserConfig.unpatchedConsole) !== null && _h !== void 0 ? _h : faro_core_1.defaultUnpatchedConsole,
        beforeSend: browserConfig.beforeSend,
        eventDomain: (_j = browserConfig.eventDomain) !== null && _j !== void 0 ? _j : consts_1.defaultEventDomain,
        ignoreErrors: browserConfig.ignoreErrors,
        ignoreUrls: browserConfig.ignoreUrls,
        sessionTracking: __assign(__assign({}, session_1.defaultSessionTrackingConfig), browserConfig.sessionTracking),
        user: browserConfig.user,
        view: (_k = browserConfig.view) !== null && _k !== void 0 ? _k : metas_1.defaultViewMeta,
        trackResources: browserConfig.trackResources,
        trackWebVitalsAttribution: browserConfig.trackWebVitalsAttribution,
    };
    return config;
}
exports.makeCoreConfig = makeCoreConfig;
//# sourceMappingURL=makeCoreConfig.js.map