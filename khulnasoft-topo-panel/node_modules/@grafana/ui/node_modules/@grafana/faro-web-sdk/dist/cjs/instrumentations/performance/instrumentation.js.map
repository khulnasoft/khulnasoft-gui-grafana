{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/instrumentation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAkE;AAGlE,2CAAoD;AACpD,uDAAmF;AACnF,uCAAoD;AAEpD;IAAgD,8CAAmB;IAAnE;QAAA,qEAyBC;QAxBU,UAAI,GAAG,mDAAmD,CAAC;QAC3D,aAAO,GAAG,mBAAO,CAAC;;IAuB7B,CAAC;IArBC,+CAAU,GAAV;QAAA,iBAgBC;QAfC,IAAI,CAAC,IAAA,+CAA4B,GAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,0EAA0E,CAAC,CAAC;YAC1F,OAAO;SACR;QAED,IAAA,kCAAe,EAAC;;;;;wBACR,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;wBAC/B,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;wBAEZ,qBAAM,IAAA,iCAAoB,EAAC,SAAS,EAAE,WAAW,CAAC,EAAA;;wBAAvE,gBAAgB,GAAK,CAAA,SAAkD,CAAA,iBAAvD;wBAExB,IAAI,gBAAgB,IAAI,IAAI,EAAE;4BAC5B,IAAA,iCAAsB,EAAC,gBAAgB,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;yBAClE;;;;aACF,CAAC,CAAC;IACL,CAAC;IAEO,kDAAa,GAArB;;QACE,OAAO,MAAA,IAAI,CAAC,UAAU,CAAC,UAAU,0CAAE,OAAO,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,CAAC,aAAa,EAAE,EAAzB,CAAyB,CAAC,CAAC;IACvF,CAAC;IACH,iCAAC;AAAD,CAAC,AAzBD,CAAgD,+BAAmB,GAyBlE;AAzBY,gEAA0B","sourcesContent":["import { BaseInstrumentation, VERSION } from '@grafana/faro-core';\nimport type { Patterns } from '@grafana/faro-core';\n\nimport { getNavigationTimings } from './navigation';\nimport { onDocumentReady, performanceObserverSupported } from './performanceUtils';\nimport { observeResourceTimings } from './resource';\n\nexport class PerformanceInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-performance';\n  readonly version = VERSION;\n\n  initialize() {\n    if (!performanceObserverSupported()) {\n      this.logDebug('performance observer not supported. Disable performance instrumentation.');\n      return;\n    }\n\n    onDocumentReady(async () => {\n      const pushEvent = this.api.pushEvent;\n      const ignoredUrls = this.getIgnoreUrls();\n\n      const { faroNavigationId } = await getNavigationTimings(pushEvent, ignoredUrls);\n\n      if (faroNavigationId != null) {\n        observeResourceTimings(faroNavigationId, pushEvent, ignoredUrls);\n      }\n    });\n  }\n\n  private getIgnoreUrls(): Patterns {\n    return this.transports.transports?.flatMap((transport) => transport.getIgnoreUrls());\n  }\n}\n"]}