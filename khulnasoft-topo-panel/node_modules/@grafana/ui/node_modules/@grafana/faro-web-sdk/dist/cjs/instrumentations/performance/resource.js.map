{"version":3,"file":"resource.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/resource.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,gDAAsD;AAGtD,+DAAwD;AACxD,uDAK4B;AAI5B,IAAM,uBAAuB,GAAG,EAAE,aAAa,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE,CAAC;AAE/E,SAAgB,sBAAsB,CACpC,gBAAwB,EACxB,SAAiC,EACjC,WAAmC;IAEnC,IAAM,cAAc,GAAG,gBAAI,CAAC,MAAM,CAAC,cAAc,CAAC;IAElD,IAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,UAAC,eAAe;QACvD,IAAM,OAAO,GAAG,eAAe,CAAC,UAAU,EAAE,CAAC;QAE7C,KAA+B,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;YAAnC,IAAM,gBAAgB,gBAAA;YACzB,IAAI,IAAA,oCAAiB,EAAC,WAAW,EAAE,gBAAgB,CAAC,IAAI,CAAC,EAAE;gBACzD,OAAO;aACR;YAED,IAAM,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAEvD,IAAI,WAAW,GAAgB,IAAA,iDAA8B,EAAC,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,YAAY,CAAC,CAAC;YAElG,IACE,CAAC,cAAc,IAAI,IAAI,IAAI,IAAA,0CAAuB,EAAC,oBAAoB,EAAE,uBAAuB,CAAC,CAAC;gBAClG,cAAc,EACd;gBACA,IAAM,iBAAiB,yBAClB,IAAA,2CAAwB,EAAC,oBAAoB,CAAC,KACjD,gBAAgB,kBAAA,EAChB,cAAc,EAAE,IAAA,sBAAU,GAAE,GAC7B,CAAC;gBAEF,SAAS,CAAC,2BAA2B,EAAE,iBAAiB,EAAE,SAAS,EAAE,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;aACvF;SACF;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC;QACf,IAAI,EAAE,qCAAc;QACpB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;AACL,CAAC;AAtCD,wDAsCC","sourcesContent":["import { faro, genShortID } from '@grafana/faro-core';\nimport type { EventsAPI, PushEventOptions } from '@grafana/faro-core';\n\nimport { RESOURCE_ENTRY } from './performanceConstants';\nimport {\n  createFaroResourceTiming,\n  entryUrlIsIgnored,\n  getSpanContextFromServerTiming,\n  includePerformanceEntry,\n} from './performanceUtils';\n\ntype SpanContext = PushEventOptions['spanContext'];\n\nconst DEFAULT_TRACK_RESOURCES = { initiatorType: ['xmlhttprequest', 'fetch'] };\n\nexport function observeResourceTimings(\n  faroNavigationId: string,\n  pushEvent: EventsAPI['pushEvent'],\n  ignoredUrls: Array<string | RegExp>\n) {\n  const trackResources = faro.config.trackResources;\n\n  const observer = new PerformanceObserver((observedEntries) => {\n    const entries = observedEntries.getEntries();\n\n    for (const resourceEntryRaw of entries) {\n      if (entryUrlIsIgnored(ignoredUrls, resourceEntryRaw.name)) {\n        return;\n      }\n\n      const resourceEntryRawJSON = resourceEntryRaw.toJSON();\n\n      let spanContext: SpanContext = getSpanContextFromServerTiming(resourceEntryRawJSON?.serverTiming);\n\n      if (\n        (trackResources == null && includePerformanceEntry(resourceEntryRawJSON, DEFAULT_TRACK_RESOURCES)) ||\n        trackResources\n      ) {\n        const faroResourceEntry = {\n          ...createFaroResourceTiming(resourceEntryRawJSON),\n          faroNavigationId,\n          faroResourceId: genShortID(),\n        };\n\n        pushEvent('faro.performance.resource', faroResourceEntry, undefined, { spanContext });\n      }\n    }\n  });\n\n  observer.observe({\n    type: RESOURCE_ENTRY,\n    buffered: true,\n  });\n}\n"]}