{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/instrumentation.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,mBAAmB,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAGlE,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,4BAA4B,EAAE,MAAM,oBAAoB,CAAC;AACnF,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAC;AAEpD,MAAM,OAAO,0BAA2B,SAAQ,mBAAmB;IAAnE;;QACW,SAAI,GAAG,mDAAmD,CAAC;QAC3D,YAAO,GAAG,OAAO,CAAC;IAuB7B,CAAC;IArBC,UAAU;QACR,IAAI,CAAC,4BAA4B,EAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,0EAA0E,CAAC,CAAC;YAC1F,OAAO;SACR;QAED,eAAe,CAAC,GAAS,EAAE;YACzB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;YACrC,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAEzC,MAAM,EAAE,gBAAgB,EAAE,GAAG,MAAM,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAEhF,IAAI,gBAAgB,IAAI,IAAI,EAAE;gBAC5B,sBAAsB,CAAC,gBAAgB,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;aAClE;QACH,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;IAEO,aAAa;;QACnB,OAAO,MAAA,IAAI,CAAC,UAAU,CAAC,UAAU,0CAAE,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,CAAC;IACvF,CAAC;CACF","sourcesContent":["import { BaseInstrumentation, VERSION } from '@grafana/faro-core';\nimport type { Patterns } from '@grafana/faro-core';\n\nimport { getNavigationTimings } from './navigation';\nimport { onDocumentReady, performanceObserverSupported } from './performanceUtils';\nimport { observeResourceTimings } from './resource';\n\nexport class PerformanceInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-performance';\n  readonly version = VERSION;\n\n  initialize() {\n    if (!performanceObserverSupported()) {\n      this.logDebug('performance observer not supported. Disable performance instrumentation.');\n      return;\n    }\n\n    onDocumentReady(async () => {\n      const pushEvent = this.api.pushEvent;\n      const ignoredUrls = this.getIgnoreUrls();\n\n      const { faroNavigationId } = await getNavigationTimings(pushEvent, ignoredUrls);\n\n      if (faroNavigationId != null) {\n        observeResourceTimings(faroNavigationId, pushEvent, ignoredUrls);\n      }\n    });\n  }\n\n  private getIgnoreUrls(): Patterns {\n    return this.transports.transports?.flatMap((transport) => transport.getIgnoreUrls());\n  }\n}\n"]}